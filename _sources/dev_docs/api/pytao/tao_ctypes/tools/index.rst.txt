:mod:`pytao.tao_ctypes.tools`
=============================

.. py:module:: pytao.tao_ctypes.tools


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytao.tao_ctypes.tools.NpEncoder



Functions
~~~~~~~~~

.. autoapisummary::

   pytao.tao_ctypes.tools.full_path
   pytao.tao_ctypes.tools.fingerprint
   pytao.tao_ctypes.tools.execute
   pytao.tao_ctypes.tools.execute2


.. function:: full_path(path)

   Helper function to expand enviromental variables and return the absolute path


.. class:: NpEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)


   Bases: :class:`json.JSONEncoder`

   See: https://stackoverflow.com/questions/50916422/python-typeerror-object-of-type-int64-is-not-json-serializable/50916741

   .. method:: default(self, obj)

      Implement this method in a subclass such that it returns
      a serializable object for ``o``, or calls the base implementation
      (to raise a ``TypeError``).

      For example, to support arbitrary iterators, you could
      implement default like this::

          def default(self, o):
              try:
                  iterable = iter(o)
              except TypeError:
                  pass
              else:
                  return list(iterable)
              # Let the base class default method raise the TypeError
              return JSONEncoder.default(self, o)



.. function:: fingerprint(keyed_data, digest_size=16)

   Creates a cryptographic fingerprint from keyed data.
   Used JSON dumps to form strings, and the blake2b algorithm to hash.


.. function:: execute(cmd, cwd=None)

   Constantly print Subprocess output while process is running
   from: https://stackoverflow.com/questions/4417546/constantly-print-subprocess-output-while-process-is-running

   # Example usage:
       for path in execute(["locate", "a"]):
       print(path, end="")

   Useful in Jupyter notebook


.. function:: execute2(cmd, timeout=None, cwd=None)

   Execute with time limit (timeout) in seconds, catching run errors.


