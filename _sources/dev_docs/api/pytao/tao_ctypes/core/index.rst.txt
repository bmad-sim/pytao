:mod:`pytao.tao_ctypes.core`
============================

.. py:module:: pytao.tao_ctypes.core


Module Contents
---------------

.. class:: Tao(init='', so_lib='')


   Class to run and interact with Tao. Requires libtao shared object.

   Setup:

   import os
   import sys
   TAO_PYTHON_DIR=os.environ['ACC_ROOT_DIR'] + '/tao/python'
   sys.path.insert(0, TAO_PYTHON_DIR)

   import tao_ctypes
   tao = tao_ctypes.Tao()
   tao.init("command line args here...")

   .. method:: get_output(self)


   .. method:: init(self, cmd)


   .. method:: cmd(self, cmd, exception_on_error=False)

      Runs a command, and returns the text output

      cmd: command string
      exception_on_error: will raise an exception of [ERROR or [FATAL is detected in the output

      Returns a list of strings


   .. method:: cmd_real(self, cmd)


   .. method:: cmd_integer(self, cmd)


   .. method:: register_cell_magic(self)

      Registers a cell magic in Jupyter notebooks
      Invoke by
      %%tao
      sho lat



.. class:: TaoModel(input_file='tao.init', ploton=True, use_tempdir=True, workdir=None, verbose=True, so_lib='', auto_configure=True)


   Bases: :class:`pytao.tao_ctypes.core.Tao`

   Base class for setting up a Tao model in a directory. Builds upon the Tao class.

   If use_tempdir==True, then the input_file and its directory will be copied to a temporary directory.
   If workdir is given, then this temporary directory will be placed in workdir.

   .. method:: configure(self)


   .. method:: init_line(self)


   .. method:: reinit(self)


   .. method:: vprint(self, *args, **kwargs)


   .. method:: globals(self)
      :property:

      Returns dict of tao parameters.
      Note that the name of this function cannot be named 'global'


   .. method:: evaluate(self, expression)

      .. rubric:: Example

      .evaluate('lat::orbit.x[beginning:end]')

      Returns an np.array of floats



.. function:: tao_object_evaluate(tao_object, expression)

   Evaluates an expression and returns

   Example expressions:
       beam::norm_emit.x[end]        # returns a single float
       lat::orbit.x[beginning:end]   # returns an np array of floats


.. function:: form_set_command(s, value, delim=':')

   Forms a set command string that is separated by delim.

   Splits into three parts:
   command:what:attribute

   If 'what' had delim inside, the comma should preserve that.

   Example:
   >>>form_set_command('ele:BEG:END:a', 1.23)
   'set ele BEG:END a = 1.23'


.. function:: apply_settings(tao_object, settings)

   Applies multiple settings to a tao object.
   Checks for lattice_calc_on and plot_on, and temporarily disables these for speed.


.. function:: run_tao(settings=None, run_commands=['set global track_type=single'], input_file='tao.init', ploton=False, workdir=None, so_lib='', verbose=False)

   Creates an LCLSTaoModel object, applies settings, and runs the beam.


