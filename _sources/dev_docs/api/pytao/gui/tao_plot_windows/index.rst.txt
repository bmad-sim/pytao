:mod:`pytao.gui.tao_plot_windows`
=================================

.. py:module:: pytao.gui.tao_plot_windows

.. autoapi-nested-parse::

   Provides windows for viewing and editing plots in tao



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytao.gui.tao_plot_windows.tao_place_plot_window
   pytao.gui.tao_plot_windows.tao_plot_window
   pytao.gui.tao_plot_windows.tao_new_plot_template_window
   pytao.gui.tao_plot_windows.new_graph_frame
   pytao.gui.tao_plot_windows.new_curve_frame
   pytao.gui.tao_plot_windows.tao_pgplot_canvas
   pytao.gui.tao_plot_windows.tao_pgplot_config_window
   pytao.gui.tao_plot_windows.tao_pgplot_place_window
   pytao.gui.tao_plot_windows.tao_ele_shape_window
   pytao.gui.tao_plot_windows.tao_building_wall_window
   pytao.gui.tao_plot_windows.building_wall_point_window



.. class:: tao_place_plot_window(root, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Allows the user to choose from defined template
   plots and plot them in matplotlib windows
   Currently only supported in matplotlib mode

   .. method:: refresh(self)

      Responsible for creating widgets and filling them with plots


   .. method:: plot_cmd(self, event=None)


   .. method:: mpl_plot(self, event=None)

      Creates a new matplotlib window with the currently selected plot


   .. method:: pg_plot(self, event=None)

      Opens a window that asks the user where the plot should be placed,
      and places it on the pgplot page


   .. method:: set_plot(self, event=None)

      Sets self.plot to the selected plot in the list


   .. method:: edit_template(self, event=None)

      Opens up a plot editting window and loads the selected template



.. class:: tao_plot_window(root, template, pipe, region=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Displays one (perhaps multiple) matplotlib plots that the user has specified from the plotting
   template window that they want to plot. Creating a window in tkinter is necessary rather than using
   matplotlib's built in system for creating windows because using that system will halt the tkinter
   mainloop until the plots are closed.
   If the region to place the graph is not specified, one will be selected automatically.

   .. method:: refresh(self, event=None, width=1)

      Makes the call to matplotlib to draw the plot to the window


   .. method:: destroy(self)

      Overloaded here to remove self from root.refresh_windows



.. class:: tao_new_plot_template_window(root, pipe, default=None, mode='N', *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for creating new plot templates (and their
   associated graphs and curves)
   default: if present, opens the plot editor with that plot selected
   mode: 'N' for new template, 'T' for editing existing templates, and 'R'
   for editing active plots

   .. method:: fill_plot_frame(self)


   .. method:: tr_setup(self, default)

      Performs additional setup needed in template/region mode,
      i.e. creates drop down lists to select plots,
      and loads in the default plot, or the first plot in the list
      if default == None
      Also adds options to the save box


   .. method:: swap_mode(self, overide=False, event=None)

      Swaps between showing templates and active plots
      Will always run if overide is set to True


   .. method:: x_axis_type_handler(self, *args)

      Updates self.x_axis_type to match the chosen x_axis_type, then calls
      graph_type_handler for each graph


   .. method:: clone_plot_method(self, ask=True)

      Clone the plot specified by plot_name


   .. method:: create_template(self, event=None)

      Reads the data input by the user and creates the plot template in tao


   .. method:: create_and_plot(self, event=None)


   .. method:: plot_name_handler(self, event=None)

      Reads the plot name into self.name, and warns the user if left blank


   .. method:: x_axis_type_handler(self, *args, **kwargs)

      Sets self.x_axis_type to the selected x_axis_type
      Pass the keyword argument skip_graph_handlers=True to skip graph_type handlers


   .. method:: _index_trace(self, *args)

      Updates self._plot_id when self.plot_var changes
      (self.plot_var contains actual plot name, self._plot_id is e.g. @T3)


   .. method:: _overwrite_trace(self, *args)

      Updates self._overwrite_ix when self.overwrite_var changes


   .. method:: refresh(self, event=None)

      In T/R mode, reloads plot properties from Tao
      In N mode, does nothing



.. class:: new_graph_frame(parent, plot)


   Bases: :class:`pytao.gui.tao_base_windows.tk.Frame`

   New and improved frame for editing graph properties

   .. method:: refresh(self)

      Grids the appropriate widgets for the current graph type,
      grids self.curve_frame or self.ele_frame as appropriate,
      then calls refresh for each of the curves if appropriate
      (i.e. if self.type not in ['lat_layout', 'floor_plan'])


   .. method:: delete(self, ask=True, event=None)

      Deletes this graph frame
      Call with ask = False to skip confirmation


   .. method:: duplicate(self, event=None)

      Adds a new graph_frame to self.parent.graph_frame that is a copy of
      this frame, and changes focus to that frame


   .. method:: clone(self, graph, event=None)

      Clone an existing graph (already defined in tao, use self.duplicate() to
      make copies of graphs already defined in the new plot template window
      Does not clone plot properties


   .. method:: graph_type_handler(self, *args)

      Checks that plot.x_axis_type is compatible with the selected graph type.
      If it is, updates self.type and calls self.refresh()
      If it is not, warns the user of the incompatibility.


   .. method:: name_handler(self, event=None)

      Checks that a good name has been input for the graph and
      updates self.name as necessary.  Warns the user if the name
      is taken or empty



.. class:: new_curve_frame(parent, graph)


   Bases: :class:`pytao.gui.tao_base_windows.tk.Frame`

   Provides a frame to configure curve properties as necessary

   .. method:: refresh(self)

      Draws appropriate widgets to the frame depending on graph.type and
      plot.x_axis_type.  The parent graph is expected to verify that
      the graph and x_axis type are compatible before calling this method


   .. method:: clone(self, curve)

      Clone the specified curve


   .. method:: delete(self, ask=True)

      Deletes this graph frame
      Call with ask = False to skip confirmation


   .. method:: duplicate(self, target=None)

      Duplicates this curve into the graph_frame specified by target
      target defaults to this curve_frame's parent graph


   .. method:: name_handler(self, event=None)

      Checks that a good name has been input for the curve and
      updates self.name as necessary.  Warns the user if the name
      is taken or empty


   .. method:: data_source_handler(self, *args)

      Keeps DAT_TYPE widgets in line with their respective
      data_source widgets



.. class:: tao_pgplot_canvas(parent, mode, root, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tk.Frame`

   Provides a widget that represents the pgplot window
   This widget has three modes of operation:
   "config", "place", and "view"
   In "config" mode, the window is shown in its maximally
   divided state given the current number of rows and columns.
   I.e., if r12 and r1234 have plots in them, four rows and
   two columns will be shown, since r1234 is a four row, 2 column
   region, and r12 just happens to take up the space of the top four
   regions in this configuration. This mode does not display
   which plot is placed in which region.
   In "view" mode, the canvas is shown as it actually is.
   In the above example, r12 would be displayed as one contiguous region,
   and r1234, r1244, r2234, r2244 would be displayed below it.
   The regions also show which plots are currently placed in them.
   In "place" mode, the canvas is displayed in much the same way as in
   "view" mode, except that clicking on regions selects/deselcts them
   for plot placing.  Necessarily, functionality is also provided to
   subdivide combined regions into their smaller parts

   .. method:: refresh(self, *args)

      Redraws the pgplot page with the correct regions


   .. method:: add_region(self, region, include_plot)

      Adds the region specified by name to the pgplot page.
      The name of the plot currently in the region will also
      be displayed if include_plot is True



.. class:: tao_pgplot_config_window(root, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for setting the pgplot window layout
   (number of rows/columns, number of lat_layouts, etc)

   .. method:: refresh(self, event=None)

      Fetch the current settings for row, column, and lat_layout number
      and update rowvar, colvar, and latvar accordingly


   .. method:: update_preview(self, *args)

      Draws rectangles to self.canvas to represent the pgplot
      window layout according to the values in self.rowvar,
      self.colvar, and self.latvar



.. class:: tao_pgplot_place_window(root, plot, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window that prompts the user for which
   pgplot region a new plot should be placed in,
   and then places the plot in the requested region.

   .. method:: update_region(self, event=None)

      Updates the pgpage widget to display the plot
      as it would be placed in the selected region,
      and warns the user if placing the plot in that region
      would cause other plots to be unplaced


   .. method:: place_cmd(self, event=None)

      Places self.plot in the selected region and closes this window



.. class:: tao_ele_shape_window(root, pipe, which, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for holding an ele_shape_frame,
   which allows the user to view and edit the ele shapes
   for floor plan and lat_layout plots

   pipe: the tao_interface used to querry/set ele shapes
   which: either "lat_layout" or "floor_plan"

   .. method:: refresh(self, event=None)



.. class:: tao_building_wall_window(root, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for viewing and editing building_wall
   settings.

   pipe: the tao_interface used to querry/set ele shapes

   .. method:: refresh(self, event=None)

      Redraws the table of wall sections with updated settings from tao


   .. method:: get_selected(self, event=None)

      Returns the selected row in the table, for
      use with other methods like add_point, etc.


   .. method:: add_section(self, event=None)

      Adds an empty building wall section


   .. method:: add_point(self, event=None)

      Adds a point to the selected building wall section


   .. method:: delete_section(self, event=None)

      Deletes the selected building wall section


   .. method:: delete_point(self, event=None)

      Deletes the selected building wall point


   .. method:: floor_plan_default(self, event=None)

      Opens a window for editing the floor_plan shape
      building_wall::*


   .. method:: floor_plan_selected(self, event=None)

      Opens a window for editing the floor_plan shape
      building_wall::name, where name is the name of the
      selected building wall section



.. class:: building_wall_point_window(parent, root, pipe, section_ix, point_ix, is_new)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Popup`

   Window for specifying building wall point properties.
   Handles both creating new points and editing existing points.

   parent: the parent window for this window
   root:       the tao root window
   pipe:       tao_interface object
   section_ix: the 1-based building wall section index that
               this point belongs to
   point_ix:   the 1-based index of the point to be edited
   is_new:     specifies whether or not this should be a
               new point or an existing point should be edited


