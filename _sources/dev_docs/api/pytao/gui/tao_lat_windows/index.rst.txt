:mod:`pytao.gui.tao_lat_windows`
================================

.. py:module:: pytao.gui.tao_lat_windows

.. autoapi-nested-parse::

   Provides windows for viewing the lattice and editting element attributes



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytao.gui.tao_lat_windows.tao_ele_window
   pytao.gui.tao_lat_windows.tao_multipole_frame
   pytao.gui.tao_lat_windows.tao_lattice_window
   pytao.gui.tao_lat_windows.tao_ele_browser



.. class:: tao_ele_window(root, pipe, default=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tao_list_window`

   Window for displaying and modifying element info.
   default specifies the element that should be
   displayed when the window is created
   Format for default: [universe, branch, element, base/model/design]

   .. method:: refresh(self, event=None, ask=True, *args)

      This is where most of the element information is actually created


   .. method:: close_cmd(self, event=None)

      Ask the user to save any unsaved changes before closing


   .. method:: s_callback(self, index)


   .. method:: show(self, index)

      Grids the parameter frame with given index to the body frame


   .. method:: h_callback(self, index)


   .. method:: hide(self, index)

      Un-grids the paramter frame with the given index


   .. method:: ele_set(self, event=None, refresh_self=True)

      Runs set commands for all the parameter frames and refreshes the window
      This window will only be refreshed if refresh_self=True


   .. method:: check_for_changes(self)

      Returns True if the current element has unsaved changes



.. class:: tao_multipole_frame(parent, tao_output, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tk.Frame`

   Displays multipole information (output of a
   python ele:multipoles or ele:elec_multipoles
   command in a table with certain elements editable
   parent: the parent widget of this frame
   tao_output: the raw, unfiltered output of the tao command that gave
           the multipole information
   pipe: tao_interface object

   .. method:: show_all_orders(self, event=None)

      Expands the table to include all orders of multipoles


   .. method:: set_params(self, set_str, event=None)


   .. method:: check_for_changes(self)



.. class:: tao_lattice_window(root, pipe, switches='', *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Shows lattice elements in a read-only table view
   with an interface to select which rows/columns
   are displayed

   .. method:: save_template(self, event=None)

      Writes the current switches to the file in self.template_file
      using the name given in self.temp_save.tk_var (if any)


   .. method:: temp_file_load(self, event=None)

      Tries to load the specified template file, and creates an OptionMenu to pick
      from defined templates if successful.  Also creates a save template button
      and entry for the name
      self.temp_dict is a dictionary whose keys are the names of templates and
      whose values are the switches for those templates


   .. method:: temp_chooser_callback(self, event=None)

      Fills in the switches specified by the template and refreshes


   .. method:: col_filter_callback(self, event=None)


   .. method:: ele_list_callback(self, event=None, *args)


   .. method:: open_filter_menu(self, event=None)

      Opens a menu to set the various row filters


   .. method:: toggle_advanced(self, event=None)

      Toggles self.use_advanced and enables/disables the appropriate widgets


   .. method:: fill_switches(self, event=None)

      Fills the switch widgets to reflect the values in self.switches


   .. method:: get_switches(self, event=None)

      Scans all widgets to get the switches that will be used


   .. method:: refresh(self, event=None)

      Fetches the lattice table with the new table
      parameters and updates the window
      Returns the number of elements found


   .. method:: open_ele_window(self, event=None)

      Opens an element window for the currently selected row



.. class:: tao_ele_browser(root, pipe, name, parent, parent_type, which='name', uni='All', autosize=False, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_lat_windows.tao_lattice_window`

   Very similar to the tao_lattice_window, but is
   intendend for selecting elements to be assigned
   to data as ele_name/ele_start_name/ele_ref_name
   root: the tk root window
   pipe: tao_interface instance
   name: the name of the d1/v1 array this is browsing for
   parent: the new_d1/v1_frame this is browsing for
   parent_type: must be either "data" or "var"
   which: must be "name", "start_name", or "ref_name"
   uni: a universe index as a string, or "All"
   autosize: if set True, the parent d1/v1 array's length
   will be set to match the number of elements found,
   and the base index for the array will be set to 1 if
   it is not already set

   .. method:: apply_callback(self, event=None)

      Checks that good indices have been input in self.ix_min_var
      and self.ix_max_var, and then copies ele names into ele_which
      for the selected data/var indices


   .. method:: _autosize_apply_callback(self)

      Apply callback implementation when operating with autosize == True


   .. method:: _fixed_size_apply_callback(self)

      Apply callback implementation when operating with autosize == False


   .. method:: refresh(self, event=None)

      Overload of tao_lattice_window.refresh() that prints the number
      of elements found



