:mod:`pytao.gui`
================

.. py:module:: pytao.gui

.. autoapi-nested-parse::

   This package implements a GUI for tao using tkinter, including interactive
   plots with matplotlib.  Matplotlib is required for the GUI.
   The GUI is organized into one root window from which various other
   toplevel windows can be spawned, including plots, element windows, and tables
   for data, variables, and lattice elements.  The GUI also supports defining
   new data, variables, and plot templates on the fly.
   To start the gui, just run

   python -m pytao.gui <args>

   on the command line.  <args> can be any switches that tao supports.
   Additionally, the GUI supports the -gui_init switch, which takes a
   gui.init file as its argument (see GUI documentation for more info)



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   __main__/index.rst
   data_type_list/index.rst
   main/index.rst
   module_check/index.rst
   tao_base_windows/index.rst
   tao_beam_windows/index.rst
   tao_console/index.rst
   tao_data_windows/index.rst
   tao_ele_location/index.rst
   tao_interface/index.rst
   tao_lat_windows/index.rst
   tao_misc_windows/index.rst
   tao_mpl_toolbar/index.rst
   tao_plot_dict/index.rst
   tao_plot_windows/index.rst
   tao_set/index.rst
   tao_var_windows/index.rst
   tao_widget/index.rst
   taoplot/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytao.gui.tao_root_window



.. class:: tao_root_window(*args, **kwargs)


   Bases: :class:`pytao.gui.tao_beam_windows.tk.Tk`

   .. method:: start_main(self)


   .. method:: sh_console(self, event=None)

      Packs or unpacks self.console as appropriate


   .. method:: tao_call(self, event=None)

      Runs the command file in self.call_file, appends it to the history,
      and clears self.call_file


   .. method:: menubar_init(self)


   .. method:: default_plots(self, include_init=True)

      If self.plot_mode == "matplotlib", opens all the
      plot templates listed in plot.gui.init in
      separate matplotlib windows
      Also opens matplotlib windows for any plots placed by the tao init file
      Will only place plots from the place buffer if include_init is False


   .. method:: tao_load(self, init_frame)

      Handles the startup of tao, including parsing gui.init and commandline
      arguments.


   .. method:: new_data_cmd(self)


   .. method:: new_var_cmd(self)


   .. method:: new_template_cmd(self)


   .. method:: write_data_cmd(self)

      Writes a fortran namelist file for all d2_arrays


   .. method:: write_var_cmd(self)

      Writes a fortran namelist file for all v1_arrays


   .. method:: reinit_cmd(self)

      Quit Tao, destroy the main frame, and respawn the init frame


   .. method:: quit_cmd(self, event='')


   .. method:: optimizer_cmd(self)


   .. method:: beam_init_cmd(self)


   .. method:: plot_template_cmd(self)


   .. method:: plot_region_cmd(self)


   .. method:: building_wall_cmd(self)


   .. method:: wave_cmd(self)


   .. method:: set_global_vars_cmd(self)


   .. method:: set_bmad_com_cmd(self)


   .. method:: view_vars_cmd(self)


   .. method:: view_data_cmd(self)


   .. method:: view_ele_cmd(self)


   .. method:: view_lattice_cmd(self)


   .. method:: lat_layout_shape_cmd(self)


   .. method:: floor_plan_shape_cmd(self)


   .. method:: new_data_event(self, event)


   .. method:: new_var_event(self, event)


   .. method:: new_template_event(self, event)


   .. method:: global_vars_event(self, event)


   .. method:: bmad_com_event(self, event)


   .. method:: view_data_event(self, event)


   .. method:: view_ele_event(self, event)


   .. method:: view_lattice_event(self, event)


   .. method:: plot_template_event(self, event)


   .. method:: plot_region_event(self, event)


   .. method:: view_vars_event(self, event)


   .. method:: beam_init_event(self, event)


   .. method:: reinit_event(self, event)


   .. method:: view_history_cmd(self)


   .. method:: debug_cmd(self)



