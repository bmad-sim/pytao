:mod:`pytao.gui.tao_var_windows`
================================

.. py:module:: pytao.gui.tao_var_windows

.. autoapi-nested-parse::

   Provides windows for viewing and editing variable arrays in tao



Module Contents
---------------

.. class:: tao_var_general_window(root, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tao_list_window`

   Skeleton class with several commonly used features.
   Comes with a scrollable region and supports adding other widgets
   Subclasses set tao_id before running this __init__ to handle
   adding/removing themselves from root window lists

   .. method:: refresh(self)


   .. method:: open_v1_callback(self, v1_var_name)


   .. method:: open_v1(self, v1_var_name)


   .. method:: edit_v1_callback(self, v1_var_name)


   .. method:: edit_v1(self, v1_var_name)


   .. method:: delete_v1_callback(self, v1_var_name)


   .. method:: delete_v1(self, v1_var_name)



.. class:: tao_v1_var_window(root, pipe, v1_var_name, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.lw_table_window`

   Light-weight version of table_window, intended to be less
   graphically/computationally intensive (for use with networked
   machines, for example).  Table is read only but individual
   entries can still be opened for editing with double click.

   .. method:: refresh(self)

      Creates a treeview to display the table information,
      and binds double click to open one item


   .. method:: list_row_fetch(self, index)

      Returns row number index to be appended to self.list_rows


   .. method:: lw_list_row_fetch(self, index)

      For use with lw_table_window.  Returns a list of the values
      to be displayed in each column of row #index.


   .. method:: lw_detail_callback(self, event=None)

      Callback for the light-weight table to open a detail window


   .. method:: bulk_set(self, fill_choices, parent)

      Overload of lw_table_window.bulk_set that calls refresh data and plot windows


   .. method:: open_detail_window(self, index)

      Opens up a detail window for the given index.


   .. method:: detail_set_callback(self, tao_list, set_str)

      Overload of lw_table_window.detail_set_callback that refreshes
      data-related windows



.. class:: tao_new_var_window(root, pipe, default=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for creating new v1_variable arrays

   .. method:: create_variables(self, event=None)

      Takes the information from the variable frames and runs
      the necessary commands to create the variables in tao, then closes
      the create variable window


   .. method:: tab_handler(self, event=None)

      Handles new tab creation and updates self.v1_index as necessary


   .. method:: refresh(self)

      Only here in case something tries to refresh this window



.. class:: new_v1_frame(parent)


   Bases: :class:`pytao.gui.tao_base_windows.tk.Frame`

   Provides a frame for inputting properties of a v1_variable array.

   .. method:: delete(self, ask=True, event=None)

      Deletes this v1_array frame


   .. method:: duplicate(self, event=None)

      Adds a new v1_frame to self.parent.v1_frame_list that is a copy of
      this frame, and changes focus to that frame


   .. method:: make_var_frame(self, event=None)

      Adds an entry to self.var_dict if necessary, and updates
      self.var_frame to show the values for the current variable


   .. method:: var_fill(self, ix)

      "Fills" the value in self.v1_array_wids[ix] to all vars in self.var_dict
      Actually just erases the values in self.var_dict, which produces the same effect


   .. method:: lat_browser(self)

      Opens a modified lattice table window to select elements en masse
      which should be either 'name', 'start_name', or 'ref_name'
      When the elements are chosen, ele_which will be set for each of this
      v1_array's variables sequentially


   .. method:: name_handler(self, event=None, strict=False)

      Checks whether the input name is valid, and
      sets the tab name to it if it is
      Returns True if the name is valid,
      False if the name is already in use by another v1,
      and None if the name is empty
      If strict is set True, a warning will be displayed
      for an empty name


   .. method:: ix_min_handler(self, event=None, strict=False)

      Checks if the starting index is valid,
      and updates self.ix_min if it is.
      Returns True if a good index is set,
      False if a bad index is set
      (non-integer or greater than ix_max),
      and None if the ix_min field is empty
      If strict is set true, prints a warning message
      for an empty ix_min


   .. method:: length_handler(self, event=None, strict=False)

      Checks that the v1 array length has been set
      to a valid value, and updates self.length if it has.
      Returns True if the length has been set to a valid
      (positive integer) value, False if set to an invalid
      value, and None if left blank.


   .. method:: low_high_handler(self, event=None, strict=False)

      Verifies that the min and max values are set to good values
      Returns True if they are,
      False if at least one is set invalidly,
      or None otherwise (at least one is blank)
      Prints an error for an empty low or high limit
      if strict is set True


   .. method:: clone(self, v1_array)

      Clones the existing v1_array into this v1_frame



