:mod:`pytao.gui.tao_data_windows`
=================================

.. py:module:: pytao.gui.tao_data_windows

.. autoapi-nested-parse::

   Provides windows for viewing and editing data arrays in tao



Module Contents
---------------

.. class:: tao_d2_data_window(root, pipe, *args, **kwargs)


   Bases: :py:obj:`pytao.gui.tao_base_windows.tao_list_window`

   Skeleton class with several commonly used features.
   Comes with a scrollable region and supports adding other widgets
   Subclasses set tao_id before running this __init__ to handle
   adding/removing themselves from root window lists

   .. method:: refresh(self)

      Clears self.list_frame and fills it with the current universe's
      d2/d1 data



.. class:: d2_data_frame(master, root, pipe, d2_data_name, u_ix)


   Sets up an object with the following attributes:
   self.frame = a tk frame that will hold all relevant widgets and labels
   self.name = holds the name of the d2_data this frame represents
   self.d1_data_list = list of all d1_data items contained by this d2_datum
   NOTE: master should be the frame that this frame is gridded into
   (usually a list_frame), while root should be the application root window

   .. method:: open_d1_callback(self, d2_data_name, d1_data_name, pipe, ix_lb, ix_ub, u_ix)


   .. method:: edit_d2_callback(self, d2_data_name, pipe)


   .. method:: edit_d2(self, d2_data_name, pipe)

      Opens the new data window and clones this d2_array in for editing


   .. method:: open_d1(self, d2_data_name, d1_data_name, pipe, ix_lb, ix_ub, u_ix)

      Opens a window with detailed information for d2_data_name.d1_data_name



.. class:: tao_d1_data_window(root, pipe, d1_data_name, u_ix, ix_lb, ix_ub, *args, **kwargs)


   Bases: :py:obj:`pytao.gui.tao_base_windows.lw_table_window`

   With lw set to True, opens a lw_table_window instead

   .. method:: refresh(self)

      Creates a treeview to display the table information,
      and binds double click to open one item


   .. method:: list_row_fetch(self, index)

      Returns row number index to be appended to self.list_rows


   .. method:: lw_list_row_fetch(self, index)

      For use with lw_table_window.  Returns a list of the values
      to be displayed in each column of row #index.


   .. method:: lw_detail_callback(self, event=None)

      Callback for the light-weight table to open a detail window


   .. method:: bulk_set(self, fill_choices, parent)

      Overload of lw_table_window.bulk_set that calls refresh data and plot windows


   .. method:: open_detail_window(self, index)

      Opens up a detail window for the given index.


   .. method:: detail_set_callback(self, tao_list, set_str)

      Overload of lw_table_window.detail_set_callback that refreshes
      data-related windows



.. class:: tao_new_data_window(root, pipe, default=None, *args, **kwargs)


   Bases: :py:obj:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a window for creating new d2 data arrays (and their associated d1 arrays)
   Pass the name of an existing d2_array to open that array and start editing its d1_arrays

   .. method:: fill_d2_frame(self)


   .. method:: load_d2_frame(self)


   .. method:: load_d1_frame(self, ask=True)

      Ungrids self.d2_frame, grids self.d1_frame, and sets up a notebook
      for the d1_frames if necessary.
      Set ask=False to skip message boxes


   .. method:: create_data(self, event=None)

      Takes the information from the d2_frame and d1_frames and runs
      the necessary commands to create the data in tao, then closes
      the create data window


   .. method:: tab_handler(self, event=None)

      Handles new tab creation and updates self.d1_index as necessary


   .. method:: add_d1_frame(self, d1_name, d2_name, event=None)

      Creates a new d1_frame for d1_name and reads existing data in from Tao if present
      Takes a line of output from python data_d1_array for d1_name
      d2_name should be "uni@d2_name"


   .. method:: refresh(self)

      Only here in case something tries to refresh this window



.. class:: new_d1_frame(d2_array, name='', full_name='')


   Bases: :py:obj:`pytao.gui.tao_base_windows.tk.Frame`

   Provides a frame for inputting properties of a d1_data array.
   To load an existing d1_array, pass the d1_array name as name
   (e.g. x,y, NOT orbit.x, orbit.y)
   Also pass the full name that should be used for data lookup
   (e.g. 1@orbit.x)

   .. method:: fill_defaults(self, event=None)

      Copies the properties of the first datum and makes them the defaults at the d1 level


   .. method:: delete(self, ask=True, event=None)

      Deletes this d1_array frame
      Call with ask = False to skip confirmation


   .. method:: duplicate(self, event=None)

      Adds a new d1_frame to self.d2_array.d1_frame_list that is a copy of
      this frame, and changes focus to that frame


   .. method:: make_datum_frame(self, event=None)

      Adds an entry to self.data_dict if necessary, and updates
      self.datum_frame to show the values for the current datum


   .. method:: datum_fill(self, ix)

      "Fills" the value in self.d1_array_wids[ix] to all datums in self.data_dict
      Actually just erases the values in self.data_dict, which produces the same effect


   .. method:: lat_browser(self, which)

      Opens a modified lattice table window to select elements en masse
      which should be either 'name', 'start_name', or 'ref_name'
      When the elements are chosen, ele_which will be set for each of this
      d1_array's data sequentially


   .. method:: name_handler(self, event=None, strict=False)

      Checks whether the input name is valid, and
      sets the tab name to it if it is
      Returns True if the name is valid,
      False if the name is already in use by another d1,
      and None if the name is empty
      If strict is set True, a warning will be displayed
      for an empty name


   .. method:: ix_min_handler(self, event=None, strict=False)

      Checks if the starting index is valid,
      and updates self.ix_min if it is.
      Returns True if a good index is set,
      False if a bad index is set
      (non-integer or greater than ix_max),
      and None if the ix_min field is empty
      If strict is set true, prints a warning message
      for an empty ix_min


   .. method:: length_handler(self, event=None, strict=False)

      Checks that the d1 array length has been set
      to a valid value, and updates self.length if it has.
      Returns True if the length has been set to a valid
      (positive integer) value, False if set to an invalid
      value, and None if left blank.


   .. method:: data_source_handler(self, *args)

      Updates the data_source widget to only show valid data types
      for the currently selected data source


   .. method:: data_type_handler(self, *args)

      Sets the state of the ele buttons appropriately for the currently selected data type



