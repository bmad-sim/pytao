:mod:`pytao.gui.tao_base_windows`
=================================

.. py:module:: pytao.gui.tao_base_windows

.. autoapi-nested-parse::

   Contains the base classes used by many (if not all) of the windows
   in the GUI for tao.



Module Contents
---------------

.. class:: Tao_Toplevel(parent, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_widget.tk.Toplevel`

   Skeleton class that handles adding/removing windows
   from the root refresh windows dictionary
   Subclasses should set self.tao_id before running this
   __init__ method.
   Subclasses MUST set self.root before running this
   __init__ method.

   .. method:: destroy(self)

      Overloaded here to remove self from root.refresh_windows



.. class:: Tao_Popup(parent, root, tao_id=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Provides a more convenient way to initialize a toplevel
   window that doesn't need to be its own subclass, used for
   things like ele_shape windows, dialog boxes, etc

   parent: the parent window
   root: the tao root window
   tao_id: which set of refresh windows this window should belong to (optional)


.. class:: tao_list_window(root, title, use_upper=False, min_width=0, parent=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Skeleton class with several commonly used features.
   Comes with a scrollable region and supports adding other widgets
   Subclasses set tao_id before running this __init__ to handle
   adding/removing themselves from root window lists

   .. method:: bind_mouse(self, event)


   .. method:: unbind_mouse(self, event)


   .. method:: mouse_scroll(self, event)



.. class:: tao_scroll_frame(parent, min_width=0, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_widget.tk.Frame`

   Provides a frame with a vertical scrollbar attached
   parent: the parent of this frame
   min_width: the minimum width that this frame must have
   self.frame should be used for placing widgets into
   this frame

   .. method:: frame_handler(self, event)


   .. method:: canvas_handler(self, event)


   .. method:: scrollhelper(self, event)


   .. method:: bind_mouse(self, event)


   .. method:: unbind_mouse(self, event)


   .. method:: mouse_scroll(self, event)



.. class:: tao_parameter_frame(parent, tao_list, n_col, pipe, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_widget.tk.Frame`

   Meant to display a list of parameters in a given
   number of columns
   tao_list should be a list of tao_parameters

   .. method:: set_params(self, set_str, event=None)

      Runs tao_set on self.tao_list


   .. method:: check_for_changes(self)

      Runs check_for_changes (from tao_set) on self.tao_list



.. class:: tao_parameter_window(root, title, tao_list, pipe, plot='', parent=None, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tao_list_window`

   Generic window for displaying and editing a list of parameters


.. class:: table_window(root, pipe, array_name, title_list, bulk_template, bulk_set_format, set_format, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.tao_list_window`

   Meant for showing large amounts of information in a table
   (e.g. d1_data and v1_vars).  Comes with bulk editing, detailed view of
   individual rows, and editing of individual parameters in the table.

   Input parameters:
   root: parent widget
   pipe: the tao_interface object that allows interface with Tao
   array_name: the name of the object this table displays
           (e.g. the name of the d1_datum or v1_variable)
   title_list: the column titles, in order from left to right
   bulk_template: a list with elements [tao_parameter, column], where
           tao_parameter is a generic copy of the parameter that will be bulk filled
           (i.e. initialized to "blank"), and column is the column number it should
           be gridded to (start counting from 0 on the left)
   bulk_set_format: format string for the bulk set string, to be used with the
           str.format() method
   set_format: format string for individual rows' set strings, to be used with
           the str.format() method
           example format strings: "set data 1@{}|", "set data 1@{}[{}]|"

   .. method:: refresh(self)


   .. method:: fill(self, index, event=None)

      Fills the column specified by bulk_template to the bulk edit value,
      saves the bulk edit value for efficient calls to tao_set,
      and clears the bulk edit box


   .. method:: fill_callback(self, index, event=None)


   .. method:: apply(self)


   .. method:: open_detail_window_callback(self, index)


   .. method:: open_detail_window(self, index)


   .. method:: detail_set_callback(self, tao_list, set_str)



.. class:: lw_table_window(root, pipe, array_name, title_list, bulk_format, bulk_set_format, set_format, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_base_windows.Tao_Toplevel`

   Light-weight version of table_window, intended to be less
   graphically/computationally intensive (for use with networked
   machines, for example).  Table is read only but individual
   entries can still be opened for editing with double click.

   .. method:: toggle_show_all(self, event=None)


   .. method:: refresh(self)

      Creates a treeview to display the table information,
      and binds double click to open one item


   .. method:: open_detail_window_callback(self, event=None)

      Checks the table for the currently selected row and
      makes a call to open_detail_window_callback


   .. method:: open_bulk_window(self, event=None)

      Opens a window with bulk settings for meas_value,
      ref_value, weight, and good_user.


   .. method:: bulk_set(self, fill_choices, parent)

      Runs set commands to set variables specified in a bulk window
      appropriately.


   .. method:: make_bulk_frame(self, parent, bulk_item, usebmd=False)

      Creates a frame with all the widgets needed for one parameter in the
      bulk settings window.
      parent: parent widget for this frame
      bulk_item: tao_parameter instance for this frame's parameter
      usebmd: if set true, and option will be given to set to the
              base/model/design/meas/ref value
      Returns a tuple (fill_frame, where_frame, fill_vars)


   .. method:: open_detail_window(self, index)

      Opens up a detail window for the given index.


   .. method:: detail_set_callback(self, tao_list, set_str)



.. class:: tao_branch_widgets(parent, pipe, default=None)


   Provides several widgets for slecting universe,
   branch, and elements
   Available widgets:
   self.uni_chooser: OptionMenu to pick the universe index
   self.branch_chooser: OptionMenu to pick the branch (displays name and index)
   self.ele_chooser: ttk Combobox for selecting an element.
           May be specified by name or index
   self.bmd_chooser: OptionMenu for choosing base, model, or design
   self.bme_chooser: OptionMenu for choosing beginning, middle, or end
   In addition, the class provides tk variables for each of these widgets,
           named the same but without _chooser at the end

   .. method:: make_branch(self, event=None)

      This is necessary because the list of options
      to show in the branch chooser depends on what
      universe you are in


   .. method:: make_ele_chooser(self, event=None)

      This is necessary because different branches
      have different lists of elements to display


   .. method:: update(self, event=None)

      Sets self.ele to its index value (as a string)
      Returns 0 if setting self.ele failed, 1 if succeeded


   .. method:: update_branch(self, *args)

      Trace callback for self.branch_name to update self.branch



.. class:: tao_progress_window(root, parent, num_bars, *args, **kwargs)


   Bases: :class:`pytao.gui.tao_widget.tk.Toplevel`

   Provides a window for displaying progress bars for long running processes
   Use the grid geometry manager for placing extra widgets in this window
   Row 0 is reserved for external manipulation (e.g. for a label)
   Properties:
   self.label_vars: list of variables used to set labels
   self.ix: counter used for external bookkeeping
   Init args:
   root: the Tk root window
   parent: the parent window for these progress bars
   num_bars: the number of progress bars
   Other init arguments are passed to the tk.Toplevel.__init__ method

   .. method:: set_max(self, ix, val)

      Sets the max value for self.bars[ix] to val


   .. method:: set_val(self, ix, val, update=True)

      Sets to value of self.bars[ix] to val
      Note that self.set_max should be used first to set the progress bar max
      Use update=False to prevent running self.parent.update_idletaks()
      (usually necessary to make progress bar reflect actual progress)



.. class:: tao_message_box(root, parent, tk_var, title='', message='', choices=[], orient='horizontal', *args, **kwargs)


   Bases: :class:`pytao.gui.tao_widget.tk.Toplevel`

   Custom messageboxes for when tkinter.messagebox does not suffice
   root: the Tk root window
   parent: the parent window for this message box
   tk_var: the tk.StringVar to write the results to
   title: title for this window
   message: the text to be displayed
   choices: list of strings for the user to pick from
   orient: grid the buttons horizontally or vertically (may be 'horizontal' or 'vertical')
   Other arguments are passed to the tk.Toplevel.__init__ method

   .. method:: button_callback(self, choice)


   .. method:: button_cmd(self, choice)


   .. method:: cancel(self, *args)



.. class:: tabbed_frame(parent, new_tab_func)


   Bases: :class:`pytao.gui.tao_widget.tk.Frame`

   Provides a frame for showing multiple frames one at a time
   in a tabbed view.
   parent: The parent widget where this frame will be placed
   new_tab_func: returns a new frame to add to a new tab
   self will be passed as the first positional argument and should
   be the only required positional arguments
   new_tab_func should return a tk.Frame with an instance variable
   self.name, a string that should be used for the initial tab name
   new_tab_func will likely be the init method for a tk.Frame subclass
   pipe: the tao_interface in use

   .. method:: add_tab(self, ix=None, *args, **kwargs)

      Adds a new tab at the specified index
      If ix is not specified, the tab is added at the end of the list
      *args and **kwargs are passed to self.new_tab_func after self


   .. method:: remove_tab(self, ix, destroy=False)

      Removes the tab at the specified position
      Does not destroy the removed frame unless destroy==True


   .. method:: update_name(self, ix=None)

      Updates the tab title to match the frame name for the
      tab in the specified position
      If ix==None, runs this method for all tabs



.. class:: ele_shape_frame(parent, root, pipe, which)


   Bases: :class:`pytao.gui.tao_widget.tk.Frame`

   Provides a frame for viewing and editing the shapes that are used to
   display lat_layout and floor_plan graphs in tao

   parent: the parent frame/Toplevel where this frame will be placed
   pipe: the tao_interface used to querry/set ele shapes
   which: either "lat_layout" or "floor_plan"

   .. method:: refresh(self)

      Sets the table contents equal to the output of
      python shape_list lat_layout/floor_plan as requested


   .. method:: width_adjust(self, event=None)

      Adjusts column widths and total table width to show all contents


   .. method:: get_focus_ix(self)

      Returns the index of the focus row (lowest index = 0, not 1)


   .. method:: edit_shape(self, event=None)

      Opens a window for editing the selected ele_shape


   .. method:: swap_shapes(self, ix1, ix2)

      Swaps the shapes with indices ix1 and ix2
      (0 based) and refreshes the window


   .. method:: move_up(self, event=None)

      Moves the selected item up one position, and shifts
      the others down by one


   .. method:: move_down(self, event=None)

      Moves the selected item down one position, and shifts
      the others down by one


   .. method:: duplicate_item(self, event=None)

      Copies the selected shape and adds a duplicate of it to
      the shape table at the next index


   .. method:: delete_item(self, event=None)

      Removes the selected item from the ele_shape table
      and shifts other ele_shapes accordingly


   .. method:: new_at_top(self, event=None)

      Adds a new empty shape to the top of the ele_list
      and shifts other elements down


   .. method:: new_at_bottom(self, event=None)

      Adds a new empty shape to the bottom of the ele_list
      and shifts other elements down



