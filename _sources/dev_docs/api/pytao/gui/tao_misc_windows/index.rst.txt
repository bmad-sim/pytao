:py:mod:`pytao.gui.tao_misc_windows`
====================================

.. py:module:: pytao.gui.tao_misc_windows

.. autoapi-nested-parse::

   Provides miscellaneous windows needed in the GUI for tao



Module Contents
---------------

.. py:class:: tao_global_vars_window(root)

   Bases: :py:obj:`pytao.gui.tao_base_windows.tao_parameter_window`

   Generic window for displaying and editing a list of parameters

   .. py:method:: set_callback()



.. py:class:: tao_bmad_com_window(root)

   Bases: :py:obj:`pytao.gui.tao_base_windows.tao_parameter_window`

   Generic window for displaying and editing a list of parameters

   .. py:method:: set_callback()



.. py:class:: tao_history_window(root, *args, **kwargs)

   Bases: :py:obj:`pytao.gui.tao_base_windows.tao_list_window`

   Skeleton class with several commonly used features.
   Comes with a scrollable region and supports adding other widgets
   Subclasses set tao_id before running this __init__ to handle
   adding/removing themselves from root window lists

   .. py:method:: refresh()


   .. py:method:: re_run(cmd_string, mode, event=None)

      Re-runs the given command or command file (cmd_string),
      using the specified mode.
      mode == 0 -> Run in Tao/system shell
      mode == 1 -> Run in system shell
      mode == 2 -> Re-run command file
      Using modes 4, 5, and 6 simply respawns cmd_string in
      the command line or call_file box, and does not run it


   .. py:method:: re_run_callback(cmd_string, mode, event=None)

      Formats a callback to self.re_run



