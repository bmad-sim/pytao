:py:mod:`pytao.tao_interface`
=============================

.. py:module:: pytao.tao_interface

.. autoapi-nested-parse::

   This module defines the tao_interface class, a general purpose interface
   between tao and python that supports both the ctypes and pexpect
   backend implementations.  Also defined here are a couple of helper functions
   for the tao_interface class.



Module Contents
---------------

.. py:class:: new_stdout

   Bases: :py:obj:`object`

   Re-routes the print statements generated by tao_io
   so that they can be shown by tao_console.


.. py:function:: filter_output(x)

   Filters out certain ANSI escape sequences from the string x


.. py:class:: tao_interface(mode='ctypes', init_args='', tao_exe='', expect_str='Tao>', so_lib='')

   Serves as a general purpose interface between tao and python
   Supports both the ctypes and pexpect interface implementations, allowing
   the user to select between them and falling back on the other if the
   selected interface cannot be used

   Init arguments:
   mode: either "ctypes" (default) or "pexpect"
   init_args: a string with the command line initialization arguments that
           tao should use, e.g. "-init tao.init -rf_on
   tao_exe: the tao executable to use (applies to pexpect only)
   so_lib: the tao shared library to use (applies to ctypes only)
   expect_str: the prompt string that tao will use (default is "Tao>")

   If you need direct access to the methods defined by the ctypes or pexpect
   backends, you can call them on self.pexpect_pipe and self.ctypes_pipe
   respectively, e.g. in ctypes mode, the cmd_real method can be accessed by
   self.ctypes_pipe.cmd_real()

   .. py:method:: cmd_in(cmd_str)

      Runs cmd_str at the Tao command line and returns the output as a string


   .. py:method:: cmd(cmd_str)

      Runs cmd_str at the Tao command line and prints the output
      to standard out



