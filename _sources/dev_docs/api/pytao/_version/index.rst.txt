:orphan:

:mod:`pytao._version`
=====================

.. py:module:: pytao._version

.. autoapi-nested-parse::

   Git implementation of _version.py.



Module Contents
---------------

.. function:: get_keywords()

   Get the keywords needed to look up the version information.


.. class:: VersioneerConfig

   Container for Versioneer configuration parameters.


.. function:: get_config()

   Create, populate and return the VersioneerConfig() object.


.. exception:: NotThisMethod


   Bases: :class:`Exception`

   Exception raised if a method is not valid for the current scenario.


.. data:: LONG_VERSION_PY
   

   

.. data:: HANDLERS
   

   

.. function:: register_vcs_handler(vcs, method)

   Create decorator to mark a method as the handler of a VCS.


.. function:: run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None)

   Call the given command(s).


.. function:: versions_from_parentdir(parentdir_prefix, root, verbose)

   Try to determine the version from the parent directory name.

   Source tarballs conventionally unpack into a directory that includes both
   the project name and a version string. We will also support searching up
   two directory levels for an appropriately named parent directory


.. function:: git_get_keywords(versionfile_abs)

   Extract version information from the given file.


.. function:: git_versions_from_keywords(keywords, tag_prefix, verbose)

   Get version information from git keywords.


.. function:: git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command)

   Get version from 'git describe' in the root of the source tree.

   This only gets called if the git-archive 'subst' keywords were *not*
   expanded, and _version.py hasn't already been rewritten with a short
   version string, meaning we're inside a checked out source tree.


.. function:: plus_or_dot(pieces)

   Return a + if we don't already have one, else return a .


.. function:: render_pep440(pieces)

   Build up version string, with post-release "local version identifier".

   Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you
   get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty

   Exceptions:
   1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]


.. function:: render_pep440_pre(pieces)

   TAG[.post0.devDISTANCE] -- No -dirty.

   Exceptions:
   1: no tags. 0.post0.devDISTANCE


.. function:: render_pep440_post(pieces)

   TAG[.postDISTANCE[.dev0]+gHEX] .

   The ".dev0" means dirty. Note that .dev0 sorts backwards
   (a dirty tree will appear "older" than the corresponding clean one),
   but you shouldn't be releasing software with -dirty anyways.

   Exceptions:
   1: no tags. 0.postDISTANCE[.dev0]


.. function:: render_pep440_old(pieces)

   TAG[.postDISTANCE[.dev0]] .

   The ".dev0" means dirty.

   Exceptions:
   1: no tags. 0.postDISTANCE[.dev0]


.. function:: render_git_describe(pieces)

   TAG[-DISTANCE-gHEX][-dirty].

   Like 'git describe --tags --dirty --always'.

   Exceptions:
   1: no tags. HEX[-dirty]  (note: no 'g' prefix)


.. function:: render_git_describe_long(pieces)

   TAG-DISTANCE-gHEX[-dirty].

   Like 'git describe --tags --dirty --always -long'.
   The distance/hash is unconditional.

   Exceptions:
   1: no tags. HEX[-dirty]  (note: no 'g' prefix)


.. function:: render(pieces, style)

   Render the given version pieces into the requested style.


.. function:: get_versions()

   Get version information or return default if unable to do so.


