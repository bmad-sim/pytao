:mod:`pytao`
============

.. py:module:: pytao

.. autoapi-nested-parse::

   pytao is the python interface to tao.  Contains backend implementations in both
   ctypes and pexpect.  The gui package supports a GUI interface to tao, in
   place of the tao command line interface, with matplotlib plotting capabilities.
   pytao also has some pre-defined constructs for dealing with data from tao
   in the util package.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   gui/index.rst
   misc/index.rst
   tao_ctypes/index.rst
   tao_pexpect/index.rst
   tests/index.rst
   util/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   _version/index.rst
   interface_commands/index.rst
   tao_interface/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytao.tao_io
   pytao.Tao
   pytao.TaoModel
   pytao.tao_interface



Functions
~~~~~~~~~

.. autoapisummary::

   pytao.run_tao
   pytao.evaluate_tao
   pytao.get_versions


.. class:: tao_io(init_args='', tao_exe='', timeout=600, expect_str='Tao>')


   .. method:: cmd_in(self, cmd_str)


   .. method:: cmd(self, cmd_str)



.. class:: Tao(init='', so_lib='')


   Class to run and interact with Tao. Requires libtao shared object.

   Setup:

   import os
   import sys
   TAO_PYTHON_DIR=os.environ['ACC_ROOT_DIR'] + '/tao/python'
   sys.path.insert(0, TAO_PYTHON_DIR)

   import tao_ctypes
   tao = tao_ctypes.Tao()
   tao.init("command line args here...")

   .. method:: get_output(self)


   .. method:: init(self, cmd)


   .. method:: cmd(self, cmd, exception_on_error=False)

      Runs a command, and returns the text output

      cmd: command string
      exception_on_error: will raise an exception of [ERROR or [FATAL is detected in the output

      Returns a list of strings


   .. method:: cmd_real(self, cmd)


   .. method:: cmd_integer(self, cmd)


   .. method:: register_cell_magic(self)

      Registers a cell magic in Jupyter notebooks
      Invoke by
      %%tao
      sho lat



.. class:: TaoModel(input_file='tao.init', ploton=True, use_tempdir=True, workdir=None, verbose=True, so_lib='', auto_configure=True)


   Bases: :class:`pytao.tao_ctypes.core.Tao`

   Base class for setting up a Tao model in a directory. Builds upon the Tao class.

   If use_tempdir==True, then the input_file and its directory will be copied to a temporary directory.
   If workdir is given, then this temporary directory will be placed in workdir.

   .. method:: configure(self)


   .. method:: init_line(self)


   .. method:: reinit(self)


   .. method:: vprint(self, *args, **kwargs)


   .. method:: globals(self)
      :property:

      Returns dict of tao parameters.
      Note that the name of this function cannot be named 'global'


   .. method:: __setitem__(self, key, item)

      Issue a set command separated by :

      .. rubric:: Example

      TaoModel['global:track_type'] = 'beam'

      will issue command:
          set global track_type = beam


   .. method:: evaluate(self, expression)

      .. rubric:: Example

      .evaluate('lat::orbit.x[beginning:end]')

      Returns an np.array of floats


   .. method:: __str__(self)

      Return str(self).



.. function:: run_tao(settings=None, run_commands=['set global track_type=single'], input_file='tao.init', ploton=False, workdir=None, so_lib='', verbose=False)

   Creates an LCLSTaoModel object, applies settings, and runs the beam.


.. function:: evaluate_tao(settings, run_commands=['set global track_type=beam'], expressions=['lat::orbit.x[end]'], input_file=None, ploton=False, beam_archive_path=None, archive_csr_wake=False, workdir=None, so_lib='', verbose=False)

   settings: dict of set_command:value where set_command is a string.
       Example:
           'global:track_type':'beam'
               will issue command:
           set global track_type = beam

   run_commands: list of command strings that will be executed.

   expressions: list of expression strings that will be used to form the output.

   beam_archive_path: if given, the all of the saved beams will be written to
       a file named by a fingerprint (hash) of the inputs into path beam_archive_path.
       This uses the command:
           write beam -at *
       which writes ALL of the bunches that are saved using the beam_saved_at list in beam_init.

   archive_csr_wake: if given, will look for csr_wake.dat, parse, and archive to the h5 file above.

   Returns a dict of expression:value, according to the expressions above, as well as
       beam_archive if a  beam_archive_path was given.



   Example:

   evaluate_tao(settings={},
                  input_file=tao.init',
                  run_commands=['set global track_type=beam'],
                  expressions = ['lat::orbit.x[FF.PIP02A]', 'beam::norm_emit.x[end]'],
                  ploton=False,
                  beam_archive_path = '.')

   :returns:

             0.0,
              'beam::norm_emit.x[end]': 9.9982321550206e-07,
              'beam_archive': /path/to/bmad_beam_7fd6d30ac45a3d8c0d45112f4b569dee.h5'}
   :rtype: {'lat::orbit.x[FF.PIP02A]'

   See: run_tao


.. class:: tao_interface(mode='ctypes', init_args='', tao_exe='', expect_str='Tao>', so_lib='')


   Serves as a general purpose interface between tao and python
   Supports both the ctypes and pexpect interface implementations, allowing
   the user to select between them and falling back on the other if the
   selected interface cannot be used

   Init arguments:
   mode: either "ctypes" (default) or "pexpect"
   init_args: a string with the command line initialization arguments that
           tao should use, e.g. "-init tao.init -rf_on
   tao_exe: the tao executable to use (applies to pexpect only)
   so_lib: the tao shared library to use (applies to ctypes only)
   expect_str: the prompt string that tao will use (default is "Tao>")

   If you need direct access to the methods defined by the ctypes or pexpect
   backends, you can call them on self.pexpect_pipe and self.ctypes_pipe
   respectively, e.g. in ctypes mode, the cmd_real method can be accessed by
   self.ctypes_pipe.cmd_real()

   .. method:: cmd_in(self, cmd_str)

      Runs cmd_str at the Tao command line and returns the output as a string


   .. method:: cmd(self, cmd_str)

      Runs cmd_str at the Tao command line and prints the output
      to standard out



.. function:: get_versions()

   Get version information or return default if unable to do so.


.. data:: __version__
   

   

