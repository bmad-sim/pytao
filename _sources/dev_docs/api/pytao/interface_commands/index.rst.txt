:py:mod:`pytao.interface_commands`
==================================

.. py:module:: pytao.interface_commands


Module Contents
---------------

.. py:function:: beam(tao, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Output beam parameters that are not in the beam_init structure.

   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python beam {ix_universe}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.

   Note: To set beam_init parameters use the "set beam" command.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init
    args:
      ix_universe: 1


.. py:function:: beam_init(tao, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Output beam_init parameters.

   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python beam_init {ix_universe}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.

   Note: To set beam_init parameters use the "set beam_init" command

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init
    args:
      ix_universe: 1


.. py:function:: bmad_com(tao, *, verbose=False, as_dict=True, raises=True)

   Output bmad_com structure components.

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python bmad_com

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: branch1(tao, ix_universe, ix_branch, *, verbose=False, as_dict=True, raises=True)

   Output lattice branch information for a particular lattice branch.

   :param ix_universe:
   :type ix_universe: ""
   :param ix_branch:
   :type ix_branch: ""

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python branch1 {ix_universe}@{ix_branch}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_universe: 1
      ix_branch: 0


.. py:function:: bunch_params(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Outputs bunch parameters at the exit end of a given lattice element.

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python bunch_params {ele_id}|{which}

   Where:
     {ele_id} is an element name or index.
     {which} is one of: "model", "base" or "design"

   .. rubric:: Example

   python bunch_params end|model  ! parameters at model lattice element named "end".

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init
    args:
      ele_id: end
      which: model


.. py:function:: bunch1(tao, ele_id, coordinate, *, which='model', ix_bunch='1', verbose=False, as_dict=True, raises=True)

   Outputs Bunch parameters at the exit end of a given lattice element.

   :param ele_id:
   :param coordinate:
   :param which:
   :type which: default=model
   :param ix_bunch:
   :type ix_bunch: default=1

   :returns: * *real_array* -- if coordinate != 'state'
             * *integer_array* -- if coordinate == 'state'

   .. rubric:: Notes

   Command syntax:
     python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}

   Where:
     {ele_id} is an element name or index.
     {which} is one of: "model", "base" or "design"
     {ix_bunch} is the bunch index.
     {coordinate} is one of: x, px, y, py, z, pz, "s", "t", "charge", "p0c", "state"

   For example, if {coordinate} = "px", the phase space px coordinate of each particle
   of the bunch is displayed. The "state" of a particle is an integer. A value of 1 means
   alive and any other value means the particle has been lost.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init
    args:
      ele_id: end
      coordinate: x
      which: model
      ix_bunch: 1


.. py:function:: building_wall_list(tao, *, ix_section='', verbose=False, as_dict=True, raises=True)

   Output List of building wall sections or section points

   :param ix_section:
   :type ix_section: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python building_wall_list {ix_section}

   Where:
     {ix_section} is a building wall section index.

   If {ix_section} is not present, a list of building wall sections is given.
   If {ix_section} is present, a list of section points is given.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall
    args:
      ix_section:

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall
    args:
      ix_section: 1


.. py:function:: building_wall_graph(tao, graph, *, verbose=False, as_dict=True, raises=True)

   Output (x, y) points for drawing the building wall for a particular graph.

   :param graph:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   The graph defines the coordinate system for the (x, y) points.
   Command syntax:
     python building_wall_graph {graph}

   Where:
     {graph} is a plot region graph name.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall
    args:
      graph: floor_plan.g


.. py:function:: building_wall_point(tao, ix_section, ix_point, z, x, radius, z_center, x_center, *, verbose=False, as_dict=True, raises=True)

   add or delete a building wall point

   :param ix_section:
   :param ix_point:
   :param z:
   :param x:
   :param radius:
   :param z_center:
   :param x_center:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}

   Where:
     {ix_section}    -- Section index.
     {ix_point}      -- Point index. Points of higher indexes will be moved up
                          if adding a point and down if deleting.
     {z}, etc...     -- See tao_building_wall_point_struct components.
                     -- If {z} is set to "delete" then delete the point.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall
    args:
      ix_section: 1
      ix_point: 1
      z: 0
      x: 0
      radius: 0
      z_center: 0
      x_center: 0


.. py:function:: building_wall_section(tao, ix_section, sec_name, sec_constraint, *, verbose=False, as_dict=True, raises=True)

   Add or delete a building wall section

   :param ix_section:
   :param sec_name:
   :param sec_constraint:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}

   Where:
     {ix_section}      -- Section index. Sections with higher indexes will be
                            moved up if adding a section and down if deleting.
     {sec_name}        -- Section name.
     {sec_constraint}  -- A section constraint name or "delete". Must be one of:
         delete          -- Delete section. Anything else will add the section.
         none
         left_side
         right_side

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_section: 1
      sec_name: test
      sec_constraint: none


.. py:function:: constraints(tao, who, *, verbose=False, as_dict=True, raises=True)

   Output optimization data and variable parameters that contribute to the merit function.

   :param who:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python constraints {who}

   Where:
     {who} is one of:
       data
       var
   Data constraints output is:
     data name
     constraint type
     evaluation element name
     start element name
     end/reference element name
     measured value
     ref value (only relavent if global%opt_with_ref = T)
     model value
     base value (only relavent if global%opt_with_base = T)
     weight
     merit value
     location where merit is evaluated (if there is a range)
   Var constraints output is:
     var name
     Associated varible attribute
     meas value
     ref value (only relavent if global%opt_with_ref = T)
     model value
     base value (only relavent if global%opt_with_base = T)
     weight
     merit value
     dmerit/dvar

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      who: data

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      who:var


.. py:function:: da_aperture(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True)

   Output dynamic aperture data

   :param ix_uni:
   :type ix_uni: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python da_aperture {ix_universe}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.


.. py:function:: da_params(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True)

   Output dynamic aperture input parameters

   :param ix_uni:
   :type ix_uni: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python da_params {ix_universe}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.


.. py:function:: data(tao, d2_name, d1_name, *, ix_universe='', dat_index='1', verbose=False, as_dict=True, raises=True)

   Output Individual datum parameters.

   :param d2_name:
   :param d1_name:
   :param ix_universe:
   :type ix_universe: optional
   :param dat_index:
   :type dat_index: default=1

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python data {ix_universe}@{d2_name}.{d1_name}[{dat_index}]

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {d2_name} is the name of the d2_data structure the datum is in.
     {d1_datum} is the name of the d1_data structure the datum is in.
     {dat_index} is the index of the datum.

   Use the "python data-d1" command to get detailed info on a specific d1 array.

   .. rubric:: Example

   python data 1@orbit.x[10]

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_universe:
      d2_name: twiss
      d1_name: end
      dat_index: 1

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_universe: 1
      d2_name: twiss
      d1_name: end
      dat_index: 1


.. py:function:: data_d2_create(tao, d2_name, n_d1_data, d_data_arrays_name_min_max, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Create a d2 data structure along with associated d1 and data arrays.

   :param d2_name:
   :param n_d1_data:
   :param d_data_arrays_name_min_max:
   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python data_d2_create {ix_universe}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {d2_name} is the name of the d2_data structure to create.
     {n_d1_data} is the number of associated d1 data structures.
     {d_data_arrays_name_min_max} has the form
       {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}
     where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.

   .. rubric:: Example

   python data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47

   This example creates a d2 data structure called "orbit" with
   two d1 structures called "x" and "y".

   The "x" d1 structure has an associated data array with indexes in the range [0, 45].
   The "y" d1 structure has an associated data arrray with indexes in the range [1, 47].

   Use the "set data" command to set created datum parameters.

   Note: When setting multiple data parameters,
         temporarily toggle s%global%lattice_calc_on to False
     ("set global lattice_calc_on = F") to prevent Tao trying to
         evaluate the partially created datum and generating unwanted error messages.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_universe: 1
      d2_name: orbit
      n_d1_data: 2
      d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47


.. py:function:: data_d2_destroy(tao, d2_name, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Destroy a d2 data structure along with associated d1 and data arrays.

   :param d2_name:
   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python data_d2_destroy {ix_universe}@{d2_name}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {d2_name} is the name of the d2_data structure to destroy.

   .. rubric:: Example

   python data_d2_destroy 2@orbit

   This destroys the orbit d2_data structure in universe 2.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      d2_name: orbit


.. py:function:: data_d2(tao, d2_name, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Output information on a d2_datum.

   :param d2_name:
   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python data_d2 {ix_universe}@{d2_name}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {d2_name} is the name of the d2_data structure.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_universe: 1
      d2_name: twiss


.. py:function:: data_d_array(tao, d2_name, d1_name, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Output list of datums for a given d1_data structure.

   :param d2_name:
   :param d1_name:
   :param ix_universe:
   :type ix_universe: optional

   :returns: **datums** -- Each dict has keys:
             'ix_d1', 'data_type', 'merit_type',
             'ele_ref_name', 'ele_start_name', 'ele_name',
             'meas_value', 'model_value', 'design_value',
             'useit_opt', 'useit_plot', 'good_user',
             'weight', 'exists'
   :rtype: list of dicts

   .. rubric:: Notes

   Command syntax:
     python data_d_array {ix_universe}@{d2_name}.{d1_name}

   Where:
     {ix_universe} is a universe index. Defaults to s%global%default_universe.
     {d2_name} is the name of the containing d2_data structure.
     {d1_name} is the name of the d1_data structure containing the array of datums.

   .. rubric:: Example

   python data_d_array 1@orbit.x

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_universe: 1
      d2_name: twiss
      d1_name: end


.. py:function:: data_d1_array(tao, d2_datum, *, ix_uni='', verbose=False, as_dict=True, raises=True)

   Output list of d1 arrays for a given data_d2.

   :param d2_datum:
   :param ix_uni:
   :type ix_uni: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python data_d1_array {d2_datum}

   {d2_datum} should be of the form
     {ix_uni}@{d2_datum_name}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      ix_uni: 1
      d2_datum: twiss


.. py:function:: data_parameter(tao, data_array, parameter, *, verbose=False, as_dict=True, raises=True)

   Output an array of values for a particular datum parameter for a given array of datums,

   :param data_array:
   :param parameter:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python data_parameter {data_array} {parameter}

   {parameter} may be any tao_data_struct parameter.
   .. rubric:: Example

   python data_parameter orbit.x model_value

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      data_array: twiss.end
      parameter: model_value


.. py:function:: data_d2_array(tao, ix_universe, *, verbose=False, as_dict=True, raises=True)

   Output data d2 info for a given universe.

   :param ix_universe:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python data_d2_array {ix_universe}

   .. rubric:: Example

   python data_d2_array 1

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_universe : 1


.. py:function:: data_set_design_value(tao, *, verbose=False, as_dict=True, raises=True)

   Set the design (and base & model) values for all datums.

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python data_set_design_value

   .. rubric:: Example

   python data_set_design_value

   Note: Use the "data_d2_create" and "datum_create" first to create datums.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:


.. py:function:: datum_create(tao, datum_name, data_type, *, ele_ref_name='', ele_start_name='', ele_name='', merit_type='', meas='0', good_meas='F', ref='0', good_ref='F', weight='0', good_user='T', data_source='lat', eval_point='END', s_offset='0', ix_bunch='0', invalid_value='0', spin_axis_n0_1='', spin_axis_n0_2='', spin_axis_n0_3='', spin_axis_l_1='', spin_axis_l_2='', spin_axis_l_3='', verbose=False, as_dict=True, raises=True)

   Create a datum.

   :param datum_name          ! EG:
   :type datum_name          ! EG: orb.x[3]
   :param data_type           ! EG:
   :type data_type           ! EG: orbit.x
   :param ele_ref_name:
   :type ele_ref_name: optional
   :param ele_start_name:
   :type ele_start_name: optional
   :param ele_name:
   :type ele_name: optional
   :param merit_type:
   :type merit_type: optional
   :param meas:
   :type meas: default=0
   :param good_meas:
   :type good_meas: default=F
   :param ref:
   :type ref: default=0
   :param good_ref:
   :type good_ref: default=F
   :param weight:
   :type weight: default=0
   :param good_user:
   :type good_user: default=T
   :param data_source:
   :type data_source: default=lat
   :param eval_point:
   :type eval_point: default=END
   :param s_offset:
   :type s_offset: default=0
   :param ix_bunch:
   :type ix_bunch: default=0
   :param invalid_value:
   :type invalid_value: default=0
   :param spin_axis%n0(1):
   :type spin_axis%n0(1): optional
   :param spin_axis%n0(2):
   :type spin_axis%n0(2): optional
   :param spin_axis%n0(3):
   :type spin_axis%n0(3): optional
   :param spin_axis%l(1):
   :type spin_axis%l(1): optional
   :param spin_axis%l(2):
   :type spin_axis%l(2): optional
   :param spin_axis%l(3):
   :type spin_axis%l(3): optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^
                         {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^
                         {good_ref}^^{weight}^^{good_user}^^{data_source}^^
                         {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^
                         {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^
                         {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}

   Note: The 3 values for spin_axis%n0, as a group, are optional.
         Also the 3 values for spin_axis%l are, as a group, optional.
   Note: Use the "data_d2_create" first to create a d2 structure with associated d1 arrays.
   Note: After creating all your datums, use the "data_set_design_value" routine to
         set the design (and model) values.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      datum_name: twiss.end[6]
      data_type: beta.y
      ele_ref_name:
      ele_start_name:
      ele_name: P1
      merit_type: target
      meas: 0
      good_meas: T
      ref: 0
      good_ref: T
      weight: 0.3
      good_user: T
      data_source: lat
      eval_point: END
      s_offset: 0
      ix_bunch: 1
      invalid_value: 0


.. py:function:: datum_has_ele(tao, datum_type, *, verbose=False, as_dict=True, raises=True)

   Output whether a datum type has an associated lattice element

   :param datum_type:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python datum_has_ele {datum_type}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      datum_type: twiss.end


.. py:function:: derivative(tao, *, verbose=False, as_dict=True, raises=True)

   Output optimization derivatives

   :returns: **out** -- Dictionary with keys corresponding to universe indexes (int),
             with dModel_dVar as the value:
                 np.ndarray with shape (n_data, n_var)
   :rtype: dict

   .. rubric:: Notes

   Command syntax:
     python derivative

   Note: To save time, this command will not recalculate derivatives.
   Use the "derivative" command beforehand to recalcuate if needed.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:


.. py:function:: ele_ac_kicker(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element ac_kicker parameters

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:ac_kicker {ele_id}|{which}

   Where:
     {ele_id} is an element name or index.
     {which} is one of
       model
       base
       design
   .. rubric:: Example

   python ele:ac_kicker 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_cartesian_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element cartesian_map parameters

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:cartesian_map {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {index} is the index number in the ele%cartesian_map(:) array
   {who} is one of:
     base
     terms
   .. rubric:: Example

   python ele:cartesian_map 3@1>>7|model 2 base

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field
    args:
     ele_id: 1@0>>1
     which: model
     index: 1
     who: base


.. py:function:: ele_chamber_wall(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element beam chamber wall parameters

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:chamber_wall {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {index} is index of the wall.
   {who} is one of:
     x       ! Return min/max in horizontal plane
     y       ! Return min/max in vertical plane

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d
    args:
     ele_id: 1@0>>1
     which: model
     index: 1
     who: x


.. py:function:: ele_control_var(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output list of element control variables.
   Used for group, overlay and ramper type elements.

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:control_var {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:control_var 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>873
     which: model


.. py:function:: ele_cylindrical_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element cylindrical_map

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:cylindrical_map {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {index} is the index number in the ele%cylindrical_map(:) array
   {who} is one of:
     base
     terms
   .. rubric:: Example

   python ele:cylindrical_map 3@1>>7|model 2 base

   This gives map #2 of element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field
    args:
     ele_id: 1@0>>5
     which: model
     index: 1
     who: base


.. py:function:: ele_elec_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element electric multipoles

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:elec_multipoles {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:elec_multipoles 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_floor(tao, ele_id, *, which='model', where='end', verbose=False, as_dict=True, raises=True)

   Output element floor coordinates. The output gives two lines. "Reference" is
   without element misalignments and "Actual" is with misalignments.

   :param ele_id:
   :param which:
   :type which: default=model
   :param where:
   :type where: default=end

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:floor {ele_id}|{which} {where}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {where} is an optional argument which, if present, is one of
     beginning  ! Upstream end
     center     ! Middle of element
     end        ! Downstream end (default)
   Note: {where} ignored for photonic elements crystal, mirror, and multilayer_mirror.
   .. rubric:: Example

   python ele:floor 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model
     where:

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model
     where: center


.. py:function:: ele_grid_field(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element grid_field

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:grid_field {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model, base, design
   {index} is the index number in the ele%grid_field(:) array.
   {who} is one of:
     base, points
   .. rubric:: Example

   python ele:grid_field 3@1>>7|model 2 base

   This gives grid #2 of element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_grid
    args:
     ele_id: 1@0>>1
     which: model
     index: 1
     who: base


.. py:function:: ele_gen_attribs(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element general attributes

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:gen_attribs {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:gen_attribs 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_head(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output "head" Element attributes

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:head {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:head 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_lord_slave(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output the lord/slave tree of an element.

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:lord_slave {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:lord_slave 3@1>>7|model

   This gives lord and slave info on element number 7 in branch 1 of universe 3.
   Note: The lord/slave info is independent of the setting of {which}.

   The output is a number of lines, each line giving information on an element (element index, etc.).
   Some lines begin with the word "Element".
   After each "Element" line, there are a number of lines (possibly zero) that begin with the word "Slave or "Lord".
   These "Slave" and "Lord" lines are the slaves and lords of the "Element" element.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_mat6(tao, ele_id, *, which='model', who='mat6', verbose=False, as_dict=True, raises=True)

   Output element mat6

   :param ele_id:
   :param which:
   :type which: default=model
   :param who:
   :type who: default=mat6

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:mat6 {ele_id}|{which} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {who} is one of:
     mat6
     vec0
     err
   .. rubric:: Example

   python ele:mat6 3@1>>7|model mat6

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model
     who: mat6


.. py:function:: ele_methods(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element methods

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:methods {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:methods 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element multipoles

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:multipoles {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:multipoles 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_orbit(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element orbit

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:orbit {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:orbit 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_param(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output lattice element parameter

   :param ele_id:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:param {ele_id}|{which} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   Possible {who} values is the same as possible {who} values for "python lat_list"
   except for "ele:mat6" and "ele:vec0".
   Note: Here {who} must be a single parameter and not a list.

   .. rubric:: Example

   python ele:param 3@1>>7|model e_tot

   This gives E_tot of element number 7 in branch 1 of universe 3.

   Note: On output the {variable} component will always be "F" (since this
   command cannot tell if a parameter is allowed to vary).

   Also see: "python lat_list".

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon
    args:
     ele_id: 1@0>>1
     which: model
     who: orbit.vec.1


.. py:function:: ele_photon(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element photon parameters

   :param ele_id:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:photon {ele_id}|{which} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {who} is one of:
     base
     material
     curvature
   .. rubric:: Example

   python ele:photon 3@1>>7|model base

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon
    args:
     ele_id: 1@0>>1
     which: model
     who: base


.. py:function:: ele_spin_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element spin_taylor parameters

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:spin_taylor {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:spin_taylor 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_spin
    args:
     ele_id: 1@0>>2
     which: model


.. py:function:: ele_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element taylor map

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:taylor {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:taylor 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_taylor
    args:
     ele_id: 1@0>>34
     which: model


.. py:function:: ele_taylor_field(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element taylor_field

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:taylor_field {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {index} is the index number in the ele%taylor_field(:) array
   {who} is one of:
     base
     terms
   .. rubric:: Example

   python ele:taylor_field 3@1>>7|model 2 base

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field
    args:
     ele_id: 1@0>>9
     which: model
     index: 1
     who: terms


.. py:function:: ele_twiss(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element Twiss parameters

   :param ele_id:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:twiss {ele_id}|{which}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   .. rubric:: Example

   python ele:twiss 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
     ele_id: 1@0>>1
     which: model


.. py:function:: ele_wake(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element wake.

   :param ele_id:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:wake {ele_id}|{which} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {Who} is one of
     base
     sr_long     sr_long_table
     sr_trans    sr_trans_table
     lr_mode_table
   .. rubric:: Example

   python ele:wake 3@1>>7|model

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wake
    args:
     ele_id: 1@0>>1
     which: model
     who: sr_long


.. py:function:: ele_wall3d(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)

   Output element wall3d parameters.

   :param ele_id:
   :param index:
   :param who:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ele:wall3d {ele_id}|{which} {index} {who}

   where {ele_id} is an element name or index and {which} is one of
     model
     base
     design
   {index} is the index number in the ele%wall3d(:) array (size obtained from "ele:head").
   {who} is one of:
     base
     table
   .. rubric:: Example

   python ele:wall3d 3@1>>7|model 2 base

   This gives element number 7 in branch 1 of universe 3.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d
    args:
     ele_id: 1@0>>1
     which: model
     index: 1
     who: table


.. py:function:: evaluate(tao, expression, *, flags='-array_out', verbose=False, as_dict=True, raises=True)

   Output the value of an expression. The result may be a vector.

   :param expression:
   :param flags: If -array_out, the output will be available in the tao_c_interface_com%c_real.!
   :type flags: default=-array_out

   :returns: * *string_list* -- if '-array_out' not in flags
             * *real_array* -- if '-array_out' in flags

   .. rubric:: Notes

   Command syntax:
     python evaluate {flags} {expression}

   .. rubric:: Example

   python evaluate data::cbar.11[1:10]|model

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      expression: data::cbar.11[1:10]|model


.. py:function:: em_field(tao, ele_id, x, y, z, t_or_z, *, which='model', verbose=False, as_dict=True, raises=True)

   Output EM field at a given point generated by a given element.

   :param ele_id:
   :param x:
   :param y:
   :param z:
   :param t_or_z:
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}

   where {which} is one of:
     model
     base
     design
   Where:
     {x}, {y}  -- Transverse coords.
     {z}       -- Longitudinal coord with respect to entrance end of element.
     {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ele_id: 1@0>>22
      which: model
      x: 0
      y: 0
      z: 0
      t_or_z: 0


.. py:function:: enum(tao, enum_name, *, verbose=False, as_dict=True, raises=True)

   Output list of possible values for enumerated numbers.

   :param enum_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python enum {enum_name}

   .. rubric:: Example

   python enum tracking_method

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      enum_name: tracking_method


.. py:function:: floor_plan(tao, graph, *, verbose=False, as_dict=True, raises=True)

   Output (x,y) points and other information that can be used for drawing a floor_plan.

   :param graph:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python floor_plan {graph}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      graph: r13.g


.. py:function:: floor_orbit(tao, graph, *, verbose=False, as_dict=True, raises=True)

   Output (x, y) coordinates for drawing the particle orbit on a floor plan.

   :param graph:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python floor_orbit {graph}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_floor_orbit
    args:
      graph: r33.g


.. py:function:: tao_global(tao, *, verbose=False, as_dict=True, raises=True)

   Output global parameters.

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python global

   Output syntax is parameter list form. See documentation at the beginning of this file.

   Note: The follow is intentionally left out:
     optimizer_allow_user_abort
     quiet
     single_step
     prompt_color
     prompt_string

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: help(tao, *, verbose=False, as_dict=True, raises=True)

   Output list of "help xxx" topics

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python help

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: inum(tao, who, *, verbose=False, as_dict=True, raises=True)

   Output list of possible values for an INUM parameter.
   For example, possible index numbers for the branches of a lattice.

   :param who:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python inum {who}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      who: ix_universe


.. py:function:: lat_calc_done(tao, branch_name, *, verbose=False, as_dict=True, raises=True)

   Output if a lattice recalculation has been proformed since the last
     time "python lat_calc_done" was called.

   :param branch_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python lat_calc_done

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      branch_name: 1@0


.. py:function:: lat_ele_list(tao, *, branch_name='', verbose=False, as_dict=True, raises=True)

   Output lattice element list.

   :param branch_name:
   :type branch_name: optional

   :returns:
   :rtype: list of str of element names

   .. rubric:: Notes

   Command syntax:
     python lat_ele_list {branch_name}

   {branch_name} should have the form:
     {ix_uni}@{ix_branch}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      branch_name: 1@0


.. py:function:: lat_branch_list(tao, *, ix_universe='', verbose=False, as_dict=True, raises=True)

   Output lattice branch list

   :param ix_universe:
   :type ix_universe: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python lat_branch_list {ix_universe}

   Output syntax:
     branch_index;branch_name;n_ele_track;n_ele_max

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_universe: 1


.. py:function:: lat_list(tao, elements, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out -track_only', verbose=False, as_dict=True, raises=True)

   Output list of parameters at ends of lattice elements

   :param elements:
   :param who:
   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model
   :param flags:
   :type flags: optional, default=-array_out -track_only

   :returns: * *string_list* -- if ('-array_out' not in flags) or (who in ['ele.name'])
             * *integer_array* -- if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']
             * *real_array* -- if ('-array_out' in flags) or ('real:' in who)

   .. rubric:: Notes

   Command syntax:
     python lat_list {flags} {ix_uni}@{ix_branch}>>{elements}|{which} {who}

   where:
    Optional {flags} are:
     -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.
     -track_only : If present, lord elements will not be matched to.
     -index_order : If present, order elements by element index instead of the standard s-position.
     -array_out : If present, the output will be available in the tao_c_interface_com%c_real or
       tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.
       Note: Only a single {who} item permitted when -array_out is present.

     {which} is one of:
       model
       base
       design

     {who} is a comma deliminated list of:
       orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.
       orbit.spin.1, orbit.spin.2, orbit.spin.3,
       orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,
       orbit.t, orbit.beta,
       orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.
       orbit.energy, orbit.pc,
       ele.name, ele.ix_ele, ele.ix_branch
       ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,
       ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,
       ele.x.eta, ele.x.etap,
       ele.y.eta, ele.y.etap,
       ele.s, ele.l
       ele.e_tot, ele.p0c
       ele.mat6, ele.vec0
       ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)

     {elements} is a string to match element names to.
       Use "*" to match to all elements.

   .. rubric:: Examples

   python lat_list -track 3@0>>Q*|base ele.s,orbit.vec.2
   python lat_list 3@0>>Q*|base real:ele.s

   Note: vector layout of mat6(6,6) is: [mat6(1,:), mat6(2,:), ...mat6(6,:)]
   Also see: "python ele:param"

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      elements: Q*
      which: model
      who: orbit.floor.x

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      elements: Q*
      which: design
      who: ele.ix_ele


.. py:function:: lat_param_units(tao, param_name, *, verbose=False, as_dict=True, raises=True)

   Output units of a parameter associated with a lattice or lattice element.

   :param param_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python lat_param_units {param_name}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      param_name: L


.. py:function:: matrix(tao, ele1_id, ele2_id, *, verbose=False, as_dict=True, raises=True)

   Output matrix value from the exit end of one element to the exit end of the other.

   :param ele1_id:
   :param ele2_id:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python matrix {ele1_id} {ele2_id}

   where:
     {ele1_id} is the start element.
     {ele2_id} is the end element.
   If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.
   Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.

   .. rubric:: Example

   python matrix 2@1>>q01w|design q02w

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ele1_id: 1@0>>q01w|design
      ele2_id: q02w


.. py:function:: merit(tao, *, verbose=False, as_dict=True, raises=True)

   Output merit value.

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python merit

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: orbit_at_s(tao, s, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)

   Output twiss at given s position.

   :param s:
   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python orbit_at_s {ix_uni}@{ix_branch}>>{s}|{which}

   where:
     {which} is one of:
       model
       base
       design
     {s} is the longitudinal s-position.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      s: 0.001
      which: model


.. py:function:: place_buffer(tao, *, verbose=False, as_dict=True, raises=True)

   Output place command buffer and reset the buffer.
   The contents of the buffer are the place commands that the user has issued.

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python place_buffer

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: plot_curve(tao, curve_name, *, verbose=False, as_dict=True, raises=True)

   Output curve information for a plot

   :param curve_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_curve {curve_name}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      curve_name: r13.g.a


.. py:function:: plot_lat_layout(tao, ix_universe: 1, ix_branch: 0, *, verbose=False, as_dict=True, raises=True)

   Output plot Lat_layout info

   :param ix_universe:
   :type ix_universe: 1
   :param ix_branch:
   :type ix_branch: 0

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_lat_layout {ix_universe}@{ix_branch}

   Note: The returned list of element positions is not ordered in increasing
         longitudinal position.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_universe: 1
      ix_branch: 0


.. py:function:: plot_list(tao, r_or_g, *, verbose=False, as_dict=True, raises=True)

   Output list of plot templates or plot regions.

   :param r_or_g:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_list {r_or_g}

   where "{r/g}" is:
     "r"      ! list regions
     "t"      ! list template plots

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      r_or_g: r


.. py:function:: plot_graph(tao, graph_name, *, verbose=False, as_dict=True, raises=True)

   Output graph info.

   :param graph_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_graph {graph_name}

   {graph_name} is in the form:
     {p_name}.{g_name}
   where
     {p_name} is the plot region name if from a region or the plot name if a template plot.
     This name is obtained from the python plot_list command.
     {g_name} is the graph name obtained from the python plot1 command.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      graph_name: beta.g


.. py:function:: plot_histogram(tao, curve_name, *, verbose=False, as_dict=True, raises=True)

   Output plot histogram info.

   :param curve_name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_histogram {curve_name}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      curve_name: r33.g.x


.. py:function:: plot_plot_manage(tao, plot_location, plot_name, n_graph, graph1_name, graph2_name, graphN_name, *, verbose=False, as_dict=True, raises=True)

   Template plot creation or destruction.

   :param plot_location:
   :param plot_name:
   :param n_graph:
   :param graph1_name:
   :param graph2_name:
   :param graphN_name:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python plot_plot_manage {plot_location}^^{plot_name}^^
                            {n_graph}^^{graph1_name}^^{graph2_name}^^{graphN_name}

   Use "@Tnnn" sytax for {plot_location} to place a plot. A plot may be placed in a
   spot where there is already a template.
   Extra graph names can be included with ^^ connection.
   If {n_graph} is set to -1 then just delete the plot.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      plot_location: @T1
      plot_name: beta
      n_graph: 1
      graph1_name: g1
      graph2_name: g2
      graphN_name: gN


.. py:function:: plot_curve_manage(tao, graph_name, curve_index, curve_name, *, verbose=False, as_dict=True, raises=True)

   Template plot curve creation/destruction

   :param graph_name:
   :param curve_index:
   :param curve_name:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}

   If {curve_index} corresponds to an existing curve then this curve is deleted.
   In this case the {curve_name} is ignored and does not have to be present.
   If {curve_index} does not not correspond to an existing curve, {curve_index}
   must be one greater than the number of curves.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      graph_name: beta.g
      curve_index: 1
      curve_name: r13.g.a


.. py:function:: plot_graph_manage(tao, plot_name, graph_index, graph_name, *, verbose=False, as_dict=True, raises=True)

   Template plot graph creation/destruction

   :param plot_name:
   :param graph_index:
   :param graph_name:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}

   If {graph_index} corresponds to an existing graph then this graph is deleted.
   In this case the {graph_name} is ignored and does not have to be present.
   If {graph_index} does not not correspond to an existing graph, {graph_index}
   must be one greater than the number of graphs.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      plot_name: beta
      graph_index: 1
      graph_name: beta.g


.. py:function:: plot_line(tao, region_name, graph_name, curve_name, *, x_or_y='', verbose=False, as_dict=True, raises=True)

   Output points used to construct the "line" associated with a plot curve.

   :param region_name:
   :param graph_name:
   :param curve_name:
   :param x_or_y:
   :type x_or_y: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}

   Optional {x-or-y} may be set to "x" or "y" to get the smooth line points x or y
   component put into the real array buffer.
   Note: The plot must come from a region, and not a template, since no template plots
         have associated line data.
   .. rubric:: Examples

   python plot_line r13.g.a   ! String array output.
   python plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.
   python plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting
    args:
      region_name: beta
      graph_name: g
      curve_name: a
      x_or_y:


.. py:function:: plot_symbol(tao, region_name, graph_name, curve_name, x_or_y, *, verbose=False, as_dict=True, raises=True)

   Output locations to draw symbols for a plot curve.

   :param region_name:
   :param graph_name:
   :param curve_name:
   :param x_or_y:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}

   Optional {x_or_y} may be set to "x" or "y" to get the symbol x or y
   positions put into the real array buffer.
   Note: The plot must come from a region, and not a template,
         since no template plots have associated symbol data.
   .. rubric:: Examples

   python plot_symbol r13.g.a       ! String array output.
   python plot_symbol r13.g.a x     ! x-component of the symbol positions
                                      loaded into the real array buffer.
   python plot_symbol r13.g.a y     ! y-component of the symbol positions
                                      loaded into the real array buffer.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting
    args:
      region_name: r13
      graph_name: g
      curve_name: a
      x_or_y:


.. py:function:: plot_transfer(tao, from_plot, to_plot, *, verbose=False, as_dict=True, raises=True)

   Output transfer plot parameters from the "from plot" to the "to plot" (or plots).

   :param from_plot:
   :param to_plot:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python plot_transfer {from_plot} {to_plot}

   To avoid confusion, use "@Tnnn" and "@Rnnn" syntax for {from_plot}.
   If {to_plot} is not present and {from_plot} is a template plot, the "to plots"
    are the equivalent region plots with the same name. And vice versa
    if {from_plot} is a region plot.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      from_plot: r13
      to_plot: r23


.. py:function:: plot1(tao, name, *, verbose=False, as_dict=True, raises=True)

   Output info on a given plot.

   :param name:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python plot1 {name}

   {name} should be the region name if the plot is associated with a region.
   Output syntax is parameter list form. See documentation at the beginning of this file.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      name: beta


.. py:function:: ptc_com(tao, *, verbose=False, as_dict=True, raises=True)

   Output Ptc_com structure components.

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ptc_com

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: ring_general(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)

   Output lattice branch with closed geometry info (emittances, etc.)

   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python ring_general {ix_uni}@{ix_branch}|{which}

   where {which} is one of:
     model
     base
     design
   .. rubric:: Example

   python ring_general 1@0|model

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
       ix_uni: 1
       ix_branch: 0
       which: model


.. py:function:: shape_list(tao, who, *, verbose=False, as_dict=True, raises=True)

   Output lat_layout or floor_plan shapes list

   :param who:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python shape_list {who}

   {who} is one of:
     lat_layout
     floor_plan

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      who: floor_plan


.. py:function:: shape_manage(tao, who, index, add_or_delete, *, verbose=False, as_dict=True, raises=True)

   Element shape creation or destruction

   :param who:
   :param index:
   :param add_or_delete:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python shape_manage {who} {index} {add_or_delete}

   {who} is one of:
     lat_layout
     floor_plan
   {add_or_delete} is one of:
     add     -- Add a shape at {index}.
                Shapes with higher index get moved up one to make room.
     delete  -- Delete shape at {index}.
                Shapes with higher index get moved down one to fill the gap.

   .. rubric:: Example

   python shape_manage floor_plan 2 add

   Note: After adding a shape use "python shape_set" to set shape parameters.
   This is important since an added shape is in a ill-defined state.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      who: floor_plan
      index: 1
      add_or_delete: add


.. py:function:: shape_pattern_list(tao, *, ix_pattern='', verbose=False, as_dict=True, raises=True)

   Output list of shape patterns or shape pattern points

   :param ix_pattern:
   :type ix_pattern: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python shape_pattern_list {ix_pattern}

   If optional {ix_pattern} index is omitted then list all the patterns.
   If {ix_pattern} is present, list points of given pattern.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape
    args:
      ix_pattern:


.. py:function:: shape_pattern_manage(tao, ix_pattern, pat_name, pat_line_width, *, verbose=False, as_dict=True, raises=True)

   Add or remove shape pattern

   :param ix_pattern:
   :param pat_name:
   :param pat_line_width:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}

   where:
     {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up
                                         if adding a pattern and down if deleting.
     {pat_name}        -- Pattern name.
     {pat_line_width}  -- Line width. Integer. If set to "delete" then section
                                               will be deleted.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape
    args:
      ix_pattern : 1
      pat_name : new_pat
      pat_line_width : 1


.. py:function:: shape_pattern_point_manage(tao, ix_pattern, ix_point, s, x, *, verbose=False, as_dict=True, raises=True)

   Add or remove shape pattern point

   :param ix_pattern:
   :param ix_point:
   :param s:
   :param x:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}

   where:
     {ix_pattern}      -- Pattern index.
     {ix_point}        -- Point index. Points of higher indexes will be moved up
                                       if adding a point and down if deleting.
     {s}, {x}          -- Point location. If {s} is "delete" then delete the point.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape
    args:
      ix_pattern: 1
      ix_point: 1
      s: 0
      x: 0


.. py:function:: shape_set(tao, who, shape_index, ele_name, shape, color, shape_size, type_label, shape_draw, multi_shape, line_width, *, verbose=False, as_dict=True, raises=True)

   Set lat_layout or floor_plan shape parameters.

   :param who:
   :param shape_index:
   :param ele_name:
   :param shape:
   :param color:
   :param shape_size:
   :param type_label:
   :param shape_draw:
   :param multi_shape:
   :param line_width:

   :returns:
   :rtype: None

   .. rubric:: Notes

   Command syntax:
     python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^
                      {shape_size}^^{type_label}^^{shape_draw}^^
                      {multi_shape}^^{line_width}

   {who} is one of:
     lat_layout
     floor_plan

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      who: floor_plan
      shape_index: 1
      ele_name: Q1
      shape: circle
      color:
      shape_size:
      type_label:
      shape_draw:
      multi_shape:
      line_width:


.. py:function:: show(tao, line, *, verbose=False, as_dict=True, raises=True)

   Output the output from a show command.

   :param line:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python show {line}

   {line} is the string to pass through to the show command.
   .. rubric:: Example

   python show lattice -python

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      line: -python


.. py:function:: species_to_int(tao, species_str, *, verbose=False, as_dict=True, raises=True)

   Convert species name to corresponding integer

   :param species_str:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python species_to_int {species_str}

   .. rubric:: Example

   python species_to_int CO2++

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      species_str: electron


.. py:function:: species_to_str(tao, species_int, *, verbose=False, as_dict=True, raises=True)

   Convert species integer id to corresponding

   :param species_int:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python species_to_str {species_int}

   .. rubric:: Example

   python species_to_str -1     ! Returns 'Electron'

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      species_int: -1


.. py:function:: spin_polarization(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)

   Output spin polarization information

   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python spin_polarization {ix_uni}@{ix_branch}|{which}

   where {which} is one of:
     model
     base
     design
   .. rubric:: Example

   python spin_polarization 1@0|model

   Note: This command is under development. If you want to use please contact David Sagan.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      which: model


.. py:function:: spin_resonance(tao, *, ix_uni='', ix_branch='', which='model', ref_ele='0', verbose=False, as_dict=True, raises=True)

   Output spin resonance information

   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model
   :param ref_ele: Reference element to calculate at.
   :type ref_ele: default=0

   .. rubric:: Notes

   Command syntax:
     python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      which: model


.. py:function:: super_universe(tao, *, verbose=False, as_dict=True, raises=True)

   Output super_Universe parameters.

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python super_universe

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: twiss_at_s(tao, s, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)

   Output twiss parameters at given s position.

   :param s:
   :param ix_uni:
   :type ix_uni: optional
   :param ix_branch:
   :type ix_branch: optional
   :param which:
   :type which: default=model

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python twiss_at_s {ix_uni}@{ix_branch}>>{s}|{which}

   where {which} is one of:
     model
     base
     design

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_uni: 1
      ix_branch: 0
      s: 0
      which: model


.. py:function:: universe(tao, ix_universe, *, verbose=False, as_dict=True, raises=True)

   Output universe info.

   :param ix_universe:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python universe {ix_universe}

   Use "python global" to get the number of universes.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      ix_universe: 1


.. py:function:: var(tao, var, *, slaves='', verbose=False, as_dict=True, raises=True)

   Output parameters of a given variable.

   :param var:
   :param slaves:
   :type slaves: optional

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var {var} slaves

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      var: quad[1]
      slaves:

   Example: 2
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      var: quad[1]
      slaves: slaves


.. py:function:: var_create(tao, var_name, ele_name, attribute, universes, weight, step, low_lim, high_lim, merit_type, good_user, key_bound, key_delta, *, verbose=False, as_dict=True, raises=True)

   Create a single variable

   :param var_name:
   :param ele_name:
   :param attribute:
   :param universes:
   :param weight:
   :param step:
   :param low_lim:
   :param high_lim:
   :param merit_type:
   :param good_user:
   :param key_bound:
   :param key_delta:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^
                       {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^
                       {good_user}^^{key_bound}^^{key_delta}

   {var_name} is something like "kick[5]".
   Before using var_create, setup the appropriate v1_var array using
   the "python var_v1_create" command.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching
    args:
      var_name: quad[1]
      ele_name: Q1
      attribute: L
      universes: 1
      weight: 0.001
      step: 0.001
      low_lim: -10
      high_lim: 10
      merit_type:
      good_user: T
      key_bound: T
      key_delta: 0.01


.. py:function:: var_general(tao, *, verbose=False, as_dict=True, raises=True)

   Output list of all variable v1 arrays

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_general

   Output syntax:
     {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:


.. py:function:: var_v_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True)

   Output list of variables for a given data_v1.

   :param v1_var:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_v_array {v1_var}

   .. rubric:: Example

   python var_v_array quad_k1

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      v1_var: quad_k1


.. py:function:: var_v1_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True)

   Output list of variables in a given variable v1 array

   :param v1_var:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_v1_array {v1_var}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      v1_var: quad_k1


.. py:function:: var_v1_create(tao, v1_name, n_var_min, n_var_max, *, verbose=False, as_dict=True, raises=True)

   Create a v1 variable structure along with associated var array.

   :param v1_name:
   :param n_var_min:
   :param n_var_max:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_v1_create {v1_name} {n_var_min} {n_var_max}

   {n_var_min} and {n_var_max} are the lower and upper bounds of the var
   .. rubric:: Example

   python var_v1_create quad_k1 0 45

   This example creates a v1 var structure called "quad_k1" with an associated
   variable array that has the range [0, 45].

   Use the "set variable" command to set a created variable parameters.
   In particular, to slave a lattice parameter to a variable use the command:
     set {v1_name}|ele_name = {lat_param}
   where {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}]
   .. rubric:: Examples

   set quad_k1[2]|ele_name = 2@q01w[k1]
   set quad_k1[2]|ele_name = 2@0>>10[k1]

   Note: When setting multiple variable parameters,
         temporarily toggle s%global%lattice_calc_on to False
     ("set global lattice_calc_on = F") to prevent Tao trying to evaluate the
   partially created variable and generating unwanted error messages.

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      v1_name: quad_k1
      n_var_min: 0
      n_var_max: 45


.. py:function:: var_v1_destroy(tao, v1_datum, *, verbose=False, as_dict=True, raises=True)

   Destroy a v1 var structure along with associated var sub-array.

   :param v1_datum:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python var_v1_destroy {v1_datum}

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      v1_datum: quad_k1


.. py:function:: wave(tao, what, *, verbose=False, as_dict=True, raises=True)

   Output Wave analysis info.

   :param what:

   :returns:
   :rtype: string_list

   .. rubric:: Notes

   Command syntax:
     python wave {what}

   Where {what} is one of:
     params
     loc_header
     locations
     plot1, plot2, plot3

   .. rubric:: Examples

   Example: 1
    init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init
    args:
      what: params


