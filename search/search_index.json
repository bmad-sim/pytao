{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTao","text":"<p>Tao is an open source general purpose program for charged particle and X-ray simulations in accelerators and storage rings. It is built on top of the Bmad toolkit (software library) which provides the needed computational routines needed to do simulations. Essentially you can think of Tao as a car and Bmad as the engine that powers the car. In fact Bmad powers a number of other simulation programs but that is getting outside of the scope of this manual. It is sometimes convenient to be able to run Tao via Python. For example, in an online control system environment.</p> <p>PyTao is wrapper on top of Tao and allow users to access the Tao library via ctypes or pexpect.</p> <p>Documentation for Bmad and Tao, as well as information for downloading the code if needed is given on the Bmad web site</p>"},{"location":"development/","title":"Development Guidelines","text":"<p>It is recommended that PyTao is updated and maintained in the following way. This workflow was not invented by this project, there are many helpful tutorials online like this if you want more information.</p>"},{"location":"development/#creating-a-local-checkout","title":"Creating a Local Checkout","text":"<p>If you want to make changes to a repository the first step is to create your own fork. This allows you to create feature branches without cluttering the main repository. It also assures that the main repository is only added to by Pull Request and review. Repositories can be forked from the GitHub site like presented at this example. Once this repository is created, you can clone into your own workspace.</p> <pre><code>$ git clone https://YOUR-USERNAME@github.com/YOUR-USERNAME/REPOSITORY.git\n</code></pre> <p>Now, that we have a copy of the repository create a branch for the feature or bug you would like to work on.</p> <pre><code>$ git checkout -b my-feature\n\n$ git status\nOn branch my-feature\nnothing to commit, working tree clean\n</code></pre>"},{"location":"development/#commit-guidelines","title":"Commit Guidelines","text":"<p>Now you are ready to start working! Make changes to files and commit them to your new branch. We like to preface our commit messages with a descriptor code. This makes it easier for someone reviewing your commit history to see what you have done. These are borrowed from the NumPy development documentation.</p> <p>Code   Description</p> <p>API    an (incompatible) API change   BLD    change related to building   BUG    bug fix   DEP    deprecate something, or remove a deprecated object   DEV    development tool or utility   DOC    documentation   ENH    enhancement   MNT    maintenance commit (refactoring, typos, etc.)   REV    revert an earlier commit   STY    style fix (whitespace, PEP8)   TST    addition or modification of tests   REL    related to releasing numpy   WIP    Commit that is a work in progress</p> <p>It is also helpful underneath classes and functions to write docstrings. These are later converted by Sphinx into HTML documentation. They also are a valuable tool for exploration of a codebase within an IPython terminal. Docstrings should follow the form described in the NumPy documentation</p>"},{"location":"development/#merging-changes","title":"Merging Changes","text":"<p>Once you are happy with your code, <code>push</code> it back to your fork on GitHub.</p> <pre><code>$ git push origin my-feature\n</code></pre> <p>You should now be able to create a Pull Request back to the original repository. You should never commit directly back to the original repository. In fact, if you are creating a new repository it is possible to strictly disallow this by explicitly protecting certain branches from direct commits.The reason we feel strongly that Pull Requests are necessary because they:</p> <p>1)  Allows other collaborators to view the changes you made, and give     feedback. 2)  Leave an easily understood explanation to why these changes are     necessary.</p> <p>Once these changes are deemed acceptable to enter the main repository, they Pull Request can be merged.</p>"},{"location":"development/#syncing-your-local-checkout","title":"Syncing your Local Checkout","text":"<p>Inevitably, changes to the upstream repository will occur and you will need to update your local checkout to reflect those. The first step is to make your local checkout aware of the upstream repository. If this is done correctly, you should see something like this:</p> <pre><code>$ git remote add upstream https://github.com/UPSTREAM-ORG/REPOSITORY.git\n$ git remote -v\norigin   https://github.com/YOUR-USERNAME/REPOSITORY.git (fetch)\norigin   https://github.com/YOUR-USERNAME/REPOSITORY.git (push)\nupstream https://github.com/UPSTREAM-ORG/REPOSITORY.git (fetch)\nupstream https://github.com/UPSTREAM-ORG/REPOSITORY.git (push)\n</code></pre> <p>Now, we need to fetch any changes from the upstream repository. <code>git fetch</code> will grab the latest commits that were merged since we made our own fork</p> <pre><code>$ git fetch upstream\n</code></pre> <p>Ideally you haven\\'t made any changes to your <code>master</code> branch. So you should be able to merge the latest <code>master</code> branch from the upstream repository without concern. All you need to do is to switch to your <code>master</code> branch, and pull in the changes from the upstream remote. It is usually a good idea to push any changes back to your fork as well.</p> <pre><code>$ git checkout master\n$ git pull upstream master\n$ git push origin master\n</code></pre> <p>Finally, we need to update our feature-branch to have the new changes. Here we use a <code>git rebase</code> to take our local changes, remove them temporarily, pull the upstream changes into our branch, and then re-add our local changes on the tip of the commit history. This avoids extraneous merge commits that clog the commit history of the branch. A more in-depth discussion can be found here. This process should look like this:</p> <pre><code>$ git checkout my-feature\n$ git rebase upstream/master\n</code></pre>"},{"location":"development/#note","title":"Note","text":"<p>This process should not be done if you think that anyone else is also working on that branch. The rebasing process re-writes the commit history so any other checkout of the same branch referring to the old history will create duplicates of all the commits.</p>"},{"location":"installation/","title":"Installation","text":"<p>Note! The Bmad Distribution (which includes Tao) must be installed before installing PyTao. Additionally, the Bmad Distribution must be compiled with the <code>ACC_ENABLE_SHARED=\"Y\"</code> flag set in the <code>bmad_dist/util/dist_prefs</code> file.</p> <p>For instructions on how to install the Bmad Distribution, please refer to the instructions available at the Bmad website.</p> <p>Since PyTao is a python package, it can be installed in a couple of different ways:</p>"},{"location":"installation/#using-setuptools","title":"Using setuptools","text":"<pre><code>python setup.py install\n</code></pre>"},{"location":"installation/#using-pip","title":"Using pip","text":"<pre><code># From PyPI distribution\npip install pytao\n\n# or from the source folder\npip install .\n</code></pre>"},{"location":"installation/#using-conda","title":"Using conda","text":"<pre><code>conda install -c conda-forge pytao\n</code></pre>"},{"location":"api/pytao/","title":"PyTao","text":"<p>Class to run and interact with Tao. Requires libtao shared object.</p> <p>Setup:</p> <p>import os import sys TAO_PYTHON_DIR=os.environ['ACC_ROOT_DIR'] + '/tao/python' sys.path.insert(0, TAO_PYTHON_DIR)</p> <p>import tao_ctypes tao = tao_ctypes.Tao() tao.init(\"command line args here...\")</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>class Tao:\n    \"\"\"\n    Class to run and interact with Tao. Requires libtao shared object.\n\n    Setup:\n\n    import os\n    import sys\n    TAO_PYTHON_DIR=os.environ['ACC_ROOT_DIR'] + '/tao/python'\n    sys.path.insert(0, TAO_PYTHON_DIR)\n\n    import tao_ctypes\n    tao = tao_ctypes.Tao()\n    tao.init(\"command line args here...\")\n    \"\"\"\n\n    #---------------------------------------------\n\n    def __init__(self, init='', so_lib=''):\n        # TL/DR; Leave this import out of the global scope.\n        #\n        # Make it lazy import to avoid cyclical dependency.\n        # at __init__.py there is an import for Tao which\n        # would cause interface_commands to be imported always\n        # once we import pytao.\n        # If by any chance the interface_commands.py is broken and\n        # we try to autogenerate it will complain about the broken\n        # interface_commands file.\n\n        from pytao import interface_commands \n        from pytao.tao_ctypes import extra_commands\n\n        # Library needs to be set.\n        self.so_lib_file = None\n        if so_lib == '':\n            # Search\n            ACC_ROOT_DIR = os.getenv('ACC_ROOT_DIR', '')\n            if ACC_ROOT_DIR:\n                BASE_DIR = os.path.join(ACC_ROOT_DIR, 'production', 'lib')\n                self.so_lib_file = find_libtao(BASE_DIR)\n        else:\n            self.so_lib_file = so_lib\n\n        if self.so_lib_file:\n            self.so_lib = ctypes.CDLL(self.so_lib_file)\n        else:\n            lib, lib_file = auto_discovery_libtao()\n\n            if lib:\n                self.so_lib = lib\n                self.so_lib_file = lib_file\n            else:\n                raise ValueError(f'Shared object libtao library not found.')\n\n        self.so_lib.tao_c_out_io_buffer_get_line.restype = ctypes.c_char_p\n        self.so_lib.tao_c_out_io_buffer_reset.restype = None\n\n        # Extra methods\n        self._import_commands(interface_commands)\n        self._import_commands(extra_commands)\n\n        try:\n            self.register_cell_magic()\n        except:\n            pass\n\n        if init:\n            self.init(init)\n\n\n    def _import_commands(self, module):\n        deny_list = getattr(module, '__deny_list', [])\n        # Add in methods from `interface_commands`\n        methods = [m for m in dir(module) if not m.startswith('__') and m not in deny_list]\n        for m in methods:\n            func = module.__dict__[m]\n            setattr(self, m, types.MethodType(func, self))            \n\n    #---------------------------------------------\n    # Used by init and cmd routines\n\n    def get_output(self, reset=True):\n        \"\"\"\n        Returns a list of output strings.\n        If reset, the internal Tao buffers will be reset.\n        \"\"\"\n        n_lines = self.so_lib.tao_c_out_io_buffer_num_lines()\n        lines = [self.so_lib.tao_c_out_io_buffer_get_line(i).decode('utf-8') for i in range(1, n_lines+1)]\n        if reset:\n            self.so_lib.tao_c_out_io_buffer_reset()\n        return lines\n\n    def reset_output(self):\n        \"\"\"\n        Resets all output buffers\n        \"\"\"\n        self.so_lib.tao_c_out_io_buffer_reset()\n\n    #---------------------------------------------\n    # Init Tao\n\n    def init(self, cmd):\n\n        if not tao_ctypes.initialized:\n            logger.debug(f'Initializing Tao with: {cmd}')\n            err = self.so_lib.tao_c_init_tao(cmd.encode('utf-8'))\n            if err != 0:\n                raise ValueError(f'Unable to init Tao with: {cmd}')\n            tao_ctypes.initialized = True\n            return self.get_output()\n        else:\n            # Reinit\n            return self.cmd(f'reinit tao -clear {cmd}', raises=True)\n\n    #---------------------------------------------\n    # Send a command to Tao and return the output\n\n    def cmd(self, cmd, raises=True):\n        \"\"\"\n        Runs a command, and returns the text output\n\n        cmd: command string\n        raises: will raise an exception of [ERROR or [FATAL is detected in the output\n\n        Returns a list of strings\n        \"\"\"\n\n        logger.debug(f'Tao&gt; {cmd}')\n\n        self.so_lib.tao_c_command(cmd.encode('utf-8'))\n        lines = self.get_output()\n\n        # Error checking\n        if not raises:\n            return lines\n\n        err = error_in_lines(lines)\n        if err:\n            raise RuntimeError(f'Command: {cmd} causes error: {err}')\n\n        return lines\n\n    def cmds(self, cmds, \n             suppress_lattice_calc=True, \n             suppress_plotting=True, \n             raises=True):\n        \"\"\"\n        Runs a list of commands\n\n        Args:\n            cmds: list of commands\n\n            suppress_lattice_calc: bool, optional\n                If True, will suppress lattice calc when applying the commands\n                Default: True\n\n            suppress_plotting: bool, optional\n                If True, will suppress plotting when applying commands\n                Default: True\n\n            raises: bool, optional\n                If True will raise an exception of [ERROR or [FATAL is detected in the \n                output\n                Default: True\n\n        Returns:\n            list of results corresponding to the commands\n\n        \"\"\"\n        # Get globals to detect plotting\n        g = self.tao_global()\n        ploton, laton = g['plot_on'], g['lattice_calc_on']\n\n        if suppress_plotting and ploton:\n            self.cmd('set global plot_on = F')\n        if suppress_lattice_calc and laton:\n            self.cmd('set global lattice_calc_on = F')            \n\n        # Actually apply commands\n        results = []\n        for cmd in cmds:\n            res = self.cmd(cmd, raises=raises)\n            results.append(res)\n\n        if suppress_plotting and ploton:\n            self.cmd('set global plot_on = T')\n        if suppress_lattice_calc and laton:\n            self.cmd('set global lattice_calc_on = T')               \n\n        return results\n\n\n\n    #---------------------------------------------\n    # Get real array output.\n    # Only python commands that load the real array buffer can be used with this method.\n\n    def cmd_real (self, cmd, raises=True):\n        logger.debug(f'Tao&gt; {cmd}')\n\n        self.so_lib.tao_c_command(cmd.encode('utf-8'))\n        n = self.so_lib.tao_c_real_array_size()\n        # Empty array\n        if n == 0:\n            return np.array([], dtype=float)     \n\n        self.so_lib.tao_c_get_real_array.restype = ctypes.POINTER(ctypes.c_double * n)\n\n        # Check the output for errors\n        lines = self.get_output(reset=False)\n        err = error_in_lines(lines)\n        if err:\n            self.reset_output()\n            if raises:\n                raise RuntimeError(err)\n            else:\n                return None\n\n        # Extract array data\n        # This is a pointer to the scratch space.\n        array = np.ctypeslib.as_array(\n            (ctypes.c_double * n).from_address(ctypes.addressof(self.so_lib.tao_c_get_real_array().contents)))\n\n        array = array.copy()\n        self.reset_output()\n\n        return array  \n\n    #----------\n    # Get integer array output.\n    # Only python commands that load the integer array buffer can be used with this method.\n\n    def cmd_integer (self, cmd, raises=True):\n        logger.debug(f'Tao&gt; {cmd}')\n\n        self.so_lib.tao_c_command(cmd.encode('utf-8'))\n        n = self.so_lib.tao_c_integer_array_size()\n        # Empty array\n        if n == 0:\n            return np.array([], dtype=int)\n\n        self.so_lib.tao_c_get_integer_array.restype = ctypes.POINTER(ctypes.c_int * n)\n\n        # Check the output for errors\n        lines = self.get_output(reset=False)\n        err = error_in_lines(lines)\n        if err:\n            self.reset_output()\n            if raises:\n                raise RuntimeError(err)\n            else:\n                return None  \n\n        # Extract array data\n        # This is a pointer to the scratch space.\n        array = np.ctypeslib.as_array(\n            (ctypes.c_int * n).from_address(ctypes.addressof(self.so_lib.tao_c_get_integer_array().contents)))\n\n        array = array.copy()\n        self.reset_output()\n\n        return array  \n\n\n\n    #---------------------------------------------\n\n    def register_cell_magic(self):\n      \"\"\"\n      Registers a cell magic in Jupyter notebooks\n      Invoke by\n      %%tao\n      sho lat\n      \"\"\"\n\n      from IPython.core.magic import register_cell_magic\n      @register_cell_magic\n      def tao(line, cell):\n          cell = cell.format(**globals())\n          cmds=cell.split('\\n')\n          output = []\n          for c in cmds:\n              print('-------------------------')\n              print('Tao&gt; '+c)\n              res = self.cmd(c)\n              for l in res:\n                   print(l)\n      del tao\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.__init__","title":"<code>__init__(init='', so_lib='')</code>","text":"Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def __init__(self, init='', so_lib=''):\n    # TL/DR; Leave this import out of the global scope.\n    #\n    # Make it lazy import to avoid cyclical dependency.\n    # at __init__.py there is an import for Tao which\n    # would cause interface_commands to be imported always\n    # once we import pytao.\n    # If by any chance the interface_commands.py is broken and\n    # we try to autogenerate it will complain about the broken\n    # interface_commands file.\n\n    from pytao import interface_commands \n    from pytao.tao_ctypes import extra_commands\n\n    # Library needs to be set.\n    self.so_lib_file = None\n    if so_lib == '':\n        # Search\n        ACC_ROOT_DIR = os.getenv('ACC_ROOT_DIR', '')\n        if ACC_ROOT_DIR:\n            BASE_DIR = os.path.join(ACC_ROOT_DIR, 'production', 'lib')\n            self.so_lib_file = find_libtao(BASE_DIR)\n    else:\n        self.so_lib_file = so_lib\n\n    if self.so_lib_file:\n        self.so_lib = ctypes.CDLL(self.so_lib_file)\n    else:\n        lib, lib_file = auto_discovery_libtao()\n\n        if lib:\n            self.so_lib = lib\n            self.so_lib_file = lib_file\n        else:\n            raise ValueError(f'Shared object libtao library not found.')\n\n    self.so_lib.tao_c_out_io_buffer_get_line.restype = ctypes.c_char_p\n    self.so_lib.tao_c_out_io_buffer_reset.restype = None\n\n    # Extra methods\n    self._import_commands(interface_commands)\n    self._import_commands(extra_commands)\n\n    try:\n        self.register_cell_magic()\n    except:\n        pass\n\n    if init:\n        self.init(init)\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.cmd","title":"<code>cmd(cmd, raises=True)</code>","text":"<p>Runs a command, and returns the text output</p> <p>cmd: command string raises: will raise an exception of [ERROR or [FATAL is detected in the output</p> <p>Returns a list of strings</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def cmd(self, cmd, raises=True):\n    \"\"\"\n    Runs a command, and returns the text output\n\n    cmd: command string\n    raises: will raise an exception of [ERROR or [FATAL is detected in the output\n\n    Returns a list of strings\n    \"\"\"\n\n    logger.debug(f'Tao&gt; {cmd}')\n\n    self.so_lib.tao_c_command(cmd.encode('utf-8'))\n    lines = self.get_output()\n\n    # Error checking\n    if not raises:\n        return lines\n\n    err = error_in_lines(lines)\n    if err:\n        raise RuntimeError(f'Command: {cmd} causes error: {err}')\n\n    return lines\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.cmds","title":"<code>cmds(cmds, suppress_lattice_calc=True, suppress_plotting=True, raises=True)</code>","text":"<p>Runs a list of commands</p> <p>Parameters:</p> Name Type Description Default <code>cmds</code> <p>list of commands</p> required <code>suppress_lattice_calc</code> <p>bool, optional If True, will suppress lattice calc when applying the commands Default: True</p> <code>True</code> <code>suppress_plotting</code> <p>bool, optional If True, will suppress plotting when applying commands Default: True</p> <code>True</code> <code>raises</code> <p>bool, optional If True will raise an exception of [ERROR or [FATAL is detected in the  output Default: True</p> <code>True</code> <p>Returns:</p> Type Description <p>list of results corresponding to the commands</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def cmds(self, cmds, \n         suppress_lattice_calc=True, \n         suppress_plotting=True, \n         raises=True):\n    \"\"\"\n    Runs a list of commands\n\n    Args:\n        cmds: list of commands\n\n        suppress_lattice_calc: bool, optional\n            If True, will suppress lattice calc when applying the commands\n            Default: True\n\n        suppress_plotting: bool, optional\n            If True, will suppress plotting when applying commands\n            Default: True\n\n        raises: bool, optional\n            If True will raise an exception of [ERROR or [FATAL is detected in the \n            output\n            Default: True\n\n    Returns:\n        list of results corresponding to the commands\n\n    \"\"\"\n    # Get globals to detect plotting\n    g = self.tao_global()\n    ploton, laton = g['plot_on'], g['lattice_calc_on']\n\n    if suppress_plotting and ploton:\n        self.cmd('set global plot_on = F')\n    if suppress_lattice_calc and laton:\n        self.cmd('set global lattice_calc_on = F')            \n\n    # Actually apply commands\n    results = []\n    for cmd in cmds:\n        res = self.cmd(cmd, raises=raises)\n        results.append(res)\n\n    if suppress_plotting and ploton:\n        self.cmd('set global plot_on = T')\n    if suppress_lattice_calc and laton:\n        self.cmd('set global lattice_calc_on = T')               \n\n    return results\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.get_output","title":"<code>get_output(reset=True)</code>","text":"<p>Returns a list of output strings. If reset, the internal Tao buffers will be reset.</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def get_output(self, reset=True):\n    \"\"\"\n    Returns a list of output strings.\n    If reset, the internal Tao buffers will be reset.\n    \"\"\"\n    n_lines = self.so_lib.tao_c_out_io_buffer_num_lines()\n    lines = [self.so_lib.tao_c_out_io_buffer_get_line(i).decode('utf-8') for i in range(1, n_lines+1)]\n    if reset:\n        self.so_lib.tao_c_out_io_buffer_reset()\n    return lines\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.register_cell_magic","title":"<code>register_cell_magic()</code>","text":"<p>Registers a cell magic in Jupyter notebooks Invoke by %%tao sho lat</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def register_cell_magic(self):\n  \"\"\"\n  Registers a cell magic in Jupyter notebooks\n  Invoke by\n  %%tao\n  sho lat\n  \"\"\"\n\n  from IPython.core.magic import register_cell_magic\n  @register_cell_magic\n  def tao(line, cell):\n      cell = cell.format(**globals())\n      cmds=cell.split('\\n')\n      output = []\n      for c in cmds:\n          print('-------------------------')\n          print('Tao&gt; '+c)\n          res = self.cmd(c)\n          for l in res:\n               print(l)\n  del tao\n</code></pre>"},{"location":"api/pytao/#pytao.Tao.reset_output","title":"<code>reset_output()</code>","text":"<p>Resets all output buffers</p> Source code in <code>pytao/tao_ctypes/core.py</code> <pre><code>def reset_output(self):\n    \"\"\"\n    Resets all output buffers\n    \"\"\"\n    self.so_lib.tao_c_out_io_buffer_reset()\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.__execute","title":"<code>__execute(tao, cmd, as_dict=True, raises=True, method_name=None, cmd_type='string_list')</code>","text":"<p>A wrapper to handle commonly used options when running a command through tao.</p>"},{"location":"api/pytao/#pytao.interface_commands.__execute--parameters","title":"Parameters","text":"<p>tao : Tao   The handle to tao to run the command on cmd : str   The command to run as_dict : bool, optional   Return string data as a dict? by default True raises : bool, optional   Raise exception on tao errors? by default True method_name : str/None, optional   Name of the caller. Required for custom parsers for commands, by default None cmd_type : str, optional   The type of data returned by tao in its common memory, by default \"string_list\"</p>"},{"location":"api/pytao/#pytao.interface_commands.__execute--returns","title":"Returns","text":"<p>Any   Result from running tao. The type of data depends on configuration, but is generally a list of strings, a dict, or a   numpy array.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def __execute(tao, cmd, as_dict=True, raises=True, method_name=None, cmd_type=\"string_list\"):\n    \"\"\"\n\n    A wrapper to handle commonly used options when running a command through tao.\n\n    Parameters\n    ----------\n    tao : Tao\n      The handle to tao to run the command on\n    cmd : str\n      The command to run\n    as_dict : bool, optional\n      Return string data as a dict? by default True\n    raises : bool, optional\n      Raise exception on tao errors? by default True\n    method_name : str/None, optional\n      Name of the caller. Required for custom parsers for commands, by default None\n    cmd_type : str, optional\n      The type of data returned by tao in its common memory, by default \"string_list\"\n\n    Returns\n    -------\n    Any\n      Result from running tao. The type of data depends on configuration, but is generally a list of strings, a dict, or a\n      numpy array.\n    \"\"\"\n    func_for_type = {\n        \"string_list\": tao.cmd,\n        \"real_array\": tao.cmd_real,\n        \"integer_array\": tao.cmd_integer\n    }\n    func = func_for_type.get(cmd_type, tao.cmd)\n    ret = func(cmd, raises=raises)\n    special_parser = getattr(__parsers, f'parse_{method_name}', \"\")\n    if special_parser:\n        data = special_parser(ret)\n        return data\n    if \"string\" in cmd_type:\n        try:\n            if as_dict:\n                data = parse_tao_python_data(ret)\n            else:\n                data = tao_parameter_dict(ret)\n        except Exception as ex:\n            # TODO: use logger instead of: print('Failed to parse string data. Returning raw value. Exception was: ', ex)\n            return ret\n\n        return data\n\n    return ret\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.beam","title":"<code>beam(tao, ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output beam parameters that are not in the beam_init structure.</p>"},{"location":"api/pytao/#pytao.interface_commands.beam--parameters","title":"Parameters","text":"<p>ix_uni : optional ix_branch : \"\"</p>"},{"location":"api/pytao/#pytao.interface_commands.beam--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.beam--notes","title":"Notes","text":"<p>Command syntax:   python beam {ix_uni}@{ix_branch}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p> <p>Note: To set beam_init parameters use the \"set beam\" command.</p>"},{"location":"api/pytao/#pytao.interface_commands.beam--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def beam(tao, ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output beam parameters that are not in the beam_init structure.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python beam {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Note: To set beam_init parameters use the \"set beam\" command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f'python beam {ix_uni}@{ix_branch}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='beam', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.beam_init","title":"<code>beam_init(tao, ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output beam_init parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.beam_init--parameters","title":"Parameters","text":"<p>ix_uni : optional ix_branch : \"\"</p>"},{"location":"api/pytao/#pytao.interface_commands.beam_init--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.beam_init--notes","title":"Notes","text":"<p>Command syntax:   python beam_init {ix_uni}@{ix_branch}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p> <p>Note: To set beam_init parameters use the \"set beam_init\" command</p>"},{"location":"api/pytao/#pytao.interface_commands.beam_init--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def beam_init(tao, ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output beam_init parameters.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python beam_init {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Note: To set beam_init parameters use the \"set beam_init\" command\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f'python beam_init {ix_uni}@{ix_branch}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='beam_init', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.bmad_com","title":"<code>bmad_com(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output bmad_com structure components.</p>"},{"location":"api/pytao/#pytao.interface_commands.bmad_com--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.bmad_com--notes","title":"Notes","text":"<p>Command syntax:   python bmad_com</p>"},{"location":"api/pytao/#pytao.interface_commands.bmad_com--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bmad_com(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output bmad_com structure components.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python bmad_com\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python bmad_com'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='bmad_com', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.branch1","title":"<code>branch1(tao, ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lattice branch information for a particular lattice branch.</p>"},{"location":"api/pytao/#pytao.interface_commands.branch1--parameters","title":"Parameters","text":"<p>ix_uni : \"\" ix_branch : \"\"</p>"},{"location":"api/pytao/#pytao.interface_commands.branch1--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.branch1--notes","title":"Notes","text":"<p>Command syntax:   python branch1 {ix_uni}@{ix_branch}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p>"},{"location":"api/pytao/#pytao.interface_commands.branch1--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def branch1(tao, ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice branch information for a particular lattice branch.\n\n    Parameters\n    ----------\n    ix_uni : \"\"\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python branch1 {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f'python branch1 {ix_uni}@{ix_branch}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='branch1', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_graph","title":"<code>building_wall_graph(tao, graph, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output (x, y) points for drawing the building wall for a particular graph.</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_graph--parameters","title":"Parameters","text":"<p>graph</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_graph--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_graph--notes","title":"Notes","text":"<p>Command syntax:   python building_wall_graph {graph}</p> Where <p>{graph} is a plot region graph name.</p> <p>Note: The graph defines the coordinate system for the (x, y) points.</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_graph--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall  args:    graph: floor_plan.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_graph(tao, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x, y) points for drawing the building wall for a particular graph.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python building_wall_graph {graph}\n\n    Where:\n      {graph} is a plot region graph name.\n\n    Note: The graph defines the coordinate system for the (x, y) points.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n     args:\n       graph: floor_plan.g\n\n    \"\"\"\n    cmd = f'python building_wall_graph {graph}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='building_wall_graph', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_list","title":"<code>building_wall_list(tao, *, ix_section='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output List of building wall sections or section points</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_list--parameters","title":"Parameters","text":"<p>ix_section : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_list--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_list--notes","title":"Notes","text":"<p>Command syntax:   python building_wall_list {ix_section}</p> Where <p>{ix_section} is a building wall section index.</p> <p>If {ix_section} is not present, a list of building wall sections is given. If {ix_section} is present, a list of section points is given.</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall  args:    ix_section:</p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall args:   ix_section: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_list(tao, *, ix_section='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output List of building wall sections or section points\n\n    Parameters\n    ----------\n    ix_section : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python building_wall_list {ix_section}\n\n    Where:\n      {ix_section} is a building wall section index.\n\n    If {ix_section} is not present, a list of building wall sections is given.\n    If {ix_section} is present, a list of section points is given.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n     args:\n       ix_section:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n     args:\n       ix_section: 1\n\n    \"\"\"\n    cmd = f'python building_wall_list {ix_section}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='building_wall_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_point","title":"<code>building_wall_point(tao, ix_section, ix_point, z, x, radius, z_center, x_center, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>add or delete a building wall point</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_point--parameters","title":"Parameters","text":"<p>ix_section ix_point z x radius z_center x_center</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_point--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_point--notes","title":"Notes","text":"<p>Command syntax:   python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}</p> Where <p>{ix_section}    -- Section index. {ix_point}      -- Point index. Points of higher indexes will be moved up                       if adding a point and down if deleting. {z}, etc...     -- See tao_building_wall_point_struct components.                 -- If {z} is set to \"delete\" then delete the point.</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_point--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall  args:    ix_section: 1    ix_point: 1    z: 0    x: 0    radius: 0    z_center: 0    x_center: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_point(tao, ix_section, ix_point, z, x, radius, z_center, x_center, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    add or delete a building wall point\n\n    Parameters\n    ----------\n    ix_section\n    ix_point\n    z\n    x\n    radius\n    z_center\n    x_center\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}\n\n    Where:\n      {ix_section}    -- Section index.\n      {ix_point}      -- Point index. Points of higher indexes will be moved up \n                           if adding a point and down if deleting.\n      {z}, etc...     -- See tao_building_wall_point_struct components.\n                      -- If {z} is set to \"delete\" then delete the point.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall\n     args:\n       ix_section: 1\n       ix_point: 1\n       z: 0\n       x: 0\n       radius: 0\n       z_center: 0\n       x_center: 0\n\n    \"\"\"\n    cmd = f'python building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='building_wall_point', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_section","title":"<code>building_wall_section(tao, ix_section, sec_name, sec_constraint, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Add or delete a building wall section</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_section--parameters","title":"Parameters","text":"<p>ix_section sec_name sec_constraint</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_section--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_section--notes","title":"Notes","text":"<p>Command syntax:   python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}</p> Where <p>{ix_section}      -- Section index. Sections with higher indexes will be                        moved up if adding a section and down if deleting. {sec_name}        -- Section name. {sec_constraint}  -- A section constraint name or \"delete\". Must be one of:     delete          -- Delete section. Anything else will add the section.     none     left_side     right_side</p>"},{"location":"api/pytao/#pytao.interface_commands.building_wall_section--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_section: 1    sec_name: test    sec_constraint: none</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_section(tao, ix_section, sec_name, sec_constraint, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Add or delete a building wall section\n\n    Parameters\n    ----------\n    ix_section\n    sec_name\n    sec_constraint\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}\n\n    Where:\n      {ix_section}      -- Section index. Sections with higher indexes will be\n                             moved up if adding a section and down if deleting.\n      {sec_name}        -- Section name.\n      {sec_constraint}  -- A section constraint name or \"delete\". Must be one of:\n          delete          -- Delete section. Anything else will add the section.\n          none\n          left_side\n          right_side\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_section: 1\n       sec_name: test\n       sec_constraint: none\n\n    \"\"\"\n    cmd = f'python building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='building_wall_section', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.bunch1","title":"<code>bunch1(tao, ele_id, coordinate, *, which='model', ix_bunch='1', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Outputs Bunch parameters at the exit end of a given lattice element.</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch1--parameters","title":"Parameters","text":"<p>ele_id coordinate which : default=model ix_bunch : default=1</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch1--returns","title":"Returns","text":"<p>real_array     if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c'] integer_array     if coordinate in ['state', 'ix_ele']</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch1--notes","title":"Notes","text":"<p>Command syntax:   python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {ix_bunch} is the bunch index. {coordinate} is one of: x, px, y, py, z, pz, \"s\", \"t\", \"charge\", \"p0c\", \"state\", \"ix_ele\"</p> <p>For example, if {coordinate} = \"px\", the phase space px coordinate of each particle of the bunch is displayed. The \"state\" of a particle is an integer. A value of 1 means alive and any other value means the particle has been lost.</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch1--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init  args:    ele_id: end    coordinate: x    which: model    ix_bunch: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch1(tao, ele_id, coordinate, *, which='model', ix_bunch='1', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Outputs Bunch parameters at the exit end of a given lattice element.\n\n    Parameters\n    ----------\n    ele_id\n    coordinate\n    which : default=model\n    ix_bunch : default=1\n\n    Returns\n    -------\n    real_array\n        if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c']\n    integer_array\n        if coordinate in ['state', 'ix_ele']\n\n    Notes\n    -----\n    Command syntax:\n      python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {ix_bunch} is the bunch index.\n      {coordinate} is one of: x, px, y, py, z, pz, \"s\", \"t\", \"charge\", \"p0c\", \"state\", \"ix_ele\"\n\n    For example, if {coordinate} = \"px\", the phase space px coordinate of each particle\n    of the bunch is displayed. The \"state\" of a particle is an integer. A value of 1 means\n    alive and any other value means the particle has been lost.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n     args:\n       ele_id: end\n       coordinate: x\n       which: model\n       ix_bunch: 1\n\n    \"\"\"\n    cmd = f'python bunch1 {ele_id}|{which} {ix_bunch} {coordinate}'\n    if verbose: print(cmd)\n    if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c']:\n        return __execute(tao, cmd, as_dict, raises, method_name='bunch1', cmd_type='real_array')\n    if coordinate in ['state', 'ix_ele']:\n        return __execute(tao, cmd, as_dict, raises, method_name='bunch1', cmd_type='integer_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.bunch_comb","title":"<code>bunch_comb(tao, who, *, ix_uni='', ix_branch='', ix_bunch='1', flags='-array_out', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Outputs bunch parameters at a comb point.  Also see the \"write bunch_comb\" and \"show bunch -comb\" commands.</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_comb--parameters","title":"Parameters","text":"<p>who ix_uni : optional ix_branch : optional ix_bunch : default=1 flags : default=-array_out</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_comb--returns","title":"Returns","text":"<p>string_list     if '-array_out' not in flags real_array     if '-array_out' in flags</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_comb--notes","title":"Notes","text":"<p>Command syntax:   python bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}</p> Where <p>{flags} are optional switches:     -array_out : If present, the output will be available in the tao_c_interface_com%c_real. {ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a branch index. Defaults to s%global%default_branch. {ix_bunch} is the bunch index. Defaults to 1. {who} is one of:     x, px, y, py, z, pz, t, s, spin.x, spin.y, spin.z, p0c, beta     -- centroid      x.Q, y.Q, z.Q, a.Q, b.Q, c.Q where Q is one of: beta, alpha, gamma, phi, eta, etap,                                                               sigma, sigma_p, emit, norm_emit   sigma.IJ where I, J in range [1,6]   rel_min.I, rel_max.I where I in range [1,6]   charge_live, n_particle_live, n_particle_lost_in_ele, ix_ele</p> <p>Note: If ix_uni or ix_branch is present, \"@\" must be present.</p> Example <p>python bunch_comb py 2@1 1</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_comb--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init  args:    who: x.beta</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch_comb(tao, who, *, ix_uni='', ix_branch='', ix_bunch='1', flags='-array_out', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Outputs bunch parameters at a comb point. \n    Also see the \"write bunch_comb\" and \"show bunch -comb\" commands.\n\n    Parameters\n    ----------\n    who\n    ix_uni : optional\n    ix_branch : optional\n    ix_bunch : default=1\n    flags : default=-array_out\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      python bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}\n\n    Where:\n      {flags} are optional switches:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {ix_bunch} is the bunch index. Defaults to 1.\n      {who} is one of:\n          x, px, y, py, z, pz, t, s, spin.x, spin.y, spin.z, p0c, beta     -- centroid \n          x.Q, y.Q, z.Q, a.Q, b.Q, c.Q where Q is one of: beta, alpha, gamma, phi, eta, etap,\n                                                                    sigma, sigma_p, emit, norm_emit\n        sigma.IJ where I, J in range [1,6]\n        rel_min.I, rel_max.I where I in range [1,6]\n        charge_live, n_particle_live, n_particle_lost_in_ele, ix_ele\n\n      Note: If ix_uni or ix_branch is present, \"@\" must be present.\n\n    Example:\n      python bunch_comb py 2@1 1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n     args:\n       who: x.beta\n\n    \"\"\"\n    cmd = f'python bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}'\n    if verbose: print(cmd)\n    if '-array_out' not in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='bunch_comb', cmd_type='string_list')\n    if '-array_out' in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='bunch_comb', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.bunch_params","title":"<code>bunch_params(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Outputs bunch parameters at the exit end of a given lattice element.</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_params--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_params--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_params--notes","title":"Notes","text":"<p>Command syntax:   python bunch_params {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python bunch_params end|model  ! parameters at model lattice element named \"end\".</p>"},{"location":"api/pytao/#pytao.interface_commands.bunch_params--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init  args:    ele_id: end    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch_params(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Outputs bunch parameters at the exit end of a given lattice element.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python bunch_params {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python bunch_params end|model  ! parameters at model lattice element named \"end\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/csr_beam_tracking/tao.init\n     args:\n       ele_id: end\n       which: model\n\n    \"\"\"\n    cmd = f'python bunch_params {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='bunch_params', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.constraints","title":"<code>constraints(tao, who, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output optimization data and variable parameters that contribute to the merit function.</p>"},{"location":"api/pytao/#pytao.interface_commands.constraints--parameters","title":"Parameters","text":"<p>who</p>"},{"location":"api/pytao/#pytao.interface_commands.constraints--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.constraints--notes","title":"Notes","text":"<p>Command syntax:   python constraints {who}</p> Where <p>{who} is one of: \"data\" or \"var\"</p> Data constraints output is <p>data name constraint type evaluation element name start element name end/reference element name measured value ref value (only relavent if global%opt_with_ref = T) model value base value (only relavent if global%opt_with_base = T) weight merit value location where merit is evaluated (if there is a range)</p> <p>Var constraints output is:   var name   Associated varible attribute   meas value   ref value (only relavent if global%opt_with_ref = T)   model value   base value (only relavent if global%opt_with_base = T)   weight   merit value   dmerit/dvar</p>"},{"location":"api/pytao/#pytao.interface_commands.constraints--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    who: data</p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init args:   who:var</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def constraints(tao, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization data and variable parameters that contribute to the merit function.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python constraints {who}\n\n    Where:\n      {who} is one of: \"data\" or \"var\"\n\n    Data constraints output is:\n      data name\n      constraint type\n      evaluation element name\n      start element name\n      end/reference element name\n      measured value\n      ref value (only relavent if global%opt_with_ref = T)\n      model value\n      base value (only relavent if global%opt_with_base = T)\n      weight\n      merit value\n      location where merit is evaluated (if there is a range)\n    Var constraints output is:\n      var name\n      Associated varible attribute\n      meas value\n      ref value (only relavent if global%opt_with_ref = T)\n      model value\n      base value (only relavent if global%opt_with_base = T)\n      weight\n      merit value\n      dmerit/dvar\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       who: data\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who:var\n\n    \"\"\"\n    cmd = f'python constraints {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='constraints', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.da_aperture","title":"<code>da_aperture(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output dynamic aperture data</p>"},{"location":"api/pytao/#pytao.interface_commands.da_aperture--parameters","title":"Parameters","text":"<p>ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.da_aperture--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.da_aperture--notes","title":"Notes","text":"<p>Command syntax:   python da_aperture {ix_uni}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def da_aperture(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output dynamic aperture data\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python da_aperture {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    \"\"\"\n    cmd = f'python da_aperture {ix_uni}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='da_aperture', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.da_params","title":"<code>da_params(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output dynamic aperture input parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.da_params--parameters","title":"Parameters","text":"<p>ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.da_params--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.da_params--notes","title":"Notes","text":"<p>Command syntax:   python da_params {ix_uni}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def da_params(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output dynamic aperture input parameters\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python da_params {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    \"\"\"\n    cmd = f'python da_params {ix_uni}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='da_params', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data","title":"<code>data(tao, d2_name, d1_name, *, ix_uni='', dat_index='1', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output Individual datum parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.data--parameters","title":"Parameters","text":"<p>d2_name d1_name ix_uni : optional dat_index : default=1</p>"},{"location":"api/pytao/#pytao.interface_commands.data--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.data--notes","title":"Notes","text":"<p>Command syntax:   python data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {d2_name} is the name of the d2_data structure the datum is in. {d1_datum} is the name of the d1_data structure the datum is in. {dat_index} is the index of the datum.</p> <p>Use the \"python data-d1\" command to get detailed info on a specific d1 array.</p> Example <p>python data 1@orbit.x[10]</p>"},{"location":"api/pytao/#pytao.interface_commands.data--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    ix_uni:    d2_name: twiss    d1_name: end     dat_index: 1  </p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching args:   ix_uni: 1   d2_name: twiss   d1_name: end   dat_index: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data(tao, d2_name, d1_name, *, ix_uni='', dat_index='1', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Individual datum parameters.\n\n    Parameters\n    ----------\n    d2_name\n    d1_name\n    ix_uni : optional\n    dat_index : default=1\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure the datum is in.\n      {d1_datum} is the name of the d1_data structure the datum is in.\n      {dat_index} is the index of the datum.\n\n    Use the \"python data-d1\" command to get detailed info on a specific d1 array.\n\n    Example:\n      python data 1@orbit.x[10]\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni:\n       d2_name: twiss\n       d1_name: end \n       dat_index: 1  \n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: twiss\n       d1_name: end\n       dat_index: 1\n\n    \"\"\"\n    cmd = f'python data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d1_array","title":"<code>data_d1_array(tao, d2_datum, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of d1 arrays for a given data_d2.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d1_array--parameters","title":"Parameters","text":"<p>d2_datum ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d1_array--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d1_array--notes","title":"Notes","text":"<p>Command syntax:   python data_d1_array {d2_datum}</p> <p>{d2_datum} should be of the form   {ix_uni}@{d2_datum_name}</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d1_array--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    ix_uni: 1     d2_datum: twiss</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d1_array(tao, d2_datum, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of d1 arrays for a given data_d2.\n\n    Parameters\n    ----------\n    d2_datum\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python data_d1_array {d2_datum}\n\n    {d2_datum} should be of the form\n      {ix_uni}@{d2_datum_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni: 1 \n       d2_datum: twiss\n\n    \"\"\"\n    cmd = f'python data_d1_array {d2_datum}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d1_array', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d2","title":"<code>data_d2(tao, d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output information on a d2_datum.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2--parameters","title":"Parameters","text":"<p>d2_name ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2--notes","title":"Notes","text":"<p>Command syntax:   python data_d2 {ix_uni}@{d2_name}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {d2_name} is the name of the d2_data structure.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: twiss</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2(tao, d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output information on a d2_datum.\n\n    Parameters\n    ----------\n    d2_name\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python data_d2 {ix_uni}@{d2_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: twiss\n\n    \"\"\"\n    cmd = f'python data_d2 {ix_uni}@{d2_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d2', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_array","title":"<code>data_d2_array(tao, ix_uni, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output data d2 info for a given universe.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_array--parameters","title":"Parameters","text":"<p>ix_uni</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_array--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_array--notes","title":"Notes","text":"<p>Command syntax:   python data_d2_array {ix_uni}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe.</p> Example <p>python data_d2_array 1</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_array--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni : 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_array(tao, ix_uni, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output data d2 info for a given universe.\n\n    Parameters\n    ----------\n    ix_uni\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python data_d2_array {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    Example:\n      python data_d2_array 1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni : 1 \n\n    \"\"\"\n    cmd = f'python data_d2_array {ix_uni}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d2_array', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_create","title":"<code>data_d2_create(tao, d2_name, n_d1_data, d_data_arrays_name_min_max, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Create a d2 data structure along with associated d1 and data arrays.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_create--parameters","title":"Parameters","text":"<p>d2_name n_d1_data d_data_arrays_name_min_max ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_create--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_create--notes","title":"Notes","text":"<p>Command syntax:   python data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {d2_name} is the name of the d2_data structure to create. {n_d1_data} is the number of associated d1 data structures. {d_data_arrays_name_min_max} has the form   {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN} where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.</p> Example <p>python data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47</p> <p>This example creates a d2 data structure called \"orbit\" with  two d1 structures called \"x\" and \"y\".</p> <p>The \"x\" d1 structure has an associated data array with indexes in the range [0, 45]. The \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].</p> <p>Use the \"set data\" command to set created datum parameters.</p> When setting multiple data parameters, <p>temporarily toggle s%global%lattice_calc_on to False</p> <p>(\"set global lattice_calc_on = F\") to prevent Tao trying to        evaluate the partially created datum and generating unwanted error messages.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_create--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: orbit    n_d1_data: 2     d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_create(tao, d2_name, n_d1_data, d_data_arrays_name_min_max, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Create a d2 data structure along with associated d1 and data arrays.\n\n    Parameters\n    ----------\n    d2_name\n    n_d1_data\n    d_data_arrays_name_min_max\n    ix_uni : optional\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure to create.\n      {n_d1_data} is the number of associated d1 data structures.\n      {d_data_arrays_name_min_max} has the form\n        {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}\n      where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.\n\n    Example:\n      python data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47\n    This example creates a d2 data structure called \"orbit\" with \n    two d1 structures called \"x\" and \"y\".\n\n    The \"x\" d1 structure has an associated data array with indexes in the range [0, 45].\n    The \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].\n\n    Use the \"set data\" command to set created datum parameters.\n\n    Note: When setting multiple data parameters, \n          temporarily toggle s%global%lattice_calc_on to False\n      (\"set global lattice_calc_on = F\") to prevent Tao trying to \n          evaluate the partially created datum and generating unwanted error messages.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: orbit\n       n_d1_data: 2 \n       d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47\n\n    \"\"\"\n    cmd = f'python data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d2_create', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_destroy","title":"<code>data_d2_destroy(tao, d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Destroy a d2 data structure along with associated d1 and data arrays.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_destroy--parameters","title":"Parameters","text":"<p>d2_name ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_destroy--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_destroy--notes","title":"Notes","text":"<p>Command syntax:   python data_d2_destroy {ix_uni}@{d2_name}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {d2_name} is the name of the d2_data structure to destroy.</p> Example <p>python data_d2_destroy 2@orbit</p> <p>This destroys the orbit d2_data structure in universe 2.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d2_destroy--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    d2_name: orbit</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_destroy(tao, d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Destroy a d2 data structure along with associated d1 and data arrays.\n\n    Parameters\n    ----------\n    d2_name\n    ix_uni : optional\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python data_d2_destroy {ix_uni}@{d2_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure to destroy.\n\n    Example:\n      python data_d2_destroy 2@orbit\n    This destroys the orbit d2_data structure in universe 2.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       d2_name: orbit\n\n    \"\"\"\n    cmd = f'python data_d2_destroy {ix_uni}@{d2_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d2_destroy', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_d_array","title":"<code>data_d_array(tao, d2_name, d1_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of datums for a given d1_data structure.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d_array--parameters","title":"Parameters","text":"<p>d2_name d1_name ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d_array--returns","title":"Returns","text":"<p>datums: list of dicts     Each dict has keys:     'ix_d1', 'data_type', 'merit_type',      'ele_ref_name', 'ele_start_name', 'ele_name',      'meas_value', 'model_value', 'design_value',      'useit_opt', 'useit_plot', 'good_user',      'weight', 'exists'</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d_array--notes","title":"Notes","text":"<p>Command syntax:   python data_d_array {ix_uni}@{d2_name}.{d1_name}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {d2_name} is the name of the containing d2_data structure. {d1_name} is the name of the d1_data structure containing the array of datums.</p> Example <p>python data_d_array 1@orbit.x</p>"},{"location":"api/pytao/#pytao.interface_commands.data_d_array--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    ix_uni: 1     d2_name: twiss    d1_name: end</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d_array(tao, d2_name, d1_name, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of datums for a given d1_data structure.\n\n    Parameters\n    ----------\n    d2_name\n    d1_name\n    ix_uni : optional\n\n    Returns\n    -------\n    datums: list of dicts\n        Each dict has keys:\n        'ix_d1', 'data_type', 'merit_type', \n        'ele_ref_name', 'ele_start_name', 'ele_name', \n        'meas_value', 'model_value', 'design_value', \n        'useit_opt', 'useit_plot', 'good_user', \n        'weight', 'exists'\n\n    Notes\n    -----\n    Command syntax:\n      python data_d_array {ix_uni}@{d2_name}.{d1_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the containing d2_data structure.\n      {d1_name} is the name of the d1_data structure containing the array of datums.\n\n    Example:\n      python data_d_array 1@orbit.x\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       ix_uni: 1 \n       d2_name: twiss\n       d1_name: end\n\n    \"\"\"\n    cmd = f'python data_d_array {ix_uni}@{d2_name}.{d1_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_d_array', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_parameter","title":"<code>data_parameter(tao, data_array, parameter, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output an array of values for a particular datum parameter for a given array of datums, </p>"},{"location":"api/pytao/#pytao.interface_commands.data_parameter--parameters","title":"Parameters","text":"<p>data_array parameter</p>"},{"location":"api/pytao/#pytao.interface_commands.data_parameter--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.data_parameter--notes","title":"Notes","text":"<p>Command syntax:   python data_parameter {data_array} {parameter}</p> <p>{parameter} may be any tao_data_struct parameter. Example:   python data_parameter orbit.x model_value</p>"},{"location":"api/pytao/#pytao.interface_commands.data_parameter--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    data_array: twiss.end     parameter: model_value</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_parameter(tao, data_array, parameter, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output an array of values for a particular datum parameter for a given array of datums, \n\n    Parameters\n    ----------\n    data_array\n    parameter\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python data_parameter {data_array} {parameter}\n\n    {parameter} may be any tao_data_struct parameter.\n    Example:\n      python data_parameter orbit.x model_value\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       data_array: twiss.end \n       parameter: model_value\n\n    \"\"\"\n    cmd = f'python data_parameter {data_array} {parameter}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_parameter', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.data_set_design_value","title":"<code>data_set_design_value(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Set the design (and base &amp; model) values for all datums.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_set_design_value--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.data_set_design_value--notes","title":"Notes","text":"<p>Command syntax:   python data_set_design_value</p> Example <p>python data_set_design_value</p> <p>Note: Use the \"data_d2_create\" and \"datum_create\" first to create datums.</p>"},{"location":"api/pytao/#pytao.interface_commands.data_set_design_value--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_set_design_value(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Set the design (and base &amp; model) values for all datums.\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python data_set_design_value\n\n    Example:\n      python data_set_design_value\n\n    Note: Use the \"data_d2_create\" and \"datum_create\" first to create datums.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n\n    \"\"\"\n    cmd = f'python data_set_design_value'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='data_set_design_value', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.datum_create","title":"<code>datum_create(tao, datum_name, data_type, *, ele_ref_name='', ele_start_name='', ele_name='', merit_type='', meas='0', good_meas='F', ref='0', good_ref='F', weight='0', good_user='T', data_source='lat', eval_point='END', s_offset='0', ix_bunch='0', invalid_value='0', spin_axis_n0_1='', spin_axis_n0_2='', spin_axis_n0_3='', spin_axis_l_1='', spin_axis_l_2='', spin_axis_l_3='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Create a datum.</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_create--parameters","title":"Parameters","text":"<p>datum_name          ! EG: orb.x[3] data_type           ! EG: orbit.x ele_ref_name : optional ele_start_name : optional ele_name : optional merit_type : optional meas : default=0 good_meas : default=F ref : default=0 good_ref : default=F weight : default=0 good_user : default=T data_source : default=lat eval_point : default=END s_offset : default=0 ix_bunch : default=0 invalid_value : default=0 spin_axis%n0(1) : optional spin_axis%n0(2) : optional spin_axis%n0(3) : optional spin_axis%l(1) : optional spin_axis%l(2) : optional spin_axis%l(3) : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_create--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_create--notes","title":"Notes","text":"<p>Command syntax:   python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^                       {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^                       {good_ref}^^{weight}^^{good_user}^^{data_source}^^                       {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^                       {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^                       {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}</p> The 3 values for spin_axis%n0, as a group, are optional. <p>Also the 3 values for spin_axis%l are, as a group, optional.</p> <p>Note: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays. Note: After creating all your datums, use the \"data_set_design_value\" routine to        set the design (and model) values.</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_create--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    datum_name: twiss.end[6]    data_type: beta.y    ele_ref_name:    ele_start_name:    ele_name: P1    merit_type: target    meas: 0    good_meas: T    ref: 0    good_ref: T    weight: 0.3    good_user: T    data_source: lat    eval_point: END    s_offset: 0    ix_bunch: 1    invalid_value: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def datum_create(tao, datum_name, data_type, *, ele_ref_name='', ele_start_name='', ele_name='', merit_type='', meas='0', good_meas='F', ref='0', good_ref='F', weight='0', good_user='T', data_source='lat', eval_point='END', s_offset='0', ix_bunch='0', invalid_value='0', spin_axis_n0_1='', spin_axis_n0_2='', spin_axis_n0_3='', spin_axis_l_1='', spin_axis_l_2='', spin_axis_l_3='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Create a datum.\n\n    Parameters\n    ----------\n    datum_name          ! EG: orb.x[3]\n    data_type           ! EG: orbit.x\n    ele_ref_name : optional\n    ele_start_name : optional\n    ele_name : optional\n    merit_type : optional\n    meas : default=0\n    good_meas : default=F\n    ref : default=0\n    good_ref : default=F\n    weight : default=0\n    good_user : default=T\n    data_source : default=lat\n    eval_point : default=END\n    s_offset : default=0\n    ix_bunch : default=0\n    invalid_value : default=0\n    spin_axis%n0(1) : optional\n    spin_axis%n0(2) : optional\n    spin_axis%n0(3) : optional\n    spin_axis%l(1) : optional\n    spin_axis%l(2) : optional\n    spin_axis%l(3) : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^\n                          {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^\n                          {good_ref}^^{weight}^^{good_user}^^{data_source}^^\n                          {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^\n                          {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^\n                          {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}\n\n    Note: The 3 values for spin_axis%n0, as a group, are optional. \n          Also the 3 values for spin_axis%l are, as a group, optional.\n    Note: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays.\n    Note: After creating all your datums, use the \"data_set_design_value\" routine to \n          set the design (and model) values.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       datum_name: twiss.end[6]\n       data_type: beta.y\n       ele_ref_name:\n       ele_start_name:\n       ele_name: P1\n       merit_type: target\n       meas: 0\n       good_meas: T\n       ref: 0\n       good_ref: T\n       weight: 0.3\n       good_user: T\n       data_source: lat\n       eval_point: END\n       s_offset: 0\n       ix_bunch: 1\n       invalid_value: 0\n\n    \"\"\"\n    cmd = f'python datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^{ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^{good_ref}^^{weight}^^{good_user}^^{data_source}^^{eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^{spin_axis_n0_1}^^{spin_axis_n0_2}^^{spin_axis_n0_3}^^{spin_axis_l_1}^^{spin_axis_l_2}^^{spin_axis_l_3}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='datum_create', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.datum_has_ele","title":"<code>datum_has_ele(tao, datum_type, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output whether a datum type has an associated lattice element</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_has_ele--parameters","title":"Parameters","text":"<p>datum_type</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_has_ele--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_has_ele--notes","title":"Notes","text":"<p>Command syntax:   python datum_has_ele {datum_type}</p>"},{"location":"api/pytao/#pytao.interface_commands.datum_has_ele--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    datum_type: twiss.end</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def datum_has_ele(tao, datum_type, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output whether a datum type has an associated lattice element\n\n    Parameters\n    ----------\n    datum_type\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python datum_has_ele {datum_type}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       datum_type: twiss.end \n\n    \"\"\"\n    cmd = f'python datum_has_ele {datum_type}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='datum_has_ele', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.derivative","title":"<code>derivative(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output optimization derivatives</p>"},{"location":"api/pytao/#pytao.interface_commands.derivative--returns","title":"Returns","text":"<p>out : dict     Dictionary with keys corresponding to universe indexes (int),     with dModel_dVar as the value:         np.ndarray with shape (n_data, n_var)    </p>"},{"location":"api/pytao/#pytao.interface_commands.derivative--notes","title":"Notes","text":"<p>Command syntax:   python derivative</p> <p>Note: To save time, this command will not recalculate derivatives.  Use the \"derivative\" command beforehand to recalcuate if needed.</p>"},{"location":"api/pytao/#pytao.interface_commands.derivative--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def derivative(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization derivatives\n\n    Returns\n    -------\n    out : dict\n        Dictionary with keys corresponding to universe indexes (int),\n        with dModel_dVar as the value:\n            np.ndarray with shape (n_data, n_var)    \n\n    Notes\n    -----\n    Command syntax:\n      python derivative\n\n    Note: To save time, this command will not recalculate derivatives. \n    Use the \"derivative\" command beforehand to recalcuate if needed.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n\n    \"\"\"\n    cmd = f'python derivative'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='derivative', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_ac_kicker","title":"<code>ele_ac_kicker(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element ac_kicker parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_ac_kicker--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_ac_kicker--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_ac_kicker--notes","title":"Notes","text":"<p>Command syntax:   python ele:ac_kicker {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:ac_kicker 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_ac_kicker--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_ac_kicker(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element ac_kicker parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:ac_kicker {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:ac_kicker 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:ac_kicker {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_ac_kicker', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_cartesian_map","title":"<code>ele_cartesian_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element cartesian_map parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cartesian_map--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cartesian_map--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cartesian_map--notes","title":"Notes","text":"<p>Command syntax:   python ele:cartesian_map {ele_id}|{which} {index} {who}</p> Where <p>{ele_id} is an element name or index {which} is one of: \"model\", \"base\" or \"design\" {index} is the index number in the ele%cartesian_map(:) array {who} is one of: \"base\", or \"terms\"</p> Example <p>python ele:cartesian_map 3@1&gt;&gt;7|model 2 base</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cartesian_map--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_cartesian_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element cartesian_map parameters\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:cartesian_map {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%cartesian_map(:) array\n      {who} is one of: \"base\", or \"terms\"\n\n    Example:\n      python ele:cartesian_map 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: base\n\n    \"\"\"\n    cmd = f'python ele:cartesian_map {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_cartesian_map', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_chamber_wall","title":"<code>ele_chamber_wall(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element beam chamber wall parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_chamber_wall--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_chamber_wall--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_chamber_wall--notes","title":"Notes","text":"<p>Command syntax:   python ele:chamber_wall {ele_id}|{which} {index} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {index} is index of the wall. {who} is one of:   \"x\"       ! Return min/max in horizontal plane   \"y\"       ! Return min/max in vertical plane</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_chamber_wall--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: x</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_chamber_wall(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element beam chamber wall parameters\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:chamber_wall {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is index of the wall.\n      {who} is one of:\n        \"x\"       ! Return min/max in horizontal plane\n        \"y\"       ! Return min/max in vertical plane\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: x\n\n    \"\"\"\n    cmd = f'python ele:chamber_wall {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_chamber_wall', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_control_var","title":"<code>ele_control_var(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of element control variables. Used for group, overlay and ramper type elements.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_control_var--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_control_var--returns","title":"Returns","text":"<p>dict of attributes and values</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_control_var--notes","title":"Notes","text":"<p>Command syntax:   python ele:control_var {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:control_var 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_control_var--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;873   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_control_var(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of element control variables.\n    Used for group, overlay and ramper type elements.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    dict of attributes and values\n\n    Notes\n    -----\n    Command syntax:\n      python ele:control_var {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:control_var 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;873\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:control_var {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_control_var', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_cylindrical_map","title":"<code>ele_cylindrical_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element cylindrical_map</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cylindrical_map--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cylindrical_map--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cylindrical_map--notes","title":"Notes","text":"<p>Command syntax:   python ele:cylindrical_map {ele_id}|{which} {index} {who}</p> <p>Where    {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%cylindrical_map(:) array   {who} is one of: \"base\", or \"terms\"</p> Example <p>python ele:cylindrical_map 3@1&gt;&gt;7|model 2 base</p> <p>This gives map #2 of element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_cylindrical_map--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;5   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_cylindrical_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element cylindrical_map\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:cylindrical_map {ele_id}|{which} {index} {who}\n\n    Where \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%cylindrical_map(:) array\n      {who} is one of: \"base\", or \"terms\"\n\n    Example:\n      python ele:cylindrical_map 3@1&gt;&gt;7|model 2 base\n    This gives map #2 of element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;5\n      which: model\n      index: 1\n      who: base\n\n    \"\"\"\n    cmd = f'python ele:cylindrical_map {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_cylindrical_map', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_elec_multipoles","title":"<code>ele_elec_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element electric multipoles</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_elec_multipoles--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_elec_multipoles--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_elec_multipoles--notes","title":"Notes","text":"<p>Command syntax:   python ele:elec_multipoles {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:elec_multipoles 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_elec_multipoles--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_elec_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element electric multipoles\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:elec_multipoles {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:elec_multipoles 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:elec_multipoles {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_elec_multipoles', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_floor","title":"<code>ele_floor(tao, ele_id, *, which='model', where='end', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element floor coordinates. The output gives four lines. \"Reference\" is without element misalignments and \"Actual\" is with misalignments. The lines with \"-W\" give the W matrix. The exception is that if ele is a multipass_lord, there will be 4*N lines where N is the number of slaves.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_floor--parameters","title":"Parameters","text":"<p>ele_id which : default=model where : default=end</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_floor--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_floor--notes","title":"Notes","text":"<p>Command syntax:   python ele:floor {ele_id}|{which} {where}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {where} is an optional argument which, if present, is one of   beginning  ! Upstream end   center     ! Middle of element   end        ! Downstream end (default)</p> <p>Note: {where} ignored for photonic elements crystal, mirror, and multilayer_mirror.</p> Example <p>python ele:floor 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_floor--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model   where: </p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init args:  ele_id: 1@0&gt;&gt;1  which: model  where: center</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_floor(tao, ele_id, *, which='model', where='end', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element floor coordinates. The output gives four lines. \"Reference\" is\n    without element misalignments and \"Actual\" is with misalignments. The lines with \"-W\"\n    give the W matrix. The exception is that if ele is a multipass_lord, there will be 4*N\n    lines where N is the number of slaves.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n    where : default=end\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:floor {ele_id}|{which} {where}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {where} is an optional argument which, if present, is one of\n        beginning  ! Upstream end\n        center     ! Middle of element\n        end        ! Downstream end (default)\n    Note: {where} ignored for photonic elements crystal, mirror, and multilayer_mirror.\n\n    Example:\n      python ele:floor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      where: \n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      where: center\n\n    \"\"\"\n    cmd = f'python ele:floor {ele_id}|{which} {where}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_floor', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_attribs","title":"<code>ele_gen_attribs(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element general attributes</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_attribs--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_attribs--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_attribs--notes","title":"Notes","text":"<p>Command syntax:   python ele:gen_attribs {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:gen_attribs 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_attribs--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_gen_attribs(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element general attributes\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:gen_attribs {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:gen_attribs 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:gen_attribs {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_gen_attribs', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_grad_map","title":"<code>ele_gen_grad_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element gen_grad_map </p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_grad_map--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_grad_map--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_grad_map--notes","title":"Notes","text":"<p>Command syntax:   python ele:gen_grad_map {ele_id}|{which} {index} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {index} is the index number in the ele%gen_grad_map(:) array {who} is one of: \"base\", or \"derivs\".</p> Example <p>python ele:gen_grad_map 3@1&gt;&gt;7|model 2 base</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_gen_grad_map--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;9   which: model   index: 1   who: derivs</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_gen_grad_map(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element gen_grad_map \n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:gen_grad_map {ele_id}|{which} {index} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%gen_grad_map(:) array\n      {who} is one of: \"base\", or \"derivs\".\n\n    Example:\n      python ele:gen_grad_map 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;9\n      which: model\n      index: 1\n      who: derivs\n\n    \"\"\"\n    cmd = f'python ele:gen_grad_map {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_gen_grad_map', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_grid_field","title":"<code>ele_grid_field(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element grid_field</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_grid_field--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_grid_field--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_grid_field--notes","title":"Notes","text":"<p>Command syntax:   python ele:grid_field {ele_id}|{which} {index} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {index} is the index number in the ele%grid_field(:) array. {who} is one of: \"base\", or \"points\"</p> Example <p>python ele:grid_field 3@1&gt;&gt;7|model 2 base</p> <p>This gives grid #2 of element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_grid_field--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_grid  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_grid_field(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element grid_field\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:grid_field {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%grid_field(:) array.\n      {who} is one of: \"base\", or \"points\"\n\n    Example:\n      python ele:grid_field 3@1&gt;&gt;7|model 2 base\n    This gives grid #2 of element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_grid\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: base \n\n    \"\"\"\n    cmd = f'python ele:grid_field {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_grid_field', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_head","title":"<code>ele_head(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output \"head\" Element attributes</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_head--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_head--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_head--notes","title":"Notes","text":"<p>Command syntax:   python ele:head {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:head 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_head--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_head(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output \"head\" Element attributes\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:head {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:head 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:head {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_head', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_lord_slave","title":"<code>ele_lord_slave(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output the lord/slave tree of an element.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_lord_slave--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_lord_slave--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_lord_slave--notes","title":"Notes","text":"<p>Command syntax:   python ele:lord_slave {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:lord_slave 3@1&gt;&gt;7|model</p> <p>This gives lord and slave info on element number 7 in branch 1 of universe 3. Note: The lord/slave info is independent of the setting of {which}.</p> <p>The output is a number of lines, each line giving information on an element (element index, etc.). Some lines begin with the word \"Element\".  After each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\". These \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_lord_slave--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_lord_slave(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the lord/slave tree of an element.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:lord_slave {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:lord_slave 3@1&gt;&gt;7|model\n    This gives lord and slave info on element number 7 in branch 1 of universe 3.\n    Note: The lord/slave info is independent of the setting of {which}.\n\n    The output is a number of lines, each line giving information on an element (element index, etc.).\n    Some lines begin with the word \"Element\". \n    After each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\".\n    These \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:lord_slave {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_lord_slave', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_mat6","title":"<code>ele_mat6(tao, ele_id, *, which='model', who='mat6', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element mat6</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_mat6--parameters","title":"Parameters","text":"<p>ele_id which : default=model who : default=mat6</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_mat6--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_mat6--notes","title":"Notes","text":"<p>Command syntax:   python ele:mat6 {ele_id}|{which} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {who} is one of: \"mat6\", \"vec0\", or \"err\"</p> Example <p>python ele:mat6 3@1&gt;&gt;7|model mat6</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_mat6--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model   who: mat6</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_mat6(tao, ele_id, *, which='model', who='mat6', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element mat6\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n    who : default=mat6\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:mat6 {ele_id}|{which} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} is one of: \"mat6\", \"vec0\", or \"err\"\n\n    Example:\n      python ele:mat6 3@1&gt;&gt;7|model mat6\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: mat6\n\n    \"\"\"\n    cmd = f'python ele:mat6 {ele_id}|{which} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_mat6', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_methods","title":"<code>ele_methods(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element methods</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_methods--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_methods--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_methods--notes","title":"Notes","text":"<p>Command syntax:   python ele:methods {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:methods 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_methods--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_methods(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element methods\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:methods {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:methods 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:methods {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_methods', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_multipoles","title":"<code>ele_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element multipoles</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_multipoles--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_multipoles--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_multipoles--notes","title":"Notes","text":"<p>Command syntax:   python ele:multipoles {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:multipoles 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_multipoles--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_multipoles(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element multipoles\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:multipoles {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:multipoles 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:multipoles {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_multipoles', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_orbit","title":"<code>ele_orbit(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element orbit</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_orbit--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_orbit--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_orbit--notes","title":"Notes","text":"<p>Command syntax:   python ele:orbit {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:orbit 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_orbit--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_orbit(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element orbit\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:orbit {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:orbit 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:orbit {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_orbit', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_param","title":"<code>ele_param(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lattice element parameter</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_param--parameters","title":"Parameters","text":"<p>ele_id who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_param--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_param--notes","title":"Notes","text":"<p>Command syntax:   python ele:param {ele_id}|{which} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {who} values are the same as {who} values for \"python lat_list\".       Note: Here {who} must be a single parameter and not a list.</p> Example <p>python ele:param 3@1&gt;&gt;7|model e_tot</p> <p>This gives E_tot of element number 7 in branch 1 of universe 3.</p> <p>Note: On output the {variable} component will always be \"F\" (since this  command cannot tell if a parameter is allowed to vary).</p> <p>Also see: \"python lat_list\".</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_param--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon  args:   ele_id: 1@0&gt;&gt;1   which: model   who: orbit.vec.1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_param(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice element parameter\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:param {ele_id}|{which} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} values are the same as {who} values for \"python lat_list\".\n            Note: Here {who} must be a single parameter and not a list.\n\n    Example:\n      python ele:param 3@1&gt;&gt;7|model e_tot\n    This gives E_tot of element number 7 in branch 1 of universe 3.\n\n    Note: On output the {variable} component will always be \"F\" (since this \n    command cannot tell if a parameter is allowed to vary).\n\n    Also see: \"python lat_list\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: orbit.vec.1\n\n    \"\"\"\n    cmd = f'python ele:param {ele_id}|{which} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_param', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_photon","title":"<code>ele_photon(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element photon parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_photon--parameters","title":"Parameters","text":"<p>ele_id who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_photon--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_photon--notes","title":"Notes","text":"<p>Command syntax:   python ele:photon {ele_id}|{which} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {who} is one of: \"base\", \"material\", or \"curvature\"</p> Example <p>python ele:photon 3@1&gt;&gt;7|model base</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_photon--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon  args:   ele_id: 1@0&gt;&gt;1   which: model   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_photon(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element photon parameters\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:photon {ele_id}|{which} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} is one of: \"base\", \"material\", or \"curvature\"\n\n    Example:\n      python ele:photon 3@1&gt;&gt;7|model base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_photon\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: base\n\n    \"\"\"\n    cmd = f'python ele:photon {ele_id}|{which} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_photon', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_spin_taylor","title":"<code>ele_spin_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element spin_taylor parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_spin_taylor--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_spin_taylor--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_spin_taylor--notes","title":"Notes","text":"<p>Command syntax:   python ele:spin_taylor {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:spin_taylor 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_spin_taylor--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_spin  args:   ele_id: 1@0&gt;&gt;2   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_spin_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element spin_taylor parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:spin_taylor {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:spin_taylor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_spin\n     args:\n      ele_id: 1@0&gt;&gt;2\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:spin_taylor {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_spin_taylor', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_taylor","title":"<code>ele_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element taylor map </p>"},{"location":"api/pytao/#pytao.interface_commands.ele_taylor--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_taylor--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_taylor--notes","title":"Notes","text":"<p>Command syntax:   python ele:taylor {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:taylor 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_taylor--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_taylor  args:   ele_id: 1@0&gt;&gt;34   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_taylor(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element taylor map \n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:taylor {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:taylor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_taylor\n     args:\n      ele_id: 1@0&gt;&gt;34\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:taylor {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_taylor', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_twiss","title":"<code>ele_twiss(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element Twiss parameters</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_twiss--parameters","title":"Parameters","text":"<p>ele_id which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_twiss--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_twiss--notes","title":"Notes","text":"<p>Command syntax:   python ele:twiss {ele_id}|{which}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\"</p> Example <p>python ele:twiss 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_twiss--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_twiss(tao, ele_id, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element Twiss parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:twiss {ele_id}|{which}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      python ele:twiss 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f'python ele:twiss {ele_id}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_twiss', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_wake","title":"<code>ele_wake(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element wake.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wake--parameters","title":"Parameters","text":"<p>ele_id who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wake--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wake--notes","title":"Notes","text":"<p>Command syntax:   python ele:wake {ele_id}|{which} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {Who} is one of:     \"sr_long\"        \"sr_long_table\"     \"sr_trans\"       \"sr_trans_table\"     \"lr_mode_table\"  \"base\"</p> Example <p>python ele:wake 3@1&gt;&gt;7|model</p> <p>This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wake--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wake  args:   ele_id: 1@0&gt;&gt;1   which: model   who: sr_long</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_wake(tao, ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element wake.\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:wake {ele_id}|{which} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {Who} is one of:\n          \"sr_long\"        \"sr_long_table\"\n          \"sr_trans\"       \"sr_trans_table\"\n          \"lr_mode_table\"  \"base\"\n\n    Example:\n      python ele:wake 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wake\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: sr_long\n\n    \"\"\"\n    cmd = f'python ele:wake {ele_id}|{which} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_wake', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ele_wall3d","title":"<code>ele_wall3d(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output element wall3d parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wall3d--parameters","title":"Parameters","text":"<p>ele_id index who which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wall3d--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wall3d--notes","title":"Notes","text":"<p>Command syntax:   python ele:wall3d {ele_id}|{which} {index} {who}</p> Where <p>{ele_id} is an element name or index. {which} is one of: \"model\", \"base\" or \"design\" {index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\"). {who} is one of: \"base\", or \"table\".</p> <p>Example:   python ele:wall3d 3@1&gt;&gt;7|model 2 base This gives element number 7 in branch 1 of universe 3.</p>"},{"location":"api/pytao/#pytao.interface_commands.ele_wall3d--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: table</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_wall3d(tao, ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element wall3d parameters.\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ele:wall3d {ele_id}|{which} {index} {who}\n\n    Where: \n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\").\n      {who} is one of: \"base\", or \"table\".\n    Example:\n      python ele:wall3d 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_wall3d\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: table\n\n    \"\"\"\n    cmd = f'python ele:wall3d {ele_id}|{which} {index} {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ele_wall3d', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.em_field","title":"<code>em_field(tao, ele_id, x, y, z, t_or_z, *, which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output EM field at a given point generated by a given element.</p>"},{"location":"api/pytao/#pytao.interface_commands.em_field--parameters","title":"Parameters","text":"<p>ele_id x y z t_or_z which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.em_field--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.em_field--notes","title":"Notes","text":"<p>Command syntax:   python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}</p> Where <p>{which} is one of: \"model\", \"base\" or \"design\" {x}, {y}  -- Transverse coords. {z}       -- Longitudinal coord with respect to entrance end of element. {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.</p>"},{"location":"api/pytao/#pytao.interface_commands.em_field--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ele_id: 1@0&gt;&gt;22    which: model    x: 0    y: 0    z: 0    t_or_z: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def em_field(tao, ele_id, x, y, z, t_or_z, *, which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output EM field at a given point generated by a given element.\n\n    Parameters\n    ----------\n    ele_id\n    x\n    y\n    z\n    t_or_z\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}\n\n    Where:\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {x}, {y}  -- Transverse coords.\n      {z}       -- Longitudinal coord with respect to entrance end of element.\n      {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ele_id: 1@0&gt;&gt;22\n       which: model\n       x: 0\n       y: 0\n       z: 0\n       t_or_z: 0\n\n    \"\"\"\n    cmd = f'python em_field {ele_id}|{which} {x} {y} {z} {t_or_z}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='em_field', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.enum","title":"<code>enum(tao, enum_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of possible values for enumerated numbers.</p>"},{"location":"api/pytao/#pytao.interface_commands.enum--parameters","title":"Parameters","text":"<p>enum_name</p>"},{"location":"api/pytao/#pytao.interface_commands.enum--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.enum--notes","title":"Notes","text":"<p>Command syntax:   python enum {enum_name}</p> Example <p>python enum tracking_method</p>"},{"location":"api/pytao/#pytao.interface_commands.enum--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    enum_name: tracking_method</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def enum(tao, enum_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of possible values for enumerated numbers.\n\n    Parameters\n    ----------\n    enum_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python enum {enum_name}\n\n    Example:\n      python enum tracking_method\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       enum_name: tracking_method\n\n    \"\"\"\n    cmd = f'python enum {enum_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='enum', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.evaluate","title":"<code>evaluate(tao, expression, *, flags='-array_out', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output the value of an expression. The result may be a vector.</p>"},{"location":"api/pytao/#pytao.interface_commands.evaluate--parameters","title":"Parameters","text":"<p>expression flags : default=-array_out     If -array_out, the output will be available in the tao_c_interface_com%c_real.</p>"},{"location":"api/pytao/#pytao.interface_commands.evaluate--returns","title":"Returns","text":"<p>string_list     if '-array_out' not in flags real_array     if '-array_out' in flags</p>"},{"location":"api/pytao/#pytao.interface_commands.evaluate--notes","title":"Notes","text":"<p>Command syntax:   python evaluate {flags} {expression}</p> Where <p>Optional {flags} are:     -array_out : If present, the output will be available in the tao_c_interface_com%c_real. {expression} is expression to be evaluated.</p> Example <p>python evaluate 3+data::cbar.11[1:10]|model</p>"},{"location":"api/pytao/#pytao.interface_commands.evaluate--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    expression: data::cbar.11[1:10]|model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def evaluate(tao, expression, *, flags='-array_out', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the value of an expression. The result may be a vector.\n\n    Parameters\n    ----------\n    expression\n    flags : default=-array_out\n        If -array_out, the output will be available in the tao_c_interface_com%c_real.\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      python evaluate {flags} {expression}\n\n    Where:\n      Optional {flags} are:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {expression} is expression to be evaluated.\n\n    Example:\n      python evaluate 3+data::cbar.11[1:10]|model\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       expression: data::cbar.11[1:10]|model\n\n    \"\"\"\n    cmd = f'python evaluate {flags} {expression}'\n    if verbose: print(cmd)\n    if '-array_out' not in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='evaluate', cmd_type='string_list')\n    if '-array_out' in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='evaluate', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.floor_orbit","title":"<code>floor_orbit(tao, graph, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output (x, y) coordinates for drawing the particle orbit on a floor plan.</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_orbit--parameters","title":"Parameters","text":"<p>graph</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_orbit--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_orbit--notes","title":"Notes","text":"<p>Command syntax:   python floor_orbit {graph}</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_orbit--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_floor_orbit  args:    graph: r33.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def floor_orbit(tao, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x, y) coordinates for drawing the particle orbit on a floor plan.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python floor_orbit {graph}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_floor_orbit\n     args:\n       graph: r33.g \n\n    \"\"\"\n    cmd = f'python floor_orbit {graph}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='floor_orbit', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.floor_plan","title":"<code>floor_plan(tao, graph, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output (x,y) points and other information that can be used for drawing a floor_plan.</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_plan--parameters","title":"Parameters","text":"<p>graph</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_plan--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_plan--notes","title":"Notes","text":"<p>Command syntax:   python floor_plan {graph}</p>"},{"location":"api/pytao/#pytao.interface_commands.floor_plan--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    graph: r13.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def floor_plan(tao, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x,y) points and other information that can be used for drawing a floor_plan.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python floor_plan {graph}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       graph: r13.g\n\n    \"\"\"\n    cmd = f'python floor_plan {graph}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='floor_plan', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.global_opti_de","title":"<code>global_opti_de(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output DE optimization parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.global_opti_de--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.global_opti_de--notes","title":"Notes","text":"<p>Command syntax:   python global:opti_de</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p>"},{"location":"api/pytao/#pytao.interface_commands.global_opti_de--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def global_opti_de(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output DE optimization parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python global:opti_de\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python global:opti_de'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='global_opti_de', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.global_optimization","title":"<code>global_optimization(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output optimization parameters. Also see global:opti_de.</p>"},{"location":"api/pytao/#pytao.interface_commands.global_optimization--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.global_optimization--notes","title":"Notes","text":"<p>Command syntax:   python global:optimization</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p>"},{"location":"api/pytao/#pytao.interface_commands.global_optimization--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def global_optimization(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization parameters.\n    Also see global:opti_de.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python global:optimization\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python global:optimization'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='global_optimization', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.help","title":"<code>help(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of \"help xxx\" topics</p>"},{"location":"api/pytao/#pytao.interface_commands.help--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.help--notes","title":"Notes","text":"<p>Command syntax:   python help</p>"},{"location":"api/pytao/#pytao.interface_commands.help--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def help(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of \"help xxx\" topics\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python help\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python help'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='help', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.inum","title":"<code>inum(tao, who, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of possible values for an INUM parameter. For example, possible index numbers for the branches of a lattice.</p>"},{"location":"api/pytao/#pytao.interface_commands.inum--parameters","title":"Parameters","text":"<p>who</p>"},{"location":"api/pytao/#pytao.interface_commands.inum--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.inum--notes","title":"Notes","text":"<p>Command syntax:   python inum {who}</p>"},{"location":"api/pytao/#pytao.interface_commands.inum--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    who: ix_universe</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def inum(tao, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of possible values for an INUM parameter.\n    For example, possible index numbers for the branches of a lattice.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python inum {who}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who: ix_universe\n\n    \"\"\"\n    cmd = f'python inum {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='inum', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.lat_branch_list","title":"<code>lat_branch_list(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lattice branch list</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_branch_list--parameters","title":"Parameters","text":"<p>ix_uni : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_branch_list--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_branch_list--notes","title":"Notes","text":"<p>Command syntax:   python lat_branch_list {ix_uni}</p> Output syntax <p>branch_index;branch_name;n_ele_track;n_ele_max</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_branch_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_branch_list(tao, *, ix_uni='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice branch list\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python lat_branch_list {ix_uni}\n\n    Output syntax:\n      branch_index;branch_name;n_ele_track;n_ele_max\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1\n\n    \"\"\"\n    cmd = f'python lat_branch_list {ix_uni}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='lat_branch_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.lat_calc_done","title":"<code>lat_calc_done(tao, branch_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output if a lattice recalculation has been proformed since the last    time \"python lat_calc_done\" was called.</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_calc_done--parameters","title":"Parameters","text":"<p>branch_name</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_calc_done--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_calc_done--notes","title":"Notes","text":"<p>Command syntax:   python lat_calc_done</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_calc_done--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    branch_name: 1@0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_calc_done(tao, branch_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output if a lattice recalculation has been proformed since the last \n      time \"python lat_calc_done\" was called.\n\n    Parameters\n    ----------\n    branch_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python lat_calc_done\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       branch_name: 1@0\n\n    \"\"\"\n    cmd = f'python lat_calc_done'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='lat_calc_done', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.lat_ele_list","title":"<code>lat_ele_list(tao, *, branch_name='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lattice element list.</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_ele_list--parameters","title":"Parameters","text":"<p>branch_name : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_ele_list--returns","title":"Returns","text":"<p>list of str of element names</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_ele_list--notes","title":"Notes","text":"<p>Command syntax:   python lat_ele_list {branch_name}</p> <p>{branch_name} should have the form:   {ix_uni}@{ix_branch}</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_ele_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    branch_name: 1@0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_ele_list(tao, *, branch_name='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice element list.\n\n    Parameters\n    ----------\n    branch_name : optional\n\n    Returns\n    -------\n    list of str of element names\n\n    Notes\n    -----\n    Command syntax:\n      python lat_ele_list {branch_name}\n\n    {branch_name} should have the form:\n      {ix_uni}@{ix_branch}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       branch_name: 1@0\n\n    \"\"\"\n    cmd = f'python lat_ele_list {branch_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='lat_ele_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.lat_list","title":"<code>lat_list(tao, elements, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out -track_only', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of parameters at ends of lattice elements</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_list--parameters","title":"Parameters","text":"<p>elements who ix_uni : optional ix_branch : optional which : default=model flags : optional, default=-array_out -track_only</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_list--returns","title":"Returns","text":"<p>string_list     if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key']) integer_array     if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele'] real_array     if ('-array_out' in flags) or ('real:' in who) </p>"},{"location":"api/pytao/#pytao.interface_commands.lat_list--notes","title":"Notes","text":"<p>Command syntax:   python lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}</p> Where <p>Optional {flags} are:  -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.  -track_only : If present, lord elements will not be matched to.  -index_order : If present, order elements by element index instead of the standard s-position.  -array_out : If present, the output will be available in the tao_c_interface_com%c_real or    tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.    Note: Only a single {who} item permitted when -array_out is present.</p> <p>{which} is one of: \"model\", \"base\" or \"design\"</p> <p>{who} is a comma deliminated list of:    orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.    orbit.spin.1, orbit.spin.2, orbit.spin.3,    orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,    orbit.t, orbit.beta,    orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.    orbit.energy, orbit.pc,    ele.name, ele.key, ele.ix_ele, ele.ix_branch    ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,    ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,    ele.x.eta, ele.x.etap,    ele.y.eta, ele.y.etap,    ele.ref_time, ele.ref_time_start    ele.s, ele.l    ele.e_tot, ele.p0c    ele.mat6      ! Output: mat6(1,:), mat6(2,:), ... mat6(6,:)    ele.vec0      ! Output: vec0(1), ... vec0(6)    ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)    ele.c_mat     ! Output: c_mat11, c_mat12, c_mat21, c_mat22.    ele.gamma_c   ! Parameter associated with coupling c-matrix.</p> <p>{elements} is a string to match element names to.    Use \"*\" to match to all elements.</p> <p>Examples:</p> <p>python lat_list -track 3@0&gt;&gt;Q|base ele.s,orbit.vec.2 python lat_list 3@0&gt;&gt;Q|base real:ele.s    </p> <p>Also see: \"python ele:param\"</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0     elements: Q*     which: model    who: orbit.floor.x</p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init args:   ix_uni: 1   ix_branch: 0    elements: Q*    which: design   who: ele.ix_ele</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_list(tao, elements, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out -track_only', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of parameters at ends of lattice elements\n\n    Parameters\n    ----------\n    elements\n    who\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    flags : optional, default=-array_out -track_only\n\n    Returns\n    -------\n    string_list\n        if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key'])\n    integer_array\n        if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']\n    real_array\n        if ('-array_out' in flags) or ('real:' in who) \n\n    Notes\n    -----\n    Command syntax:\n      python lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}\n\n    Where:\n     Optional {flags} are:\n      -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.\n      -track_only : If present, lord elements will not be matched to.\n      -index_order : If present, order elements by element index instead of the standard s-position.\n      -array_out : If present, the output will be available in the tao_c_interface_com%c_real or\n        tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.\n        Note: Only a single {who} item permitted when -array_out is present.\n\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n      {who} is a comma deliminated list of:\n        orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.\n        orbit.spin.1, orbit.spin.2, orbit.spin.3,\n        orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,\n        orbit.t, orbit.beta,\n        orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.\n        orbit.energy, orbit.pc,\n        ele.name, ele.key, ele.ix_ele, ele.ix_branch\n        ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,\n        ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,\n        ele.x.eta, ele.x.etap,\n        ele.y.eta, ele.y.etap,\n        ele.ref_time, ele.ref_time_start\n        ele.s, ele.l\n        ele.e_tot, ele.p0c\n        ele.mat6      ! Output: mat6(1,:), mat6(2,:), ... mat6(6,:)\n        ele.vec0      ! Output: vec0(1), ... vec0(6)\n        ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)\n        ele.c_mat     ! Output: c_mat11, c_mat12, c_mat21, c_mat22.\n        ele.gamma_c   ! Parameter associated with coupling c-matrix.\n\n      {elements} is a string to match element names to.\n        Use \"*\" to match to all elements.\n\n    Examples:\n      python lat_list -track 3@0&gt;&gt;Q*|base ele.s,orbit.vec.2\n      python lat_list 3@0&gt;&gt;Q*|base real:ele.s    \n\n    Also see: \"python ele:param\"\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1  \n       ix_branch: 0 \n       elements: Q* \n       which: model\n       who: orbit.floor.x\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1  \n       ix_branch: 0 \n       elements: Q* \n       which: design\n       who: ele.ix_ele\n\n    \"\"\"\n    cmd = f'python lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}'\n    if verbose: print(cmd)\n    if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key']):\n        return __execute(tao, cmd, as_dict, raises, method_name='lat_list', cmd_type='string_list')\n    if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']:\n        return __execute(tao, cmd, as_dict, raises, method_name='lat_list', cmd_type='integer_array')\n    if ('-array_out' in flags) or ('real:' in who) :\n        return __execute(tao, cmd, as_dict, raises, method_name='lat_list', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.lat_param_units","title":"<code>lat_param_units(tao, param_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output units of a parameter associated with a lattice or lattice element.</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_param_units--parameters","title":"Parameters","text":"<p>param_name</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_param_units--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_param_units--notes","title":"Notes","text":"<p>Command syntax:   python lat_param_units {param_name}</p>"},{"location":"api/pytao/#pytao.interface_commands.lat_param_units--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    param_name: L</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_param_units(tao, param_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output units of a parameter associated with a lattice or lattice element.\n\n    Parameters\n    ----------\n    param_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python lat_param_units {param_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       param_name: L   \n\n    \"\"\"\n    cmd = f'python lat_param_units {param_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='lat_param_units', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.matrix","title":"<code>matrix(tao, ele1_id, ele2_id, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output matrix value from the exit end of one element to the exit end of the other.</p>"},{"location":"api/pytao/#pytao.interface_commands.matrix--parameters","title":"Parameters","text":"<p>ele1_id ele2_id</p>"},{"location":"api/pytao/#pytao.interface_commands.matrix--returns","title":"Returns","text":"<p>dict with keys:     'mat6' : np.array of shape (6,6)     'vec6' : np.array of shape(6)</p>"},{"location":"api/pytao/#pytao.interface_commands.matrix--notes","title":"Notes","text":"<p>Command syntax:   python matrix {ele1_id} {ele2_id}</p> Where <p>{ele1_id} is the start element. {ele2_id} is the end element.</p> <p>If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed. Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.</p> Example <p>python matrix 2@1&gt;&gt;q01w|design q02w</p>"},{"location":"api/pytao/#pytao.interface_commands.matrix--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ele1_id: 1@0&gt;&gt;q01w|design    ele2_id: q02w</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def matrix(tao, ele1_id, ele2_id, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output matrix value from the exit end of one element to the exit end of the other.\n\n    Parameters\n    ----------\n    ele1_id\n    ele2_id\n\n    Returns\n    -------\n    dict with keys:\n        'mat6' : np.array of shape (6,6)\n        'vec6' : np.array of shape(6)\n\n    Notes\n    -----\n    Command syntax:\n      python matrix {ele1_id} {ele2_id}\n\n    Where:\n      {ele1_id} is the start element.\n      {ele2_id} is the end element.\n    If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\n    Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n\n    Example:\n      python matrix 2@1&gt;&gt;q01w|design q02w\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ele1_id: 1@0&gt;&gt;q01w|design\n       ele2_id: q02w\n\n    \"\"\"\n    cmd = f'python matrix {ele1_id} {ele2_id}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='matrix', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.merit","title":"<code>merit(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output merit value.</p>"},{"location":"api/pytao/#pytao.interface_commands.merit--returns","title":"Returns","text":"<p>merit: float     Value of the merit function</p>"},{"location":"api/pytao/#pytao.interface_commands.merit--notes","title":"Notes","text":"<p>Command syntax:   python merit</p>"},{"location":"api/pytao/#pytao.interface_commands.merit--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def merit(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output merit value.\n\n    Returns\n    -------\n    merit: float\n        Value of the merit function\n\n    Notes\n    -----\n    Command syntax:\n      python merit\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python merit'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='merit', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.orbit_at_s","title":"<code>orbit_at_s(tao, *, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output twiss at given s position.</p>"},{"location":"api/pytao/#pytao.interface_commands.orbit_at_s--parameters","title":"Parameters","text":"<p>ix_uni : optional ele : optional s_offset : optional which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.orbit_at_s--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.orbit_at_s--notes","title":"Notes","text":"<p>Command syntax:   python orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ele} is an element name or index. Default at the Beginning element at start of branch 0. {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.    If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will {which} is one of: \"model\", \"base\" or \"design\".</p> Example <p>python orbit_at_s Q10-&gt;0.4|model   ! Orbit at 0.4 meters from Q10 element exit end in model lattice.</p>"},{"location":"api/pytao/#pytao.interface_commands.orbit_at_s--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni: 1    ele: 10    s_offset: 0.7    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def orbit_at_s(tao, *, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output twiss at given s position.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ele : optional\n    s_offset : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n      {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n         If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will\n      {which} is one of: \"model\", \"base\" or \"design\".\n\n    Example:\n      python orbit_at_s Q10-&gt;0.4|model   ! Orbit at 0.4 meters from Q10 element exit end in model lattice.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ele: 10\n       s_offset: 0.7\n       which: model\n\n    \"\"\"\n    cmd = f'python orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='orbit_at_s', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.place_buffer","title":"<code>place_buffer(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output the place command buffer and reset the buffer. The contents of the buffer are the place commands that the user has issued. See the Tao manual for more details.</p>"},{"location":"api/pytao/#pytao.interface_commands.place_buffer--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.place_buffer--notes","title":"Notes","text":"<p>Command syntax:   python place_buffer</p>"},{"location":"api/pytao/#pytao.interface_commands.place_buffer--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def place_buffer(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the place command buffer and reset the buffer.\n    The contents of the buffer are the place commands that the user has issued.\n    See the Tao manual for more details.\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python place_buffer\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python place_buffer'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='place_buffer', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot1","title":"<code>plot1(tao, name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output info on a given plot.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot1--parameters","title":"Parameters","text":"<p>name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot1--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.plot1--notes","title":"Notes","text":"<p>Command syntax:   python plot1 {name}</p> <p>{name} should be the region name if the plot is associated with a region. Output syntax is parameter list form. See documentation at the beginning of this file.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot1--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    name: beta</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot1(tao, name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output info on a given plot.\n\n    Parameters\n    ----------\n    name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python plot1 {name}\n\n    {name} should be the region name if the plot is associated with a region.\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       name: beta\n\n    \"\"\"\n    cmd = f'python plot1 {name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot1', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve","title":"<code>plot_curve(tao, curve_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output curve information for a plot.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve--parameters","title":"Parameters","text":"<p>curve_name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve--notes","title":"Notes","text":"<p>Command syntax:   python plot_curve {curve_name}</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    curve_name: r13.g.a</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_curve(tao, curve_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output curve information for a plot.\n\n    Parameters\n    ----------\n    curve_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python plot_curve {curve_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       curve_name: r13.g.a\n\n    \"\"\"\n    cmd = f'python plot_curve {curve_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_curve', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve_manage","title":"<code>plot_curve_manage(tao, graph_name, curve_index, curve_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Template plot curve creation/destruction</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve_manage--parameters","title":"Parameters","text":"<p>graph_name curve_index curve_name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve_manage--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve_manage--notes","title":"Notes","text":"<p>Command syntax:   python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}</p> <p>If {curve_index} corresponds to an existing curve then this curve is deleted. In this case the {curve_name} is ignored and does not have to be present. If {curve_index} does not not correspond to an existing curve, {curve_index} must be one greater than the number of curves.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_curve_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    graph_name: beta.g    curve_index: 1    curve_name: r13.g.a</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_curve_manage(tao, graph_name, curve_index, curve_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Template plot curve creation/destruction\n\n    Parameters\n    ----------\n    graph_name\n    curve_index\n    curve_name\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}\n\n    If {curve_index} corresponds to an existing curve then this curve is deleted.\n    In this case the {curve_name} is ignored and does not have to be present.\n    If {curve_index} does not not correspond to an existing curve, {curve_index}\n    must be one greater than the number of curves.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       graph_name: beta.g\n       curve_index: 1\n       curve_name: r13.g.a\n\n    \"\"\"\n    cmd = f'python plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_curve_manage', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph","title":"<code>plot_graph(tao, graph_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output graph info.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph--parameters","title":"Parameters","text":"<p>graph_name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph--notes","title":"Notes","text":"<p>Command syntax:   python plot_graph {graph_name}</p> <p>{graph_name} is in the form:   {p_name}.{g_name} where   {p_name} is the plot region name if from a region or the plot name if a template plot.   This name is obtained from the python plot_list command.   {g_name} is the graph name obtained from the python plot1 command.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    graph_name: beta.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_graph(tao, graph_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output graph info.\n\n    Parameters\n    ----------\n    graph_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python plot_graph {graph_name}\n\n    {graph_name} is in the form:\n      {p_name}.{g_name}\n    where\n      {p_name} is the plot region name if from a region or the plot name if a template plot.\n      This name is obtained from the python plot_list command.\n      {g_name} is the graph name obtained from the python plot1 command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       graph_name: beta.g\n\n    \"\"\"\n    cmd = f'python plot_graph {graph_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_graph', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph_manage","title":"<code>plot_graph_manage(tao, plot_name, graph_index, graph_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Template plot graph creation/destruction</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph_manage--parameters","title":"Parameters","text":"<p>plot_name graph_index graph_name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph_manage--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph_manage--notes","title":"Notes","text":"<p>Command syntax:   python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}</p> <p>If {graph_index} corresponds to an existing graph then this graph is deleted. In this case the {graph_name} is ignored and does not have to be present. If {graph_index} does not not correspond to an existing graph, {graph_index} must be one greater than the number of graphs.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_graph_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    plot_name: beta    graph_index: 1    graph_name: beta.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_graph_manage(tao, plot_name, graph_index, graph_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Template plot graph creation/destruction\n\n    Parameters\n    ----------\n    plot_name\n    graph_index\n    graph_name\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}\n\n    If {graph_index} corresponds to an existing graph then this graph is deleted.\n    In this case the {graph_name} is ignored and does not have to be present.\n    If {graph_index} does not not correspond to an existing graph, {graph_index}\n    must be one greater than the number of graphs.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       plot_name: beta\n       graph_index: 1\n       graph_name: beta.g\n\n    \"\"\"\n    cmd = f'python plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_graph_manage', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_histogram","title":"<code>plot_histogram(tao, curve_name, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output plot histogram info.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_histogram--parameters","title":"Parameters","text":"<p>curve_name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_histogram--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_histogram--notes","title":"Notes","text":"<p>Command syntax:   python plot_histogram {curve_name}</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_histogram--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    curve_name: r33.g.x</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_histogram(tao, curve_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output plot histogram info.\n\n    Parameters\n    ----------\n    curve_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python plot_histogram {curve_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       curve_name: r33.g.x\n\n    \"\"\"\n    cmd = f'python plot_histogram {curve_name}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_histogram', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_lat_layout","title":"<code>plot_lat_layout(tao, ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output plot Lat_layout info</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_lat_layout--parameters","title":"Parameters","text":"<p>ix_uni: 1 ix_branch: 0</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_lat_layout--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_lat_layout--notes","title":"Notes","text":"<p>Command syntax:   python plot_lat_layout {ix_uni}@{ix_branch}</p> The returned list of element positions is not ordered in increasing <p>longitudinal position.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_lat_layout--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_lat_layout(tao, ix_uni: 1, ix_branch: 0, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output plot Lat_layout info\n\n    Parameters\n    ----------\n    ix_uni: 1\n    ix_branch: 0\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python plot_lat_layout {ix_uni}@{ix_branch}\n\n    Note: The returned list of element positions is not ordered in increasing\n          longitudinal position.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0 \n\n    \"\"\"\n    cmd = f'python plot_lat_layout {ix_uni}@{ix_branch}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_lat_layout', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_line","title":"<code>plot_line(tao, region_name, graph_name, curve_name, *, x_or_y='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output points used to construct the \"line\" associated with a plot curve.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_line--parameters","title":"Parameters","text":"<p>region_name graph_name curve_name x_or_y : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_line--returns","title":"Returns","text":"<p>string_list     if x_or_y == '' real_array     if x_or_y != ''</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_line--notes","title":"Notes","text":"<p>Command syntax:   python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}</p> <p>Optional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y  component put into the real array buffer. Note: The plot must come from a region, and not a template, since no template plots        have associated line data. Examples:   python plot_line r13.g.a   ! String array output.   python plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.   python plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_line--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting  args:    region_name: beta    graph_name: g    curve_name: a    x_or_y:</p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting args:   region_name: beta   graph_name: g   curve_name: a   x_or_y: y</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_line(tao, region_name, graph_name, curve_name, *, x_or_y='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output points used to construct the \"line\" associated with a plot curve.\n\n    Parameters\n    ----------\n    region_name\n    graph_name\n    curve_name\n    x_or_y : optional\n\n    Returns\n    -------\n    string_list\n        if x_or_y == ''\n    real_array\n        if x_or_y != ''\n\n    Notes\n    -----\n    Command syntax:\n      python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}\n\n    Optional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y \n    component put into the real array buffer.\n    Note: The plot must come from a region, and not a template, since no template plots \n          have associated line data.\n    Examples:\n      python plot_line r13.g.a   ! String array output.\n      python plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.\n      python plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: beta\n       graph_name: g\n       curve_name: a\n       x_or_y:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: beta\n       graph_name: g\n       curve_name: a\n       x_or_y: y\n\n    \"\"\"\n    cmd = f'python plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}'\n    if verbose: print(cmd)\n    if x_or_y == '':\n        return __execute(tao, cmd, as_dict, raises, method_name='plot_line', cmd_type='string_list')\n    if x_or_y != '':\n        return __execute(tao, cmd, as_dict, raises, method_name='plot_line', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_list","title":"<code>plot_list(tao, r_or_g, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of plot templates or plot regions.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_list--parameters","title":"Parameters","text":"<p>r_or_g</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_list--returns","title":"Returns","text":"<p>if r_or_g == 't'     dict with template_name:index if r_or_g == 'r'     list of dicts with keys:         region         ix         plot_name         visible         x1, x2, y1, y1</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_list--notes","title":"Notes","text":"<p>Command syntax:   python plot_list {r_or_g}</p> <p>where \"{r/g}\" is:   \"r\"      ! list regions of the form ix;region_name;plot_name;visible;x1;x2;y1;y2   \"t\"      ! list template plots of the form ix;name</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    r_or_g: r</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_list(tao, r_or_g, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of plot templates or plot regions.\n\n    Parameters\n    ----------\n    r_or_g\n\n    Returns\n    -------\n    if r_or_g == 't'\n        dict with template_name:index\n    if r_or_g == 'r'\n        list of dicts with keys:\n            region\n            ix\n            plot_name\n            visible\n            x1, x2, y1, y1\n\n    Notes\n    -----\n    Command syntax:\n      python plot_list {r_or_g}\n\n    where \"{r/g}\" is:\n      \"r\"      ! list regions of the form ix;region_name;plot_name;visible;x1;x2;y1;y2\n      \"t\"      ! list template plots of the form ix;name\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       r_or_g: r\n\n    \"\"\"\n    cmd = f'python plot_list {r_or_g}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_symbol","title":"<code>plot_symbol(tao, region_name, graph_name, curve_name, x_or_y, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output locations to draw symbols for a plot curve.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_symbol--parameters","title":"Parameters","text":"<p>region_name graph_name curve_name x_or_y</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_symbol--returns","title":"Returns","text":"<p>string_list     if x_or_y == '' real_array     if x_or_y != ''</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_symbol--notes","title":"Notes","text":"<p>Command syntax:   python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}</p> <p>Optional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y  positions put into the real array buffer. Note: The plot must come from a region, and not a template,        since no template plots have associated symbol data. Examples:   python plot_symbol r13.g.a       ! String array output.   python plot_symbol r13.g.a x     ! x-component of the symbol positions                                       loaded into the real array buffer.   python plot_symbol r13.g.a y     ! y-component of the symbol positions                                       loaded into the real array buffer.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_symbol--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting  args:    region_name: r13    graph_name: g    curve_name: a    x_or_y: </p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting args:   region_name: r13   graph_name: g   curve_name: a   x_or_y: y</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_symbol(tao, region_name, graph_name, curve_name, x_or_y, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output locations to draw symbols for a plot curve.\n\n    Parameters\n    ----------\n    region_name\n    graph_name\n    curve_name\n    x_or_y\n\n    Returns\n    -------\n    string_list\n        if x_or_y == ''\n    real_array\n        if x_or_y != ''\n\n    Notes\n    -----\n    Command syntax:\n      python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}\n\n    Optional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y \n    positions put into the real array buffer.\n    Note: The plot must come from a region, and not a template, \n          since no template plots have associated symbol data.\n    Examples:\n      python plot_symbol r13.g.a       ! String array output.\n      python plot_symbol r13.g.a x     ! x-component of the symbol positions \n                                         loaded into the real array buffer.\n      python plot_symbol r13.g.a y     ! y-component of the symbol positions \n                                         loaded into the real array buffer.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: r13\n       graph_name: g\n       curve_name: a\n       x_or_y: \n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: r13\n       graph_name: g\n       curve_name: a\n       x_or_y: y\n\n    \"\"\"\n    cmd = f'python plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}'\n    if verbose: print(cmd)\n    if x_or_y == '':\n        return __execute(tao, cmd, as_dict, raises, method_name='plot_symbol', cmd_type='string_list')\n    if x_or_y != '':\n        return __execute(tao, cmd, as_dict, raises, method_name='plot_symbol', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_template_manage","title":"<code>plot_template_manage(tao, template_location, template_name, *, n_graph='-1', graph_names='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Template plot creation or destruction.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_template_manage--parameters","title":"Parameters","text":"<p>template_location template_name n_graph : default=-1 graph_names : default=</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_template_manage--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_template_manage--notes","title":"Notes","text":"<p>Command syntax:   python plot_template_manage {template_location}^^{template_name}^^                          {n_graph}^^{graph_names}</p> Where <p>{template_location} is the location to place or delete a template plot. Use \"@Tnnn\" syntax for the location. {template_name} is the name of the template plot. If deleting a plot this name is immaterial. {n_graph} is the number of associated graphs. If set to -1 then any existing template plot is deleted. {graph_names} are the names of the graphs.  graph_names should be in the form:    graph1_name^^graph2_name^^...^^graphN_name for N=n_graph names</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_template_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    template_location: @T1    template_name: beta    n_graph: 2    graph_names: g1^^g2</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_template_manage(tao, template_location, template_name, *, n_graph='-1', graph_names='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Template plot creation or destruction.\n\n    Parameters\n    ----------\n    template_location\n    template_name\n    n_graph : default=-1\n    graph_names : default=\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python plot_template_manage {template_location}^^{template_name}^^\n                             {n_graph}^^{graph_names}\n\n    Where:\n      {template_location} is the location to place or delete a template plot. Use \"@Tnnn\" syntax for the location.\n      {template_name} is the name of the template plot. If deleting a plot this name is immaterial.\n      {n_graph} is the number of associated graphs. If set to -1 then any existing template plot is deleted.\n      {graph_names} are the names of the graphs.  graph_names should be in the form:\n         graph1_name^^graph2_name^^...^^graphN_name\n      for N=n_graph names\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       template_location: @T1\n       template_name: beta\n       n_graph: 2\n       graph_names: g1^^g2\n\n    \"\"\"\n    cmd = f'python plot_template_manage {template_location}^^{template_name}^^{n_graph}^^{graph_names}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_template_manage', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.plot_transfer","title":"<code>plot_transfer(tao, from_plot, to_plot, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_transfer--parameters","title":"Parameters","text":"<p>from_plot to_plot</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_transfer--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_transfer--notes","title":"Notes","text":"<p>Command syntax:   python plot_transfer {from_plot} {to_plot}</p> <p>To avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}. If {to_plot} is not present and {from_plot} is a template plot, the \"to plots\"   are the equivalent region plots with the same name. And vice versa   if {from_plot} is a region plot.</p>"},{"location":"api/pytao/#pytao.interface_commands.plot_transfer--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    from_plot: r13    to_plot: r23</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_transfer(tao, from_plot, to_plot, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).\n\n    Parameters\n    ----------\n    from_plot\n    to_plot\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python plot_transfer {from_plot} {to_plot}\n\n    To avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}.\n    If {to_plot} is not present and {from_plot} is a template plot, the \"to plots\" \n     are the equivalent region plots with the same name. And vice versa \n     if {from_plot} is a region plot.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       from_plot: r13\n       to_plot: r23 \n\n    \"\"\"\n    cmd = f'python plot_transfer {from_plot} {to_plot}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='plot_transfer', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ptc_com","title":"<code>ptc_com(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output Ptc_com structure components.</p>"},{"location":"api/pytao/#pytao.interface_commands.ptc_com--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ptc_com--notes","title":"Notes","text":"<p>Command syntax:   python ptc_com</p>"},{"location":"api/pytao/#pytao.interface_commands.ptc_com--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init   args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ptc_com(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Ptc_com structure components.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ptc_com\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init \n     args:\n\n    \"\"\"\n    cmd = f'python ptc_com'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ptc_com', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.ring_general","title":"<code>ring_general(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lattice branch with closed geometry info (emittances, etc.)</p>"},{"location":"api/pytao/#pytao.interface_commands.ring_general--parameters","title":"Parameters","text":"<p>ix_uni : optional ix_branch : optional which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.ring_general--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.ring_general--notes","title":"Notes","text":"<p>Command syntax:   python ring_general {ix_uni}@{ix_branch}|{which}</p> <p>where {which} is one of:   model   base   design Example:   python ring_general 1@0|model</p>"},{"location":"api/pytao/#pytao.interface_commands.ring_general--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     ix_uni: 1     ix_branch: 0     which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ring_general(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice branch with closed geometry info (emittances, etc.)\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python ring_general {ix_uni}@{ix_branch}|{which}\n\n    where {which} is one of:\n      model\n      base\n      design\n    Example:\n      python ring_general 1@0|model\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n        ix_uni: 1\n        ix_branch: 0\n        which: model\n\n    \"\"\"\n    cmd = f'python ring_general {ix_uni}@{ix_branch}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='ring_general', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_list","title":"<code>shape_list(tao, who, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output lat_layout or floor_plan shapes list</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_list--parameters","title":"Parameters","text":"<p>who</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_list--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_list--notes","title":"Notes","text":"<p>Command syntax:   python shape_list {who}</p> <p>{who} is one of:   lat_layout   floor_plan</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    who: floor_plan</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_list(tao, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lat_layout or floor_plan shapes list\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python shape_list {who}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who: floor_plan  \n\n    \"\"\"\n    cmd = f'python shape_list {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_manage","title":"<code>shape_manage(tao, who, index, add_or_delete, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Element shape creation or destruction</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_manage--parameters","title":"Parameters","text":"<p>who index add_or_delete</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_manage--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_manage--notes","title":"Notes","text":"<p>Command syntax:   python shape_manage {who} {index} {add_or_delete}</p> <p>{who} is one of:   lat_layout   floor_plan {add_or_delete} is one of:   add     -- Add a shape at {index}.               Shapes with higher index get moved up one to make room.   delete  -- Delete shape at {index}.               Shapes with higher index get moved down one to fill the gap.</p> Example <p>python shape_manage floor_plan 2 add</p> <p>Note: After adding a shape use \"python shape_set\" to set shape parameters. This is important since an added shape is in a ill-defined state.</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    who: floor_plan    index: 1    add_or_delete: add</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_manage(tao, who, index, add_or_delete, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Element shape creation or destruction\n\n    Parameters\n    ----------\n    who\n    index\n    add_or_delete\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python shape_manage {who} {index} {add_or_delete}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n    {add_or_delete} is one of:\n      add     -- Add a shape at {index}. \n                 Shapes with higher index get moved up one to make room.\n      delete  -- Delete shape at {index}. \n                 Shapes with higher index get moved down one to fill the gap.\n\n    Example:\n      python shape_manage floor_plan 2 add\n    Note: After adding a shape use \"python shape_set\" to set shape parameters.\n    This is important since an added shape is in a ill-defined state.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who: floor_plan\n       index: 1\n       add_or_delete: add\n\n    \"\"\"\n    cmd = f'python shape_manage {who} {index} {add_or_delete}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_manage', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_list","title":"<code>shape_pattern_list(tao, *, ix_pattern='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of shape patterns or shape pattern points</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_list--parameters","title":"Parameters","text":"<p>ix_pattern : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_list--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_list--notes","title":"Notes","text":"<p>Command syntax:   python shape_pattern_list {ix_pattern}</p> <p>If optional {ix_pattern} index is omitted then list all the patterns. If {ix_pattern} is present, list points of given pattern.</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_list--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape  args:    ix_pattern:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_list(tao, *, ix_pattern='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of shape patterns or shape pattern points\n\n    Parameters\n    ----------\n    ix_pattern : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python shape_pattern_list {ix_pattern}\n\n    If optional {ix_pattern} index is omitted then list all the patterns.\n    If {ix_pattern} is present, list points of given pattern.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n     args:\n       ix_pattern: \n\n    \"\"\"\n    cmd = f'python shape_pattern_list {ix_pattern}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_pattern_list', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_manage","title":"<code>shape_pattern_manage(tao, ix_pattern, pat_name, pat_line_width, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Add or remove shape pattern</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_manage--parameters","title":"Parameters","text":"<p>ix_pattern pat_name pat_line_width</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_manage--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_manage--notes","title":"Notes","text":"<p>Command syntax:   python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}</p> Where <p>{ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up                                      if adding a pattern and down if deleting. {pat_name}        -- Pattern name. {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section                                            will be deleted.</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape  args:    ix_pattern : 1    pat_name : new_pat    pat_line_width : 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_manage(tao, ix_pattern, pat_name, pat_line_width, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Add or remove shape pattern\n\n    Parameters\n    ----------\n    ix_pattern\n    pat_name\n    pat_line_width\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}\n\n    Where:\n      {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up \n                                          if adding a pattern and down if deleting.\n      {pat_name}        -- Pattern name.\n      {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section \n                                                will be deleted.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n     args:\n       ix_pattern : 1\n       pat_name : new_pat\n       pat_line_width : 1\n\n    \"\"\"\n    cmd = f'python shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_pattern_manage', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_point_manage","title":"<code>shape_pattern_point_manage(tao, ix_pattern, ix_point, s, x, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Add or remove shape pattern point</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_point_manage--parameters","title":"Parameters","text":"<p>ix_pattern ix_point s x</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_point_manage--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_point_manage--notes","title":"Notes","text":"<p>Command syntax:   python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}</p> Where <p>{ix_pattern}      -- Pattern index. {ix_point}        -- Point index. Points of higher indexes will be moved up                                   if adding a point and down if deleting. {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_pattern_point_manage--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape  args:    ix_pattern: 1    ix_point: 1    s: 0    x: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_point_manage(tao, ix_pattern, ix_point, s, x, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Add or remove shape pattern point\n\n    Parameters\n    ----------\n    ix_pattern\n    ix_point\n    s\n    x\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}\n\n    Where:\n      {ix_pattern}      -- Pattern index.\n      {ix_point}        -- Point index. Points of higher indexes will be moved up\n                                        if adding a point and down if deleting.\n      {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_shape\n     args:\n       ix_pattern: 1\n       ix_point: 1\n       s: 0\n       x: 0\n\n    \"\"\"\n    cmd = f'python shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_pattern_point_manage', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.shape_set","title":"<code>shape_set(tao, who, shape_index, ele_name, shape, color, shape_size, type_label, shape_draw, multi_shape, line_width, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Set lat_layout or floor_plan shape parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_set--parameters","title":"Parameters","text":"<p>who shape_index ele_name shape color shape_size type_label shape_draw multi_shape line_width</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_set--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_set--notes","title":"Notes","text":"<p>Command syntax:   python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^                    {shape_size}^^{type_label}^^{shape_draw}^^                    {multi_shape}^^{line_width}</p> <p>{who} is one of:   lat_layout   floor_plan</p>"},{"location":"api/pytao/#pytao.interface_commands.shape_set--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    who: floor_plan    shape_index: 1    ele_name: Q1    shape: circle    color:    shape_size:    type_label:    shape_draw:    multi_shape:    line_width:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_set(tao, who, shape_index, ele_name, shape, color, shape_size, type_label, shape_draw, multi_shape, line_width, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Set lat_layout or floor_plan shape parameters.\n\n    Parameters\n    ----------\n    who\n    shape_index\n    ele_name\n    shape\n    color\n    shape_size\n    type_label\n    shape_draw\n    multi_shape\n    line_width\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^\n                       {shape_size}^^{type_label}^^{shape_draw}^^\n                       {multi_shape}^^{line_width}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who: floor_plan\n       shape_index: 1\n       ele_name: Q1\n       shape: circle\n       color:\n       shape_size:\n       type_label:\n       shape_draw:\n       multi_shape:\n       line_width:\n\n    \"\"\"\n    cmd = f'python shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^{shape_size}^^{type_label}^^{shape_draw}^^{multi_shape}^^{line_width}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='shape_set', cmd_type='None')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.show","title":"<code>show(tao, line, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output the output from a show command.</p>"},{"location":"api/pytao/#pytao.interface_commands.show--parameters","title":"Parameters","text":"<p>line</p>"},{"location":"api/pytao/#pytao.interface_commands.show--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.show--notes","title":"Notes","text":"<p>Command syntax:   python show {line}</p> <p>{line} is the string to pass through to the show command. Example:   python show lattice -python</p>"},{"location":"api/pytao/#pytao.interface_commands.show--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    line: -python</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def show(tao, line, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the output from a show command.\n\n    Parameters\n    ----------\n    line\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python show {line}\n\n    {line} is the string to pass through to the show command.\n    Example:\n      python show lattice -python\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       line: -python\n\n    \"\"\"\n    cmd = f'python show {line}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='show', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.space_charge_com","title":"<code>space_charge_com(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output space_charge_com structure parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.space_charge_com--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.space_charge_com--notes","title":"Notes","text":"<p>Command syntax:   python space_charge_com</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p>"},{"location":"api/pytao/#pytao.interface_commands.space_charge_com--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def space_charge_com(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output space_charge_com structure parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python space_charge_com\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python space_charge_com'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='space_charge_com', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.species_to_int","title":"<code>species_to_int(tao, species_str, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Convert species name to corresponding integer</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_int--parameters","title":"Parameters","text":"<p>species_str</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_int--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_int--notes","title":"Notes","text":"<p>Command syntax:   python species_to_int {species_str}</p> Example <p>python species_to_int CO2++</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_int--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    species_str: electron</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def species_to_int(tao, species_str, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Convert species name to corresponding integer\n\n    Parameters\n    ----------\n    species_str\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python species_to_int {species_str}\n\n    Example:\n      python species_to_int CO2++\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       species_str: electron\n\n    \"\"\"\n    cmd = f'python species_to_int {species_str}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='species_to_int', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.species_to_str","title":"<code>species_to_str(tao, species_int, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Convert species integer id to corresponding</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_str--parameters","title":"Parameters","text":"<p>species_int</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_str--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_str--notes","title":"Notes","text":"<p>Command syntax:   python species_to_str {species_int}</p> Example <p>python species_to_str -1     ! Returns 'Electron'</p>"},{"location":"api/pytao/#pytao.interface_commands.species_to_str--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    species_int: -1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def species_to_str(tao, species_int, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Convert species integer id to corresponding\n\n    Parameters\n    ----------\n    species_int\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python species_to_str {species_int}\n\n    Example:\n      python species_to_str -1     ! Returns 'Electron'\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       species_int: -1\n\n    \"\"\"\n    cmd = f'python species_to_str {species_int}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='species_to_str', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.spin_invariant","title":"<code>spin_invariant(tao, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output closed orbit spin axes n0, l0, or m0 at the ends of all lattice elements in a branch. n0, l0, and m0 are solutions of the T-BMT equation. n0 is periodic while l0 and m0 are not. At the beginning of the branch, the orientation of the  l0 or m0 axes in the plane perpendicular to the n0 axis is chosen a bit arbitrarily. See the Bmad manual for more details.</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_invariant--parameters","title":"Parameters","text":"<p>who ix_uni : optional ix_branch : optional which : default=model flags : default=-array_out</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_invariant--returns","title":"Returns","text":"<p>string_list     if '-array_out' not in flags real_array     if '-array_out' in flags</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_invariant--notes","title":"Notes","text":"<p>Command syntax:   python spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}</p> Where <p>{flags} are optional switches:     -array_out : If present, the output will be available in the tao_c_interface_com%c_real. {who} is one of: l0, n0, or m0 {ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a branch index. Defaults to s%global%default_branch. {which} is one of:   model   base   design</p> Example <p>python spin_invariant 1@0|model</p> <p>Note: This command is under development. If you want to use please contact David Sagan.</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_invariant--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     who: l0    ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_invariant(tao, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output closed orbit spin axes n0, l0, or m0 at the ends of all lattice elements in a branch.\n    n0, l0, and m0 are solutions of the T-BMT equation.\n    n0 is periodic while l0 and m0 are not. At the beginning of the branch, the orientation of the \n    l0 or m0 axes in the plane perpendicular to the n0 axis is chosen a bit arbitrarily.\n    See the Bmad manual for more details.\n\n    Parameters\n    ----------\n    who\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    flags : default=-array_out\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      python spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}\n\n    Where:\n      {flags} are optional switches:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {who} is one of: l0, n0, or m0\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {which} is one of:\n        model\n        base\n        design\n\n    Example:\n      python spin_invariant 1@0|model\n\n    Note: This command is under development. If you want to use please contact David Sagan.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n       who: l0\n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f'python spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}'\n    if verbose: print(cmd)\n    if '-array_out' not in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='spin_invariant', cmd_type='string_list')\n    if '-array_out' in flags:\n        return __execute(tao, cmd, as_dict, raises, method_name='spin_invariant', cmd_type='real_array')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.spin_polarization","title":"<code>spin_polarization(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output spin polarization information</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_polarization--parameters","title":"Parameters","text":"<p>ix_uni : optional ix_branch : optional which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_polarization--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_polarization--notes","title":"Notes","text":"<p>Command syntax:   python spin_polarization {ix_uni}@{ix_branch}|{which}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a branch index. Defaults to s%global%default_branch. {which} is one of:   model   base   design</p> Example <p>python spin_polarization 1@0|model</p> <p>Note: This command is under development. If you want to use please contact David Sagan.</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_polarization--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_polarization(tao, *, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output spin polarization information\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python spin_polarization {ix_uni}@{ix_branch}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {which} is one of:\n        model\n        base\n        design\n\n    Example:\n      python spin_polarization 1@0|model\n\n    Note: This command is under development. If you want to use please contact David Sagan.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f'python spin_polarization {ix_uni}@{ix_branch}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='spin_polarization', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.spin_resonance","title":"<code>spin_resonance(tao, *, ix_uni='', ix_branch='', which='model', ref_ele='0', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output spin resonance information</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_resonance--parameters","title":"Parameters","text":"<p>ix_uni : optional ix_branch : optional which : default=model ref_ele : default=0     Reference element to calculate at.</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_resonance--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.spin_resonance--notes","title":"Notes","text":"<p>Command syntax:   python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ix_branch} is a lattice branch index. Defaults to s%global%default_branch. {which} is one of: \"model\", \"base\" or \"design\" {ref_ele} is an element name or index.</p> <p>This will return a string_list with the following fields:   spin_tune                   -- Spin tune   dq_X_sum, dq_X_diff         -- Tune sum Q_spin+Q_mode and tune difference Q_spin-Q_mode for modes X = a, b, and c.   xi_res_X_sum, xi_res_X_diff -- The linear spin/orbit sum and difference resonance strengths for X = a, b, and c modes.  </p>"},{"location":"api/pytao/#pytao.interface_commands.spin_resonance--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_resonance(tao, *, ix_uni='', ix_branch='', which='model', ref_ele='0', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output spin resonance information\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    ref_ele : default=0\n        Reference element to calculate at.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {ref_ele} is an element name or index.\n    This will return a string_list with the following fields:\n      spin_tune                   -- Spin tune\n      dq_X_sum, dq_X_diff         -- Tune sum Q_spin+Q_mode and tune difference Q_spin-Q_mode for modes X = a, b, and c.\n      xi_res_X_sum, xi_res_X_diff -- The linear spin/orbit sum and difference resonance strengths for X = a, b, and c modes.  \n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f'python spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='spin_resonance', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.super_universe","title":"<code>super_universe(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output super_Universe parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.super_universe--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.super_universe--notes","title":"Notes","text":"<p>Command syntax:   python super_universe</p>"},{"location":"api/pytao/#pytao.interface_commands.super_universe--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def super_universe(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output super_Universe parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python super_universe\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n\n    \"\"\"\n    cmd = f'python super_universe'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='super_universe', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.tao_global","title":"<code>tao_global(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output global parameters.</p>"},{"location":"api/pytao/#pytao.interface_commands.tao_global--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.tao_global--notes","title":"Notes","text":"<p>Command syntax:   python global</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p> The follow is intentionally left out: <p>optimizer_allow_user_abort quiet single_step prompt_color prompt_string</p>"},{"location":"api/pytao/#pytao.interface_commands.tao_global--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def tao_global(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output global parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python global\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Note: The follow is intentionally left out:\n      optimizer_allow_user_abort\n      quiet\n      single_step\n      prompt_color\n      prompt_string\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python global'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='tao_global', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.taylor_map","title":"<code>taylor_map(tao, ele1_id, ele2_id, *, order='1', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output Taylor map between two points.</p>"},{"location":"api/pytao/#pytao.interface_commands.taylor_map--parameters","title":"Parameters","text":"<p>ele1_id ele2_id order : default=1</p>"},{"location":"api/pytao/#pytao.interface_commands.taylor_map--returns","title":"Returns","text":"<p>dict of dict of taylor terms:     {2: { (3,0,0,0,0,0)}: 4.56, ...          corresponding to: px_out = 4.56 * x_in^3</p>"},{"location":"api/pytao/#pytao.interface_commands.taylor_map--notes","title":"Notes","text":"<p>Command syntax:   python taylor_map {ele1_id} {ele2_id} {order}</p> Where <p>{ele1_id} is the start element. {ele2_id} is the end element. {order} is the map order. Default is order set in the lattice file. {order} cannot be larger than        what is set by the lattice file. </p> <p>If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed. Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification. Example:   python taylor_map 2@1&gt;&gt;q01w|design q02w  2</p>"},{"location":"api/pytao/#pytao.interface_commands.taylor_map--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    ele1_id: 1@0&gt;&gt;q01w|design    ele2_id: q02w    order: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def taylor_map(tao, ele1_id, ele2_id, *, order='1', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Taylor map between two points.\n\n    Parameters\n    ----------\n    ele1_id\n    ele2_id\n    order : default=1\n\n    Returns\n    -------\n    dict of dict of taylor terms:\n        {2: { (3,0,0,0,0,0)}: 4.56, ... \n            corresponding to: px_out = 4.56 * x_in^3\n\n    Notes\n    -----\n    Command syntax:\n      python taylor_map {ele1_id} {ele2_id} {order}\n\n    Where:\n      {ele1_id} is the start element.\n      {ele2_id} is the end element.\n      {order} is the map order. Default is order set in the lattice file. {order} cannot be larger than \n            what is set by the lattice file. \n    If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\n    Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n    Example:\n      python taylor_map 2@1&gt;&gt;q01w|design q02w  2\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       ele1_id: 1@0&gt;&gt;q01w|design\n       ele2_id: q02w\n       order: 1\n\n    \"\"\"\n    cmd = f'python taylor_map {ele1_id} {ele2_id} {order}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='taylor_map', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.twiss_at_s","title":"<code>twiss_at_s(tao, *, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output twiss parameters at given s position.</p>"},{"location":"api/pytao/#pytao.interface_commands.twiss_at_s--parameters","title":"Parameters","text":"<p>ix_uni : optional ele : optional s_offset : optional which : default=model</p>"},{"location":"api/pytao/#pytao.interface_commands.twiss_at_s--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.twiss_at_s--notes","title":"Notes","text":"<p>Command syntax:   python twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}</p> Where <p>{ix_uni} is a universe index. Defaults to s%global%default_universe. {ele} is an element name or index. Default at the Beginning element at start of branch 0. {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.    If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will {which} is one of: \"model\", \"base\" or \"design\".</p>"},{"location":"api/pytao/#pytao.interface_commands.twiss_at_s--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     ix_uni: 1    ele: 10    s_offset: 0.7    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def twiss_at_s(tao, *, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output twiss parameters at given s position.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ele : optional\n    s_offset : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n      {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n         If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will\n      {which} is one of: \"model\", \"base\" or \"design\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n       ix_uni: 1\n       ele: 10\n       s_offset: 0.7\n       which: model \n\n    \"\"\"\n    cmd = f'python twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='twiss_at_s', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.universe","title":"<code>universe(tao, ix_uni, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output universe info.</p>"},{"location":"api/pytao/#pytao.interface_commands.universe--parameters","title":"Parameters","text":"<p>ix_uni</p>"},{"location":"api/pytao/#pytao.interface_commands.universe--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.universe--notes","title":"Notes","text":"<p>Command syntax:   python universe {ix_uni}</p> <p>Use \"python global\" to get the number of universes.</p>"},{"location":"api/pytao/#pytao.interface_commands.universe--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:     ix_uni: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def universe(tao, ix_uni, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output universe info.\n\n    Parameters\n    ----------\n    ix_uni\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python universe {ix_uni}\n\n    Use \"python global\" to get the number of universes.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args: \n       ix_uni: 1\n\n    \"\"\"\n    cmd = f'python universe {ix_uni}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='universe', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var","title":"<code>var(tao, var, *, slaves='', verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output parameters of a given variable.</p>"},{"location":"api/pytao/#pytao.interface_commands.var--parameters","title":"Parameters","text":"<p>var slaves : optional</p>"},{"location":"api/pytao/#pytao.interface_commands.var--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var--notes","title":"Notes","text":"<p>Command syntax:   python var {var} slaves</p>"},{"location":"api/pytao/#pytao.interface_commands.var--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:     var: quad[1]    slaves:</p> 2 <p>init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching args:    var: quad[1]   slaves: slaves</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var(tao, var, *, slaves='', verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output parameters of a given variable.\n\n    Parameters\n    ----------\n    var\n    slaves : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var {var} slaves\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args: \n       var: quad[1]\n       slaves:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args: \n       var: quad[1]\n       slaves: slaves\n\n    \"\"\"\n    cmd = f'python var {var} slaves'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_create","title":"<code>var_create(tao, var_name, ele_name, attribute, universes, weight, step, low_lim, high_lim, merit_type, good_user, key_bound, key_delta, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Create a single variable</p>"},{"location":"api/pytao/#pytao.interface_commands.var_create--parameters","title":"Parameters","text":"<p>var_name ele_name attribute universes weight step low_lim high_lim merit_type good_user key_bound key_delta</p>"},{"location":"api/pytao/#pytao.interface_commands.var_create--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var_create--notes","title":"Notes","text":"<p>Command syntax:   python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^                     {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^                     {good_user}^^{key_bound}^^{key_delta}</p> <p>{var_name} is something like \"kick[5]\". Before using var_create, setup the appropriate v1_var array using  the \"python var_v1_create\" command.</p>"},{"location":"api/pytao/#pytao.interface_commands.var_create--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching  args:    var_name: quad[1]    ele_name: Q1    attribute: L    universes: 1    weight: 0.001    step: 0.001    low_lim: -10    high_lim: 10    merit_type:     good_user: T    key_bound: T    key_delta: 0.01</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_create(tao, var_name, ele_name, attribute, universes, weight, step, low_lim, high_lim, merit_type, good_user, key_bound, key_delta, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Create a single variable\n\n    Parameters\n    ----------\n    var_name\n    ele_name\n    attribute\n    universes\n    weight\n    step\n    low_lim\n    high_lim\n    merit_type\n    good_user\n    key_bound\n    key_delta\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^\n                        {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^\n                        {good_user}^^{key_bound}^^{key_delta}\n\n    {var_name} is something like \"kick[5]\".\n    Before using var_create, setup the appropriate v1_var array using \n    the \"python var_v1_create\" command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/tao.init_optics_matching\n     args:\n       var_name: quad[1]\n       ele_name: Q1\n       attribute: L\n       universes: 1\n       weight: 0.001\n       step: 0.001\n       low_lim: -10\n       high_lim: 10\n       merit_type: \n       good_user: T\n       key_bound: T\n       key_delta: 0.01 \n\n    \"\"\"\n    cmd = f'python var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^{weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^{good_user}^^{key_bound}^^{key_delta}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_create', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_general","title":"<code>var_general(tao, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of all variable v1 arrays</p>"},{"location":"api/pytao/#pytao.interface_commands.var_general--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var_general--notes","title":"Notes","text":"<p>Command syntax:   python var_general</p> Output syntax <p>{v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}</p>"},{"location":"api/pytao/#pytao.interface_commands.var_general--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_general(tao, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of all variable v1 arrays\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var_general\n\n    Output syntax:\n      {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = f'python var_general'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_general', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_array","title":"<code>var_v1_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of variables in a given variable v1 array</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_array--parameters","title":"Parameters","text":"<p>v1_var</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_array--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_array--notes","title":"Notes","text":"<p>Command syntax:   python var_v1_array {v1_var}</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_array--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    v1_var: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of variables in a given variable v1 array\n\n    Parameters\n    ----------\n    v1_var\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var_v1_array {v1_var}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       v1_var: quad_k1 \n\n    \"\"\"\n    cmd = f'python var_v1_array {v1_var}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_v1_array', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_create","title":"<code>var_v1_create(tao, v1_name, n_var_min, n_var_max, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Create a v1 variable structure along with associated var array.</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_create--parameters","title":"Parameters","text":"<p>v1_name n_var_min n_var_max</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_create--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_create--notes","title":"Notes","text":"<p>Command syntax:   python var_v1_create {v1_name} {n_var_min} {n_var_max}</p> <p>{n_var_min} and {n_var_max} are the lower and upper bounds of the var Example:   python var_v1_create quad_k1 0 45 This example creates a v1 var structure called \"quad_k1\" with an associated variable array that has the range [0, 45].</p> <p>Use the \"set variable\" command to set a created variable parameters. In particular, to slave a lattice parameter to a variable use the command:   set {v1_name}|ele_name = {lat_param} where {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}] Examples:   set quad_k1[2]|ele_name = 2@q01w[k1]   set quad_k1[2]|ele_name = 2@0&gt;&gt;10[k1] Note: When setting multiple variable parameters,        temporarily toggle s%global%lattice_calc_on to False   (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the  partially created variable and generating unwanted error messages.</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_create--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    v1_name: quad_k1     n_var_min: 0     n_var_max: 45</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_create(tao, v1_name, n_var_min, n_var_max, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Create a v1 variable structure along with associated var array.\n\n    Parameters\n    ----------\n    v1_name\n    n_var_min\n    n_var_max\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var_v1_create {v1_name} {n_var_min} {n_var_max}\n\n    {n_var_min} and {n_var_max} are the lower and upper bounds of the var\n    Example:\n      python var_v1_create quad_k1 0 45\n    This example creates a v1 var structure called \"quad_k1\" with an associated\n    variable array that has the range [0, 45].\n\n    Use the \"set variable\" command to set a created variable parameters.\n    In particular, to slave a lattice parameter to a variable use the command:\n      set {v1_name}|ele_name = {lat_param}\n    where {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}]\n    Examples:\n      set quad_k1[2]|ele_name = 2@q01w[k1]\n      set quad_k1[2]|ele_name = 2@0&gt;&gt;10[k1]\n    Note: When setting multiple variable parameters, \n          temporarily toggle s%global%lattice_calc_on to False\n      (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the \n    partially created variable and generating unwanted error messages.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       v1_name: quad_k1 \n       n_var_min: 0 \n       n_var_max: 45 \n\n    \"\"\"\n    cmd = f'python var_v1_create {v1_name} {n_var_min} {n_var_max}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_v1_create', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_destroy","title":"<code>var_v1_destroy(tao, v1_datum, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Destroy a v1 var structure along with associated var sub-array.</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_destroy--parameters","title":"Parameters","text":"<p>v1_datum</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_destroy--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_destroy--notes","title":"Notes","text":"<p>Command syntax:   python var_v1_destroy {v1_datum}</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v1_destroy--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    v1_datum: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_destroy(tao, v1_datum, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Destroy a v1 var structure along with associated var sub-array.\n\n    Parameters\n    ----------\n    v1_datum\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python var_v1_destroy {v1_datum}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       v1_datum: quad_k1\n\n    \"\"\"\n    cmd = f'python var_v1_destroy {v1_datum}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_v1_destroy', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.var_v_array","title":"<code>var_v_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output list of variables for a given data_v1.</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v_array--parameters","title":"Parameters","text":"<p>v1_var</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v_array--notes","title":"Notes","text":"<p>Command syntax:   python var_v_array {v1_var}</p> Example <p>python var_v_array quad_k1</p>"},{"location":"api/pytao/#pytao.interface_commands.var_v_array--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    v1_var: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v_array(tao, v1_var, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of variables for a given data_v1.\n\n    Parameters\n    ----------\n    v1_var\n\n    Notes\n    -----\n    Command syntax:\n      python var_v_array {v1_var}\n\n    Example:\n      python var_v_array quad_k1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       v1_var: quad_k1\n\n    \"\"\"\n    cmd = f'python var_v_array {v1_var}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='var_v_array', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.interface_commands.wave","title":"<code>wave(tao, who, *, verbose=False, as_dict=True, raises=True)</code>","text":"<p>Output Wave analysis info.</p>"},{"location":"api/pytao/#pytao.interface_commands.wave--parameters","title":"Parameters","text":"<p>who</p>"},{"location":"api/pytao/#pytao.interface_commands.wave--returns","title":"Returns","text":"<p>string_list</p>"},{"location":"api/pytao/#pytao.interface_commands.wave--notes","title":"Notes","text":"<p>Command syntax:   python wave {who}</p> <p>Where {who} is one of:   params   loc_header   locations   plot1, plot2, plot3</p>"},{"location":"api/pytao/#pytao.interface_commands.wave--examples","title":"Examples","text":"<p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init  args:    who: params</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def wave(tao, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Wave analysis info.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      python wave {who}\n\n    Where {who} is one of:\n      params\n      loc_header\n      locations\n      plot1, plot2, plot3\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init\n     args:\n       who: params\n\n    \"\"\"\n    cmd = f'python wave {who}'\n    if verbose: print(cmd)\n    return __execute(tao, cmd, as_dict, raises, method_name='wave', cmd_type='string_list')\n</code></pre>"},{"location":"api/pytao/#pytao.tao_ctypes.extra_commands.bunch_data","title":"<code>bunch_data(tao, ele_id, *, which='model', ix_bunch=1, verbose=False)</code>","text":"<p>Returns bunch data in openPMD-beamphysics format/notation.</p>"},{"location":"api/pytao/#pytao.tao_ctypes.extra_commands.bunch_data--notes","title":"Notes","text":"<p>Note that Tao's 'write beam' will also write a proper h5 file in this format.</p> Expected usage <p>data = bunch_data(tao, 'end') from pmd_beamphysics import ParticleGroup P = ParicleGroup(data=data)</p>"},{"location":"api/pytao/#pytao.tao_ctypes.extra_commands.bunch_data--returns","title":"Returns","text":"<p>data : dict      dict of arrays, with keys 'x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'</p>"},{"location":"api/pytao/#pytao.tao_ctypes.extra_commands.bunch_data--examples","title":"Examples","text":"<p>Example: 1  init: $ACC_ROOT_DIR/tao/examples/csr_beam_tracking/tao.init  args:    ele_id: end    which: model    ix_bunch: 1</p> Source code in <code>pytao/tao_ctypes/extra_commands.py</code> <pre><code>def bunch_data(tao, ele_id, *, which='model', ix_bunch=1,  verbose=False):\n    \"\"\"    \n    Returns bunch data in openPMD-beamphysics format/notation.\n\n    Notes\n    -----\n    Note that Tao's 'write beam' will also write a proper h5 file in this format.\n\n    Expected usage:\n        data = bunch_data(tao, 'end')\n        from pmd_beamphysics import ParticleGroup\n        P = ParicleGroup(data=data)\n\n\n    Returns\n    -------\n    data : dict\n         dict of arrays, with keys 'x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'\n\n\n    Examples\n    --------\n    Example: 1\n     init: $ACC_ROOT_DIR/tao/examples/csr_beam_tracking/tao.init\n     args:\n       ele_id: end\n       which: model\n       ix_bunch: 1  \n\n    \"\"\"\n\n    # Get species\n    stats = tao.bunch_params(ele_id, which=which, verbose=verbose)\n    species = stats['species']\n\n    dat = {}\n    for coordinate in ['x', 'px', 'y', 'py',  't', 'pz', 'p0c', 'charge', 'state']:\n        dat[coordinate] = tao.bunch1(ele_id, coordinate=coordinate, which=which, ix_bunch=ix_bunch, verbose=verbose)\n\n    # Remove normalizations\n    p0c = dat.pop('p0c')\n\n    dat['status'] = dat.pop('state')\n    dat['weight'] = dat.pop('charge')\n\n    # px from Bmad is px/p0c \n    # pz from Bmad is delta = p/p0c -1. \n    # pz = sqrt( (delta+1)**2 -px**2 -py**2)*p0c\n    dat['pz'] = np.sqrt((dat['pz'] + 1)**2 - dat['px']**2 - dat['py']**2) * p0c\n    dat['px'] = dat['px']*p0c\n    dat['py'] = dat['py']*p0c\n\n    # z = 0 by definition\n    dat['z'] = np.full(len(dat['x']), 0)\n\n    dat['species'] = species.lower()\n\n    return dat\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced usage","text":"In\u00a0[1]: Copied! <pre># Useful for debugging\n#%load_ext autoreload\n#%autoreload 2\n</pre> # Useful for debugging #%load_ext autoreload #%autoreload 2 In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format = 'retina'\n</pre> import numpy as np import matplotlib.pyplot as plt %config InlineBackend.figure_format = 'retina' In\u00a0[3]: Copied! <pre>from pytao import Tao, TaoModel, util, run_tao\nfrom pytao.tao_ctypes.evaluate import evaluate_tao\nimport os\n</pre> from pytao import Tao, TaoModel, util, run_tao from pytao.tao_ctypes.evaluate import evaluate_tao import os In\u00a0[4]: Copied! <pre>INPUT_FILE = os.path.expandvars('$ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init')\nassert os.path.exists(os.path.expandvars(INPUT_FILE))\n</pre> INPUT_FILE = os.path.expandvars('$ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init') assert os.path.exists(os.path.expandvars(INPUT_FILE)) In\u00a0[5]: Copied! <pre>M=run_tao(input_file=INPUT_FILE, ploton=False)\nM\n</pre> M=run_tao(input_file=INPUT_FILE, ploton=False) M Out[5]: <pre>&lt;pytao.tao_ctypes.core.TaoModel at 0x12a387560&gt;</pre> In\u00a0[6]: Copied! <pre>res = evaluate_tao(settings={\n                            'space_charge_com:ds_track_step':0.001}, \n                   input_file=INPUT_FILE, \n                   run_commands=['set global track_type=beam'],\n                   expressions = ['lat::orbit.x[FF.PIP02A]', 'beam::norm_emit.x[end]'],\n                   ploton=False, \n                   archive_csr_wake=True,\n                   beam_archive_path = '.')\nres\n</pre> res = evaluate_tao(settings={                             'space_charge_com:ds_track_step':0.001},                     input_file=INPUT_FILE,                     run_commands=['set global track_type=beam'],                    expressions = ['lat::orbit.x[FF.PIP02A]', 'beam::norm_emit.x[end]'],                    ploton=False,                     archive_csr_wake=True,                    beam_archive_path = '.') res Out[6]: <pre>{'lat::orbit.x[FF.PIP02A]': array([0.]),\n 'beam::norm_emit.x[end]': array([9.99826669e-07]),\n 'beam_archive': '/Users/chrisonian/Code/GitHub/pytao/docs/examples/bmad_beam_193acce3fc1cb213e4aa51503888f178.h5'}</pre> In\u00a0[7]: Copied! <pre>from pmd_beamphysics import ParticleGroup, particle_paths\nfrom h5py import File\nafile = res['beam_archive']\nh5 = File(afile, 'r')\nppaths = particle_paths(h5)\nppaths\n</pre> from pmd_beamphysics import ParticleGroup, particle_paths from h5py import File afile = res['beam_archive'] h5 = File(afile, 'r') ppaths = particle_paths(h5) ppaths Out[7]: <pre>['/data/00001/particles/',\n '/data/00002/particles/',\n '/data/00003/particles/',\n '/data/00004/particles/']</pre> <p>Note that csr_wake is in here</p> In\u00a0[8]: Copied! <pre>list(h5)\n</pre> list(h5) Out[8]: <pre>['csr_wake', 'data', 'expressions', 'input', 'settings']</pre> In\u00a0[9]: Copied! <pre>P = ParticleGroup(h5[ppaths[-1]])\nP.plot('delta_t', 'delta_pz', bins=200)\n</pre> P = ParticleGroup(h5[ppaths[-1]]) P.plot('delta_t', 'delta_pz', bins=200) In\u00a0[10]: Copied! <pre>os.remove(afile)\n</pre> os.remove(afile) In\u00a0[11]: Copied! <pre>M.evaluate('lat::orbit.x[end]')\n</pre> M.evaluate('lat::orbit.x[end]') Out[11]: <pre>array([0.])</pre> In\u00a0[12]: Copied! <pre>from pytao.misc.csr import  read_csr_wake_data_h5, process_csr_wake_data\nimport numpy as np\n</pre> from pytao.misc.csr import  read_csr_wake_data_h5, process_csr_wake_data import numpy as np <p>csr_wake is stored in the HDF5 file</p> In\u00a0[13]: Copied! <pre>cdat = read_csr_wake_data_h5(h5)\n</pre> cdat = read_csr_wake_data_h5(h5) <p>This is the actual data</p> In\u00a0[14]: Copied! <pre>dat = cdat['3:FF.BEN01']['data']\ndat.shape\n</pre> dat = cdat['3:FF.BEN01']['data'] dat.shape Out[14]: <pre>(134, 40, 5)</pre> <p>This will process into a more useful form for data analysis.</p> In\u00a0[15]: Copied! <pre>pdat = process_csr_wake_data(cdat)\n\npdat['s_position']\n</pre> pdat = process_csr_wake_data(cdat)  pdat['s_position'] Out[15]: <pre>array([0.   , 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008,\n       0.009, 0.01 , 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017,\n       0.018, 0.019, 0.02 , 0.021, 0.022, 0.023, 0.024, 0.025, 0.026,\n       0.027, 0.028, 0.029, 0.03 , 0.031, 0.032, 0.033, 0.034, 0.035,\n       0.036, 0.037, 0.038, 0.039, 0.04 , 0.041, 0.042, 0.043, 0.044,\n       0.045, 0.046, 0.047, 0.048, 0.049, 0.05 , 0.051, 0.052, 0.053,\n       0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.06 , 0.06 , 0.061,\n       0.062, 0.063, 0.064, 0.065, 0.066, 0.067, 0.068, 0.069, 0.07 ,\n       0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079,\n       0.08 , 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088,\n       0.089, 0.09 , 0.091, 0.092, 0.093, 0.094, 0.095, 0.096, 0.097,\n       0.098, 0.099, 0.1  , 0.101, 0.102, 0.103, 0.104, 0.105, 0.106,\n       0.107, 0.108, 0.109, 0.11 , 0.111, 0.112, 0.113, 0.114, 0.115,\n       0.116, 0.117, 0.118, 0.119, 0.12 , 0.121, 0.122, 0.123, 0.124,\n       0.125, 0.126, 0.127, 0.128, 0.129, 0.13 , 0.131, 0.132, 0.133,\n       0.134, 0.135, 0.136, 0.137, 0.138, 0.139, 0.14 , 0.141, 0.142,\n       0.143, 0.144, 0.145, 0.146, 0.147, 0.148, 0.149, 0.15 , 0.151,\n       0.152, 0.153, 0.154, 0.155, 0.156, 0.157, 0.158, 0.159, 0.16 ,\n       0.161, 0.162, 0.163, 0.164, 0.165, 0.166, 0.167, 0.168, 0.169,\n       0.17 , 0.171, 0.172, 0.173, 0.174, 0.175, 0.176, 0.177, 0.178,\n       0.179, 0.18 , 0.181, 0.182, 0.183, 0.184, 0.185, 0.186, 0.187,\n       0.188, 0.189, 0.19 , 0.191, 0.192, 0.193, 0.193, 0.194, 0.195,\n       0.196, 0.197, 0.198, 0.199, 0.2  , 0.201, 0.202, 0.203, 0.204,\n       0.205, 0.206, 0.207, 0.208, 0.209, 0.21 , 0.211, 0.212, 0.213,\n       0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.22 , 0.221, 0.222,\n       0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.23 , 0.231,\n       0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.24 ,\n       0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249,\n       0.25 , 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258,\n       0.259, 0.26 , 0.261, 0.262, 0.263, 0.263, 0.264, 0.265, 0.266,\n       0.267, 0.268, 0.269, 0.27 , 0.271, 0.272, 0.273, 0.274, 0.275,\n       0.276, 0.277, 0.278, 0.279, 0.28 , 0.281, 0.282, 0.283, 0.284,\n       0.285, 0.286, 0.287, 0.288, 0.289, 0.29 , 0.291, 0.292, 0.293,\n       0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.3  , 0.301, 0.302,\n       0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.31 , 0.311,\n       0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.32 ,\n       0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329,\n       0.33 , 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338,\n       0.339, 0.34 , 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347,\n       0.348, 0.349, 0.35 , 0.351, 0.352, 0.353, 0.354, 0.355, 0.356,\n       0.357, 0.358, 0.359, 0.36 , 0.361, 0.362, 0.363, 0.364, 0.365,\n       0.366, 0.367, 0.368, 0.369, 0.37 , 0.371, 0.372, 0.373, 0.374,\n       0.375, 0.376, 0.377, 0.378, 0.379, 0.38 , 0.381, 0.382, 0.383,\n       0.384, 0.385, 0.385, 0.386, 0.387, 0.388, 0.389, 0.39 , 0.391,\n       0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.4  ,\n       0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409,\n       0.41 , 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418,\n       0.419, 0.42 , 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427,\n       0.428, 0.429, 0.43 , 0.431, 0.432, 0.433, 0.434, 0.435, 0.436,\n       0.437, 0.438, 0.439, 0.44 , 0.441, 0.442, 0.443, 0.444, 0.445])</pre> In\u00a0[16]: Copied! <pre>from pytao.misc.csr_plot import plot_csr_wake, plot_csr_stats\nfrom pytao.misc.csr import csr_wake_stats_at_step\n</pre> from pytao.misc.csr_plot import plot_csr_wake, plot_csr_stats from pytao.misc.csr import csr_wake_stats_at_step In\u00a0[17]: Copied! <pre>from ipywidgets import interact\ndef plot1(step=0):\n    plot_csr_wake(pdat, step=step)\nnstep = len(pdat['z'])\ninteract(plot1, step=(0, nstep-1, 1) )\n</pre> from ipywidgets import interact def plot1(step=0):     plot_csr_wake(pdat, step=step) nstep = len(pdat['z']) interact(plot1, step=(0, nstep-1, 1) ) <pre>interactive(children=(IntSlider(value=0, description='step', max=449), Output()), _dom_classes=('widget-intera\u2026</pre> Out[17]: <pre>&lt;function __main__.plot1(step=0)&gt;</pre> <p>Check the s-position for each step</p> In\u00a0[18]: Copied! <pre>plt.plot(pdat['s_position'], marker='.')\n</pre> plt.plot(pdat['s_position'], marker='.') Out[18]: <pre>[&lt;matplotlib.lines.Line2D at 0x166e92b10&gt;]</pre> <p>Another convenience plot</p> In\u00a0[19]: Copied! <pre>plot_csr_stats(pdat)\n</pre> plot_csr_stats(pdat)   <pre>(450, 4)\n</pre> <p>Cleanup</p> In\u00a0[20]: Copied! <pre>os.remove('wake.dat')\n</pre> os.remove('wake.dat')"},{"location":"examples/advanced/#advanced-usage","title":"Advanced usage\u00b6","text":""},{"location":"examples/advanced/#inititialize-tao","title":"Inititialize Tao\u00b6","text":""},{"location":"examples/advanced/#run_tao","title":"run_tao\u00b6","text":""},{"location":"examples/advanced/#evaluate_tao","title":"evaluate_tao\u00b6","text":""},{"location":"examples/advanced/#evaluate-examples","title":"evaluate examples\u00b6","text":""},{"location":"examples/advanced/#csr_wake-diagnostic-file","title":"csr_wake diagnostic file\u00b6","text":""},{"location":"examples/basic/","title":"PyTao Basics","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>tao=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/cesr/tao.init -noplot')\n</pre> tao=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/cesr/tao.init -noplot')    In\u00a0[3]: Copied! <pre>tao.cmd('show lat 1:10')\n</pre> tao.cmd('show lat 1:10') Out[3]: <pre>['# Values shown are for the Exit End of each Element:',\n '# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track',\n '#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State',\n '      1  IP_L0         Marker                0.000   0.000    0.95   0.000  -0.00  -0.017    0.02   0.000   0.00   0.001  Alive',\n '      2  CLEO_SOL#3    Solenoid              0.622   0.622    1.34   0.093  -0.02   1.470   21.81   0.244   0.00   0.041  Alive',\n '      3  DET_00W       Marker                0.622   0.000    1.34   0.093  -0.02   1.470   21.81   0.244   0.00   0.041  Alive',\n '      4  CLEO_SOL#4    Solenoid              0.638   0.016    1.36   0.094  -0.02   1.507   22.92   0.244   0.00   0.043  Alive',\n '      5  Q00W\\\\CLEO_SOL Sol_Quad              1.755   1.117    7.73   0.160  -0.09   5.505   88.01   0.247  -0.01   0.486  Alive',\n '      6  Q00W#1        Quadrupole            2.163   0.408   15.96   0.166  -0.13   8.151   76.38   0.248  -0.01   0.717  Alive',\n '      7  D003          Drift                 2.493   0.331   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.931  Alive',\n '      8  DET_01W       Marker                2.493   0.000   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.931  Alive',\n '      9  D004          Drift                 2.924   0.431   45.79   0.171  -0.22  14.030   42.12   0.250  -0.02   1.209  Alive',\n '     10  Q01W          Quadrupole            3.874   0.950   66.94   0.173  -0.26  16.851   28.95   0.255  -0.02   1.213  Alive',\n '# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track',\n '#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State',\n '# Values shown are for the Exit End of each Element:']</pre> <p>Send a list of commands. This returns the corresponding list of outputs:</p> In\u00a0[4]: Copied! <pre>tao.cmds(\n    ['set lattice model=design',\n     'set ele Q00W x_offset = 1e-6']\n)\n</pre> tao.cmds(     ['set lattice model=design',      'set ele Q00W x_offset = 1e-6'] ) Out[4]: <pre>[[], []]</pre> <p>This is an alternative way to send commands to Tao directly in the jupyter notebook, using the %%tao magic. Multiple lines can be executed.</p> In\u00a0[5]: Copied! <pre>%%tao\nsho lat 1:10\nsho ele 4\n</pre> %%tao sho lat 1:10 sho ele 4 <pre>-------------------------\nTao&gt; sho lat 1:10\n# Values shown are for the Exit End of each Element:\n# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n      1  IP_L0         Marker                0.000   0.000    0.95   0.000  -0.00  -0.018    0.02   0.000   0.00   0.001  Alive\n      2  CLEO_SOL#3    Solenoid              0.622   0.622    1.34   0.093  -0.02   1.469   21.81   0.244   0.00   0.042  Alive\n      3  DET_00W       Marker                0.622   0.000    1.34   0.093  -0.02   1.469   21.81   0.244   0.00   0.042  Alive\n      4  CLEO_SOL#4    Solenoid              0.638   0.016    1.36   0.094  -0.02   1.507   22.92   0.244   0.00   0.044  Alive\n      5  Q00W\\CLEO_SOL Sol_Quad              1.755   1.117    7.73   0.160  -0.09   5.505   88.01   0.247  -0.01   0.487  Alive\n      6  Q00W#1        Quadrupole            2.163   0.408   15.96   0.166  -0.13   8.151   76.38   0.248  -0.01   0.719  Alive\n      7  D003          Drift                 2.493   0.331   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.932  Alive\n      8  DET_01W       Marker                2.493   0.000   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.932  Alive\n      9  D004          Drift                 2.924   0.431   45.79   0.171  -0.22  14.030   42.12   0.250  -0.02   1.210  Alive\n     10  Q01W          Quadrupole            3.874   0.950   66.94   0.173  -0.26  16.851   28.95   0.255  -0.02   1.213  Alive\n# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n# Values shown are for the Exit End of each Element:\n-------------------------\nTao&gt; sho ele 4\nElement # 4\nElement Name: CLEO_SOL#4\nKey: Solenoid\nS_start, S:      0.622301,      0.637956\nRef_time:  2.127992E-09\n\nAttribute values [Only non-zero values shown]:\n    1  L                           =  1.5655000E-02 m        31  L_SOFT_EDGE                 =  0.0000000E+00 m\n    3  R_SOLENOID                  =  0.0000000E+00 m\n    5  KS                          = -8.5023386E-02 1/m      49  BS_FIELD                    =  1.5000000E+00 T\n   10  FRINGE_TYPE                 =  None (1)               11  FRINGE_AT                   =  No_End (4)\n   13  SPIN_FRINGE_ON              =  T (1)\n   17  STATIC_LINEAR_MAP           =  F (0)\n   47  PTC_CANONICAL_COORDS        =  T (1)\n   50  DELTA_REF_TIME              =  5.2219459E-11 sec\n   53  P0C                         =  5.2890000E+09 eV           BETA                        =  1.0000000E+00\n   54  E_TOT                       =  5.2890000E+09 eV           GAMMA                       =  1.0350315E+04\n   65  INTEGRATOR_ORDER            = 0\n   67  DS_STEP                     =  2.0000000E-01 m        66  NUM_STEPS                   = 1\n   68  CSR_DS_STEP                 =  0.0000000E+00 m\n\n       TRACKING_METHOD              =  Bmad_Standard             APERTURE_AT                =  Exit_End\n       MAT6_CALC_METHOD             =  Bmad_Standard             APERTURE_TYPE              =  Rectangular\n       SPIN_TRACKING_METHOD         =  Tracking                  OFFSET_MOVES_APERTURE      =  F\n       PTC_INTEGRATION_TYPE         =  Matrix_Kick               SYMPLECTIFY                =  F\n       CSR_METHOD                   =  Off                       FIELD_MASTER               =  F\n       SPACE_CHARGE_METHOD          =  Off                       LONGITUDINAL ORIENTATION   =       1\n       FIELD_CALC                   =  Refer_to_Lords.\n\nSlave_status: Super_Slave\nAssociated Super_Lord(s):\n   Index   Name                             Type\n     872   CLEO_SOL                         Solenoid\n\nLord_status:  Not_a_Lord\n\nTwiss at end of element:\n                          A              B            Cbar                        C_mat\n  Beta (m)         1.36490320    22.91977153  |  -0.11412810   0.00652709     -0.08500246   0.03650694\n  Alpha           -0.65684268   -35.88090663  |  -0.16215602   0.00350746     -0.09239919   0.03194148\n  Gamma (1/m)      1.04875005    56.21519652  |   Gamma_c =   0.99967089       Mode_Flip = F\n  Phi (rad)        0.59356742     1.53299612            X              Y              Z\n  Eta (m)         -0.02444437     0.00057682    -0.02453396     0.00007942     0.00005371\n  Etap            -0.03500697    -0.00133149    -0.03509127    -0.00204809     1.00000000\n  Sigma            0.00052589     0.00002028     0.00000000     0.00000000\n\nOrbit:  Electron   State: Alive\n         Position[mm] Momentum[mrad]        Spin   |\n  X:       1.50654732     2.38873152               | t_particle [sec]:        2.12933094E-09  E_tot: 5.28896E+09\n  Y:       0.04370624     0.06771334               | t_part-t_ref [sec]:      1.33877127E-12  PC:    5.28896E+09\n  Z:      -0.40135353    -0.00717210               | (t_ref-t_part)*Vel [m]: -4.01353529E-04  Beta:  0.999999995\n-------------------------\nTao&gt; \n</pre> In\u00a0[6]: Copied! <pre>%%tao\nhelp python\n</pre> %%tao help python <pre>-------------------------\nTao&gt; help python\nThe \"python\" command is like the \"show\" command in that the \"python\" command prints\ninformation to the terminal. The difference is that the output from the \"show\" command is meant\nfor viewing by the user while the output of the \"python\" command is meant for easy\nparsing. Format:\n  python {-append &lt;file_name&gt;} {-noprint} &lt;subcommand&gt; &lt;arguments&gt;\n  python {-write &lt;file_name&gt;} {-noprint} &lt;subcommand&gt; &lt;arguments&gt;\n\nThe \"python\" command has \"-append\" and \"-write\" optional arguments which can be used to\nwrite the results to a file. The \"python -append\" command will appended to the output file. The\n\"python -write\" command will first erase the contents of the output file. Example:\n  python -write d2.dat data_d2    ! Write to file \"d2.dat\"\n\nThe \"-noprint\" option suppresses printing and is useful when writing large amounts of data to a\nfile.  The \"python\" command can be used to pass information to a parent process when Tao is run\nas a subprocess.  The parent process may be any scripting program like Python, Perl, Tcl, etc.  In\nparticular, see the \"Python/GUI Interface\" chapter  for details on how to run\nTao as a Python subprocess.\n\nIn terms of long term maintainability, the advantage of using the \"python\" command in the scripts\nover the \"show\" command comes from the fact that the output syntax of \"show\" commands can (and\ndoes) change.\n\nFor further documentation on the python command and interfacing to python is in the \"Python/GUI\nInterface chapter .\n\nDocumentation on interfacing Python scripts to Tao's python command is given in the \"Tao Python\nCommand section .\n\nList of possible \"&lt;what_to_print&gt;\" choices:\n  beam, beam_init, branch1, bunch_comb, bunch_params, bunch1, bmad_com,\n  building_wall_list, building_wall_graph, building_wall_point,\n  building_wall_section, constraints, da_params, da_aperture, data,\n  data_d2_create, data_d2_destroy, data_d_array, data_d1_array,\n  data_d2, data_d2_array, data_set_design_value, data_parameter,\n  datum_create, datum_has_ele, derivative, ele:ac_kicker, ele:cartesian_map,\n  ele:chamber_wall, ele:control_var, ele:cylindrical_map, ele:elec_multipoles,\n  ele:floor, ele:grid_field, ele:gen_attribs, ele:head, ele:lord_slave, ele:mat6,\n  ele:methods, ele:multipoles, ele:orbit, ele:param, ele:photon, ele:spin_taylor,\n  ele:taylor, ele:taylor_field, ele:twiss, ele:wake, ele:wall3d, em_field, enum,\n  evaluate, floor_plan, floor_orbit, global, help, inum, lat_branch_list,\n  lat_calc_done, lat_ele_list, lat_list, lat_param_units, matrix, merit, orbit_at_s,\n  place_buffer, plot_curve, plot_graph, plot_histogram, plot_lat_layout, plot_line,\n  plot_plot_manage, plot_graph_manage, plot_curve_manage, plot_list, plot_symbol,\n  plot_transfer, plot1, ptc_com, ring_general, shape_list, shape_manage,\n  shape_pattern_list, shape_pattern_manage, shape_pattern_point_manage, shape_set,\n  show, species_to_int, species_to_str, spin_polarization, spin_resonance,\n  super_universe, twiss_at_s, universe, var_v1_create, var_v1_destroy, var_create,\n  var_general, var_v1_array, var_v_array, var, wave\n\n-------------------------\nTao&gt; \n</pre> <p>This data is returned as specially formatted lists</p> In\u00a0[7]: Copied! <pre>tao.cmd('python orbit_at_s end')\n</pre> tao.cmd('python orbit_at_s end') Out[7]: <pre>['x;REAL;F; -1.77207910292112E-05',\n 'px;REAL;F;  2.39054798135166E-03',\n 'y;REAL;F;  9.77805901311320E-07',\n 'py;REAL;F;  2.91412238054611E-06',\n 'z;REAL;F; -3.99530687252325E-04',\n 'pz;REAL;F; -7.17210141059523E-06',\n 'spin;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00;  0.00000000000000E+00',\n 'field;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00',\n 'phase;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00',\n 's;REAL;F;  7.68426421416168E+02',\n 't;REAL;F;  2.56319600136698E-06',\n 'charge;REAL;F;  0.00000000000000E+00',\n 'dt_ref;REAL;F;  0.00000000000000E+00',\n 'p0c;REAL;F;  5.28899997531481E+09',\n 'beta;REAL;F;  9.99999995332664E-01',\n 'ix_ele;INT;F;868',\n 'state;STR;F;Alive',\n 'direction;INT;F;1',\n 'species;SPECIES;F;Electron',\n 'location;STR;F;Downstream_End']</pre> <p>Some commands have 'array_out' options. For example, this seems to return nothing:</p> In\u00a0[8]: Copied! <pre>tao.cmd('python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x')\n</pre> tao.cmd('python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x') Out[8]: <pre>[]</pre> <p>But calling <code>.cmd_real</code> on the same command will get the data from an internal pointer:</p> In\u00a0[9]: Copied! <pre>tao.cmd_real('python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x')\n</pre> tao.cmd_real('python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x') Out[9]: <pre>array([ 0.00000000e+00,  5.50519227e-03,  8.15061849e-03,  1.68506712e-02,\n        1.30498232e-02, -1.28475438e-01, -6.17368437e-01, -1.63573126e+00,\n       -3.15361609e+00, -4.96008216e+00, -8.44394576e+00, -1.25353213e+01,\n       -1.53643077e+01, -1.93160719e+01, -2.35334256e+01, -2.86596035e+01,\n       -3.40012341e+01, -4.11157702e+01, -4.73379418e+01, -5.39309791e+01,\n       -6.08761235e+01, -6.66395259e+01, -7.38887343e+01, -8.14004767e+01,\n       -8.91380421e+01, -9.70602503e+01, -1.07067453e+02, -1.15219118e+02,\n       -1.23415239e+02, -1.31835984e+02, -1.39984608e+02, -1.48267474e+02,\n       -1.57243533e+02, -1.65204340e+02, -1.72728163e+02, -1.80184446e+02,\n       -1.85357654e+02, -1.92035945e+02, -2.00803297e+02, -2.06870811e+02,\n       -2.12665465e+02, -2.18176442e+02, -2.23048894e+02, -2.27424214e+02,\n       -2.31268351e+02, -2.34552350e+02, -2.35722776e+02, -2.38140768e+02,\n       -2.39786174e+02, -2.41460795e+02, -2.42244506e+02, -2.42601932e+02,\n       -2.42642705e+02, -2.42650645e+02, -2.42653709e+02, -2.42654860e+02,\n       -2.42659283e+02, -2.42665715e+02, -2.42598206e+02, -2.42184674e+02,\n       -2.41366882e+02, -2.39606403e+02, -2.37970183e+02, -2.35481963e+02,\n       -2.34317756e+02, -2.30993039e+02, -2.27125231e+02, -2.22727551e+02,\n       -2.17816004e+02, -2.12280141e+02, -2.06437555e+02, -2.00332917e+02,\n       -1.91531576e+02, -1.84820355e+02, -1.79653411e+02, -1.72176809e+02,\n       -1.64644374e+02, -1.56674250e+02, -1.47685973e+02, -1.39396225e+02,\n       -1.31238484e+02, -1.22815238e+02, -1.14621366e+02, -1.06478606e+02,\n       -9.64783788e+01, -8.85696847e+01, -8.08418091e+01, -7.33402427e+01,\n       -6.61118703e+01, -6.03400294e+01, -5.34245487e+01, -4.68515948e+01,\n       -4.06754335e+01, -3.36162850e+01, -2.82979320e+01, -2.32077253e+01,\n       -1.88775830e+01, -1.50782620e+01, -1.22578107e+01, -8.16225874e+00,\n       -4.68317228e+00, -2.92445682e+00, -1.48689125e+00, -5.48022495e-01,\n       -1.20827634e-01, -1.39453226e-02, -1.41528499e-02,  1.91718054e-06,\n       -5.55948643e-03, -1.54020138e-03])</pre> In\u00a0[10]: Copied! <pre>tao.orbit_at_s(s_offset=1.2)\n</pre> tao.orbit_at_s(s_offset=1.2) Out[10]: <pre>{'x': 0.0031086901274779,\n 'px': 0.0034460056817536,\n 'y': 0.000183189785860305,\n 'py': 0.000248941211797618,\n 'z': -0.0004036816716607,\n 'pz': -7.17210141039588e-06,\n 'spin': array([0., 0., 0.]),\n 'field': array([0., 0.]),\n 'phase': array([0., 0.]),\n 's': 1.2,\n 't': 4.00411569818167e-09,\n 'charge': 0.0,\n 'dt_ref': 0.0,\n 'p0c': 5288999975.31481,\n 'beta': 0.999999995332663,\n 'ix_ele': 5,\n 'state': 'Alive',\n 'direction': 1,\n 'species': 'Electron',\n 'location': 'Inside'}</pre> <p>Some commands return arrays:</p> In\u00a0[11]: Copied! <pre>tao.evaluate('data::cbar.11[1:10]|model')\n</pre> tao.evaluate('data::cbar.11[1:10]|model') Out[11]: <pre>array([ 2.81123079e-03, -1.06250116e-03,  1.37663897e-04,  3.08061468e-04,\n       -3.66558773e-04, -3.42869828e-04, -9.92518410e-06,  1.28279236e-03,\n        2.66250275e-03,  2.68364505e-03])</pre> In\u00a0[12]: Copied! <pre>s = tao.lat_list('*', 'ele.s', verbose=True)\ns[0:5]\n</pre> s = tao.lat_list('*', 'ele.s', verbose=True) s[0:5] <pre>python lat_list -array_out -track_only @&gt;&gt;*|model ele.s\n</pre> Out[12]: <pre>array([0.      , 0.      , 0.622301, 0.622301, 0.637956])</pre> <p>These particulars keys will return integers:</p> In\u00a0[13]: Copied! <pre>state = tao.lat_list('*', 'orbit.state')\nix = tao.lat_list('*', 'ele.ix_ele')\nstate.dtype, ix.dtype\n</pre> state = tao.lat_list('*', 'orbit.state') ix = tao.lat_list('*', 'ele.ix_ele') state.dtype, ix.dtype Out[13]: <pre>(dtype('&lt;i4'), dtype('&lt;i4'))</pre> <p>And this one will return a list of strings:</p> In\u00a0[14]: Copied! <pre>names = tao.lat_list('*', 'ele.name')\nnames[0:5]\n</pre> names = tao.lat_list('*', 'ele.name') names[0:5] Out[14]: <pre>['BEGINNING', 'IP_L0', 'CLEO_SOL#3', 'DET_00W', 'CLEO_SOL#4']</pre> In\u00a0[15]: Copied! <pre>%config InlineBackend.figure_format = 'retina'\nimport matplotlib.pyplot as plt\nimport numpy as np\n</pre> %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt import numpy as np <p>Simple plot of this data</p> In\u00a0[16]: Copied! <pre>plt.plot(\n    tao.lat_list('*', 'ele.s'),\n    tao.lat_list('*', 'orbit.vec.1'),\n    marker='.'\n)\n</pre> plt.plot(     tao.lat_list('*', 'ele.s'),     tao.lat_list('*', 'orbit.vec.1'),     marker='.' ) Out[16]: <pre>[&lt;matplotlib.lines.Line2D at 0x14c1cd430&gt;]</pre> <p>Be careful with the flags. The defaults are:</p> In\u00a0[17]: Copied! <pre>plt.plot(tao.lat_list('*', 'ele.s', flags='-array_out -track_only'))\n</pre> plt.plot(tao.lat_list('*', 'ele.s', flags='-array_out -track_only')) Out[17]: <pre>[&lt;matplotlib.lines.Line2D at 0x14c2e3af0&gt;]</pre> <p><code>-index_order</code> will return</p> In\u00a0[18]: Copied! <pre>plt.plot(tao.lat_list('*', 'ele.s', flags='-array_out -index_order'))\n</pre> plt.plot(tao.lat_list('*', 'ele.s', flags='-array_out -index_order')) Out[18]: <pre>[&lt;matplotlib.lines.Line2D at 0x14c36b310&gt;]</pre> In\u00a0[19]: Copied! <pre>from pytao import interface_commands\nall_cmds = [name for name in dir(interface_commands) if not name.startswith('__')]\nprint(all_cmds)\n</pre> from pytao import interface_commands all_cmds = [name for name in dir(interface_commands) if not name.startswith('__')] print(all_cmds) <pre>['beam', 'beam_init', 'bmad_com', 'branch1', 'building_wall_graph', 'building_wall_list', 'building_wall_point', 'building_wall_section', 'bunch1', 'bunch_comb', 'bunch_params', 'constraints', 'da_aperture', 'da_params', 'data', 'data_d1_array', 'data_d2', 'data_d2_array', 'data_d2_create', 'data_d2_destroy', 'data_d_array', 'data_parameter', 'data_set_design_value', 'datum_create', 'datum_has_ele', 'derivative', 'ele_ac_kicker', 'ele_cartesian_map', 'ele_chamber_wall', 'ele_control_var', 'ele_cylindrical_map', 'ele_elec_multipoles', 'ele_floor', 'ele_gen_attribs', 'ele_grid_field', 'ele_head', 'ele_lord_slave', 'ele_mat6', 'ele_methods', 'ele_multipoles', 'ele_orbit', 'ele_param', 'ele_photon', 'ele_spin_taylor', 'ele_taylor', 'ele_taylor_field', 'ele_twiss', 'ele_wake', 'ele_wall3d', 'em_field', 'enum', 'evaluate', 'floor_orbit', 'floor_plan', 'help', 'inum', 'lat_branch_list', 'lat_calc_done', 'lat_ele_list', 'lat_list', 'lat_param_units', 'matrix', 'merit', 'orbit_at_s', 'parse_tao_python_data', 'place_buffer', 'plot1', 'plot_curve', 'plot_curve_manage', 'plot_graph', 'plot_graph_manage', 'plot_histogram', 'plot_lat_layout', 'plot_line', 'plot_list', 'plot_symbol', 'plot_template_manage', 'plot_transfer', 'ptc_com', 'ring_general', 'shape_list', 'shape_manage', 'shape_pattern_list', 'shape_pattern_manage', 'shape_pattern_point_manage', 'shape_set', 'show', 'species_to_int', 'species_to_str', 'spin_polarization', 'spin_resonance', 'super_universe', 'tao_global', 'tao_parameter_dict', 'twiss_at_s', 'universe', 'var', 'var_create', 'var_general', 'var_v1_array', 'var_v1_create', 'var_v1_destroy', 'var_v_array', 'wave']\n</pre> <p>There are many commands:</p> In\u00a0[20]: Copied! <pre>len(all_cmds)\n</pre> len(all_cmds) Out[20]: <pre>104</pre> In\u00a0[21]: Copied! <pre>tao2=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot')\n</pre> tao2=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot')    <p>but internally connects to:</p> In\u00a0[22]: Copied! <pre>tao.lat_list('*', 'ele.name')\n</pre> tao.lat_list('*', 'ele.name') Out[22]: <pre>['BEGINNING',\n 'MAR.CSR',\n 'FF.PIP00B',\n 'FF.BEN01',\n 'FF.PIP01',\n 'FF.BEN02',\n 'FF.PIP02A',\n 'MAR.END',\n 'END']</pre> In\u00a0[23]: Copied! <pre>stats = tao.bunch_params('end')\nstats.keys()\n</pre> stats = tao.bunch_params('end') stats.keys() Out[23]: <pre>dict_keys(['beta_x', 'alpha_x', 'gamma_x', 'phi_x', 'eta_x', 'etap_x', 'sigma_x', 'sigma_p_x', 'emit_x', 'norm_emit_x', 'beta_y', 'alpha_y', 'gamma_y', 'phi_y', 'eta_y', 'etap_y', 'sigma_y', 'sigma_p_y', 'emit_y', 'norm_emit_y', 'beta_z', 'alpha_z', 'gamma_z', 'phi_z', 'eta_z', 'etap_z', 'sigma_z', 'sigma_p_z', 'emit_z', 'norm_emit_z', 'beta_a', 'alpha_a', 'gamma_a', 'phi_a', 'eta_a', 'etap_a', 'sigma_a', 'sigma_p_a', 'emit_a', 'norm_emit_a', 'beta_b', 'alpha_b', 'gamma_b', 'phi_b', 'eta_b', 'etap_b', 'sigma_b', 'sigma_p_b', 'emit_b', 'norm_emit_b', 'beta_c', 'alpha_c', 'gamma_c', 'phi_c', 'eta_c', 'etap_c', 'sigma_c', 'sigma_p_c', 'emit_c', 'norm_emit_c', 'sigma_11', 'sigma_12', 'sigma_13', 'sigma_14', 'sigma_15', 'sigma_16', 'sigma_21', 'sigma_22', 'sigma_23', 'sigma_24', 'sigma_25', 'sigma_26', 'sigma_31', 'sigma_32', 'sigma_33', 'sigma_34', 'sigma_35', 'sigma_36', 'sigma_41', 'sigma_42', 'sigma_43', 'sigma_44', 'sigma_45', 'sigma_46', 'sigma_51', 'sigma_52', 'sigma_53', 'sigma_54', 'sigma_55', 'sigma_56', 'sigma_61', 'sigma_62', 'sigma_63', 'sigma_64', 'sigma_65', 'sigma_66', 'rel_min_1', 'rel_max_1', 'centroid_vec_1', 'rel_min_2', 'rel_max_2', 'centroid_vec_2', 'rel_min_3', 'rel_max_3', 'centroid_vec_3', 'rel_min_4', 'rel_max_4', 'centroid_vec_4', 'rel_min_5', 'rel_max_5', 'centroid_vec_5', 'rel_min_6', 'rel_max_6', 'centroid_vec_6', 'centroid_t', 'centroid_p0c', 'centroid_beta', 'ix_ele', 'direction', 'species', 'location', 's', 'charge_live', 'n_particle_tot', 'n_particle_live', 'n_particle_lost_in_ele', 'beam_saved'])</pre> <p>Array data:</p> In\u00a0[24]: Copied! <pre>x = tao.bunch1('end', coordinate='x')\npx = tao.bunch1('end', coordinate='px')\nplt.scatter(x, px)\n</pre> x = tao.bunch1('end', coordinate='x') px = tao.bunch1('end', coordinate='px') plt.scatter(x, px) Out[24]: <pre>&lt;matplotlib.collections.PathCollection at 0x14c3eef10&gt;</pre> <p>The state will be returned as an integer array.</p> In\u00a0[25]: Copied! <pre>state = tao.bunch1('end', coordinate='state')\nstate.dtype\n</pre> state = tao.bunch1('end', coordinate='state') state.dtype Out[25]: <pre>dtype('&lt;i4')</pre> In\u00a0[26]: Copied! <pre>from pmd_beamphysics import ParticleGroup\n</pre> from pmd_beamphysics import ParticleGroup <p>This data is suitable for the <code>ParticleGroup</code> class</p> In\u00a0[27]: Copied! <pre>data = tao.bunch_data('end')\ndata.keys()\n</pre> data = tao.bunch_data('end') data.keys() Out[27]: <pre>dict_keys(['x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'])</pre> In\u00a0[28]: Copied! <pre>P = ParticleGroup(data=data)\n\nP.plot('x', 'px')\n</pre> P = ParticleGroup(data=data)  P.plot('x', 'px') <p>Tao's write format is already in the openPMD-beamphysics, so particles can be written and read in this way as well.</p> In\u00a0[29]: Copied! <pre>tao.cmd('write beam -at end test.h5')\n</pre> tao.cmd('write beam -at end test.h5') Out[29]: <pre>['[INFO] tao_write_cmd:', '    Written: test.h5']</pre> In\u00a0[30]: Copied! <pre>P2 = ParticleGroup('test.h5')\nP2.plot('x', 'px')\n</pre> P2 = ParticleGroup('test.h5') P2.plot('x', 'px') In\u00a0[31]: Copied! <pre># Cleanup\n!rm test.h5\n</pre> # Cleanup !rm test.h5 In\u00a0[32]: Copied! <pre>tao.lat_list('*', 'ele.s')\n</pre> tao.lat_list('*', 'ele.s') Out[32]: <pre>array([0.   , 0.   , 0.06 , 0.193, 0.263, 0.385, 0.445, 0.445, 0.445])</pre> In\u00a0[33]: Copied! <pre>try:\n    tao.lat_list('*', 'ele.saa')\nexcept Exception as ex:\n    print(ex)\n</pre> try:     tao.lat_list('*', 'ele.saa') except Exception as ex:     print(ex) <pre>ERROR detected: [ERROR | 2022-OCT-13 15:38:28] tao_python_cmd:\n    \"python lat_list -array_out -track_only @&gt;&gt;*|model ele.saa\": Bad {who}: ele.saa\nINVALID\n</pre> <p>This suppresses the exceptions, returning None</p> In\u00a0[34]: Copied! <pre>tao.lat_list('*', 'ele.saa', raises=False)\n</pre> tao.lat_list('*', 'ele.saa', raises=False) In\u00a0[35]: Copied! <pre>try:\n    tao.cmd('safaf')\nexcept Exception as ex:\n    print(ex)\n</pre> try:     tao.cmd('safaf') except Exception as ex:     print(ex) <pre>Command: safaf causes error: ERROR detected: [ERROR | 2022-OCT-13 15:38:28] tao_command:\n    UNRECOGNIZED COMMAND: safaf\n</pre> <p>This returns the lines</p> In\u00a0[36]: Copied! <pre>tao.cmd('safaf', raises=False)\n</pre> tao.cmd('safaf', raises=False) Out[36]: <pre>['[ERROR | 2022-OCT-13 15:38:28] tao_command:',\n '    UNRECOGNIZED COMMAND: safaf']</pre> In\u00a0[37]: Copied! <pre>import logging\nimport sys\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n</pre> import logging import sys logging.basicConfig(stream=sys.stdout, level=logging.DEBUG) In\u00a0[38]: Copied! <pre>tao.cmd('sho ele 2');\n</pre> tao.cmd('sho ele 2'); <pre>DEBUG:pytao.tao_ctypes.core:Tao&gt; sho ele 2\n</pre> In\u00a0[39]: Copied! <pre>!rm csr_wake.dat\n</pre> !rm csr_wake.dat"},{"location":"examples/basic/#pytao-basics","title":"PyTao Basics\u00b6","text":""},{"location":"examples/basic/#inititialize-tao","title":"Inititialize Tao\u00b6","text":"<p><code>Tao</code> is the basic object. Anything used to initialize Tao on the command line can be used to initialize a Tao object</p>"},{"location":"examples/basic/#send-a-command","title":"Send a command\u00b6","text":"<p>Anything that you would normally type at a Tao&gt; prompt can be sent as a string. The return is a list of output strings. To send a command:</p>"},{"location":"examples/basic/#jupyter-magic-tao","title":"Jupyter magic %%tao\u00b6","text":""},{"location":"examples/basic/#interface-commands","title":"Interface commands\u00b6","text":"<p>Output above from the <code>show</code> command is designed to be human-readable. In general you should not try to parse these strings for data. For data, Tao has a special set of commands to send back data suitable for parsing in Python (or other software).</p> <p>Below are the raw commands.</p>"},{"location":"examples/basic/#tao-method-commands","title":"Tao method commands\u00b6","text":"<p>For convenience, all of these commands are available as methods of the Tao class, and automatically parse the output.</p> <p>For example, to get the orbit at an <code>s</code> position:</p>"},{"location":"examples/basic/#lat_list","title":"lat_list\u00b6","text":"<p><code>lat_list</code> can be used to efficiently extract array data. By default this returns an array of floats:</p>"},{"location":"examples/basic/#all-method-commands","title":"All method commands\u00b6","text":"<p>There are many method commands. Please explore the documentation to find the ones that will best suit your needs.</p>"},{"location":"examples/basic/#other-tao-instances","title":"Other Tao instances\u00b6","text":"<p>Unfortunately there can only be one Tao instance per process, because the internal structures are held in memory and accessed via ctypes. So this will replace the current Tao session in memory.</p> <p>This looks like a new object:</p>"},{"location":"examples/basic/#bunch-data","title":"Bunch data\u00b6","text":"<p>This example has bunch data. There are three methods:</p> <ul> <li><p><code>tao.bunch_params</code> to get a dict of statistical data</p> </li> <li><p><code>tao.bunch1</code> to get coordinate data arrays</p> </li> <li><p><code>tao.bunch_data</code> to get a dict of many coordinate arrays. These can be used to instantiate a ParticleGroup object from the openPMD-beamphysics package.</p> </li> </ul> <p>Statistical data:</p>"},{"location":"examples/basic/#particlegroup-from-openpmd-beamphysics","title":"ParticleGroup from openPMD-beamphysics\u00b6","text":"<p>openPMD-beamphysics is an external package that can be useful for further bunch analysis, plotting, and conversion.</p> <p>https://github.com/ChristopherMayes/openPMD-beamphysics</p> <p>Here is example usage to extract bunch data and instantiate as a <code>ParticleGroup</code> object.</p> <p>Note that the momentum units in openPMD-beamphysics are in eV/c, whereas Bmad's momenta are normalized by a refrence momentum.</p>"},{"location":"examples/basic/#error-handling-and-debugging","title":"Error handling and Debugging\u00b6","text":"<p>All methods have a <code>raises=True</code> option. This will raise a RuntimeError if any errors are seen from Tao.</p>"},{"location":"examples/basic/#logging","title":"Logging\u00b6","text":"<p>All input commands are recorded as debug messages using standard Python logging.</p> <p>Enable stdout to see the log messages:</p>"},{"location":"examples/basic/#cleanup","title":"Cleanup\u00b6","text":""},{"location":"examples/bunch/","title":"Bunch Commands","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>%config InlineBackend.figure_format = 'retina' # Nicer plotting\nimport numpy as np\nimport matplotlib.pyplot as plt\n</pre> %config InlineBackend.figure_format = 'retina' # Nicer plotting import numpy as np import matplotlib.pyplot as plt In\u00a0[3]: Copied! <pre>tao=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot')\n</pre> tao=Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot')    In\u00a0[4]: Copied! <pre>stats = tao.bunch_params('end')\nstats\n</pre> stats = tao.bunch_params('end') stats Out[4]: <pre>{'twiss_beta_x': 0.301344571266128,\n 'twiss_alpha_x': -2.15210497361385,\n 'twiss_gamma_x': 18.6880944753441,\n 'twiss_phi_x': 0.0,\n 'twiss_eta_x': -0.0481939319240897,\n 'twiss_etap_x': -0.454973392190619,\n 'twiss_sigma_x': 6.05472920750718e-05,\n 'twiss_sigma_p_x': 0.000476810212736378,\n 'twiss_emit_x': 1.21653911408495e-08,\n 'twiss_norm_emit_x': 9.99817439089453e-07,\n 'twiss_beta_y': 0.40783204160816,\n 'twiss_alpha_y': 1.94408133190082,\n 'twiss_gamma_y': 11.719168033485,\n 'twiss_phi_y': 0.0,\n 'twiss_eta_y': -0.0457317680186297,\n 'twiss_etap_y': 0.0263984769531296,\n 'twiss_sigma_y': 7.04370887189116e-05,\n 'twiss_sigma_p_y': 0.000377580116845047,\n 'twiss_emit_y': 1.21652615808021e-08,\n 'twiss_norm_emit_y': 9.99806791146173e-07,\n 'twiss_beta_z': 95.8242541991128,\n 'twiss_alpha_z': -1.24059179279425,\n 'twiss_gamma_z': 0.0264971328769493,\n 'twiss_phi_z': 0.0,\n 'twiss_eta_z': 0.0,\n 'twiss_etap_z': 0.0,\n 'twiss_sigma_z': 0.000899458451089799,\n 'twiss_sigma_p_z': 1.49569425173884e-05,\n 'twiss_emit_z': 8.44280513319509e-09,\n 'twiss_norm_emit_z': 6.93875248996962e-07,\n 'twiss_beta_a': 0.248530085331005,\n 'twiss_alpha_a': -1.77499320489309,\n 'twiss_gamma_a': 15.4136110252092,\n 'twiss_phi_a': 0.0,\n 'twiss_eta_a': 0.00124844704286057,\n 'twiss_etap_a': 0.0111101590168622,\n 'twiss_sigma_a': 0.0,\n 'twiss_sigma_p_a': 0.0,\n 'twiss_emit_a': 1.21664545105205e-08,\n 'twiss_norm_emit_a': 9.99904832542642e-07,\n 'twiss_beta_b': 0.335544868515057,\n 'twiss_alpha_b': 1.59897669921574,\n 'twiss_gamma_b': 9.63845045654778,\n 'twiss_phi_b': 0.0,\n 'twiss_eta_b': 0.00454529158526128,\n 'twiss_etap_b': -0.0218933442291171,\n 'twiss_sigma_b': 0.0,\n 'twiss_sigma_p_b': 0.0,\n 'twiss_emit_b': 1.21741461356351e-08,\n 'twiss_norm_emit_b': 1.00053697176739e-06,\n 'twiss_beta_c': 95.7148956246458,\n 'twiss_alpha_c': -1.2389734965013,\n 'twiss_gamma_c': 0.0264430499032274,\n 'twiss_phi_c': 0.0,\n 'twiss_eta_c': 1.2389734965013,\n 'twiss_etap_c': 0.0264430499032274,\n 'twiss_sigma_c': 0.0,\n 'twiss_sigma_p_c': 0.0,\n 'twiss_emit_c': 8.43349923229653e-09,\n 'twiss_norm_emit_c': 6.93110439884201e-07,\n 'sigma_11': 3.66649417909144e-09,\n 'sigma_12': 2.61861040625002e-08,\n 'sigma_13': -1.48398138752216e-13,\n 'sigma_14': -4.74391717589424e-14,\n 'sigma_15': -4.67916776621502e-10,\n 'sigma_16': -1.07814707503323e-11,\n 'sigma_21': 2.61861040625002e-08,\n 'sigma_22': 2.27394287142704e-07,\n 'sigma_23': -1.40343913297772e-12,\n 'sigma_24': 4.92122677207163e-14,\n 'sigma_25': -4.44903635737789e-09,\n 'sigma_26': -1.01782156471668e-10,\n 'sigma_31': -1.48398138752216e-13,\n 'sigma_32': -1.40343913297772e-12,\n 'sigma_33': 4.96185133335392e-09,\n 'sigma_34': -2.36505280107631e-08,\n 'sigma_35': 1.51286568415934e-13,\n 'sigma_36': -1.02306597442692e-11,\n 'sigma_41': -4.74391717589424e-14,\n 'sigma_42': 4.92122677207163e-14,\n 'sigma_43': -2.36505280107631e-08,\n 'sigma_44': 1.42566900535742e-07,\n 'sigma_45': -3.27450023921361e-13,\n 'sigma_46': 5.90560669695479e-12,\n 'sigma_51': -4.67916776621502e-10,\n 'sigma_52': -4.44903635737789e-09,\n 'sigma_53': 1.51286568415934e-13,\n 'sigma_54': -3.27450023921361e-13,\n 'sigma_55': 8.09025505236861e-07,\n 'sigma_56': 1.0474074756403e-08,\n 'sigma_61': -1.07814707503323e-11,\n 'sigma_62': -1.01782156471668e-10,\n 'sigma_63': -1.02306597442692e-11,\n 'sigma_64': 5.90560669695479e-12,\n 'sigma_65': 1.0474074756403e-08,\n 'sigma_66': 2.2371012946846e-10,\n 'rel_min_1': -0.000190703788737589,\n 'rel_max_1': 0.000175099474147119,\n 'centroid_vec_1': -1.0077897456586e-07,\n 'rel_min_2': -0.00145920753512278,\n 'rel_max_2': 0.00133407063334133,\n 'centroid_vec_2': -9.21157518145313e-07,\n 'rel_min_3': -0.000205532005074851,\n 'rel_max_3': 0.000204275481451832,\n 'centroid_vec_3': 5.35418306356941e-13,\n 'rel_min_4': -0.00119689779899842,\n 'rel_max_4': 0.00125449039844888,\n 'centroid_vec_4': -2.53681610104627e-11,\n 'rel_min_5': -0.00261715445721329,\n 'rel_max_5': 0.00278367096446691,\n 'centroid_vec_5': -7.53655670445237e-08,\n 'rel_min_6': -1.6798314003975e-05,\n 'rel_max_6': 2.8011707294875e-05,\n 'centroid_vec_6': -5.77005927461274e-06,\n 'centroid_t': 1.48447035006252e-09,\n 'centroid_p0c': 41996891.3143949,\n 'centroid_beta': 0.999925982822,\n 'ix_ele': 8,\n 'direction': 1,\n 'species': 'Electron',\n 'location': 'Downstream_End',\n 's': 0.444999999999986,\n 't': 1.48447035006252e-09,\n 'sigma_t': 3.00049253444132e-12,\n 'charge_live': 7.70000000000011e-11,\n 'n_particle_tot': 1000,\n 'n_particle_live': 1000,\n 'n_particle_lost_in_ele': 0,\n 'beam_saved': True}</pre> <p>This says that the full beam is saved at this element</p> In\u00a0[5]: Copied! <pre>stats['beam_saved']\n</pre> stats['beam_saved'] Out[5]: <pre>True</pre> In\u00a0[6]: Copied! <pre>tao.bunch1('end', 'x')[0:10]\n</pre> tao.bunch1('end', 'x')[0:10] Out[6]: <pre>array([-1.69327762e-07, -4.58088151e-06,  4.46517206e-06, -1.72815751e-06,\n        9.38761727e-06,  5.93297413e-05, -6.70659004e-05,  4.15474873e-05,\n       -7.45202256e-05,  5.06597769e-05])</pre> In\u00a0[7]: Copied! <pre>tao.bunch1('end', 'ix_ele')[0:10]\n</pre> tao.bunch1('end', 'ix_ele')[0:10] Out[7]: <pre>array([8, 8, 8, 8, 8, 8, 8, 8, 8, 8], dtype=int32)</pre> In\u00a0[8]: Copied! <pre>import matplotlib.pyplot as plt\n%matplotlib inline\n</pre> import matplotlib.pyplot as plt %matplotlib inline In\u00a0[9]: Copied! <pre>xdat = tao.bunch1('end', 'x')\npxdat = tao.bunch1('end', 'px')\nchargedat = tao.bunch1('end', 'charge')\n\nxdata = 1000*xdat\nydata = 1000*pxdat\nweights = chargedat\n</pre> xdat = tao.bunch1('end', 'x') pxdat = tao.bunch1('end', 'px') chargedat = tao.bunch1('end', 'charge')  xdata = 1000*xdat ydata = 1000*pxdat weights = chargedat In\u00a0[10]: Copied! <pre># hist2d\n\nmycmap = plt.get_cmap('plasma') # viridis plasma inferno magma and _r versions\nmycmap.set_under(color='white') # map 0 to this color\nmyvmin = 1e-30 # something tiny\n# Bin particles\nplt.hist2d(x=1000*xdata, y=ydata,  bins=2*[40], weights=weights, cmap=mycmap, vmin=myvmin)\nplt.xlabel('x (mm)')\nplt.ylabel('px (mrad)')\nplt.show()\n</pre> # hist2d  mycmap = plt.get_cmap('plasma') # viridis plasma inferno magma and _r versions mycmap.set_under(color='white') # map 0 to this color myvmin = 1e-30 # something tiny # Bin particles plt.hist2d(x=1000*xdata, y=ydata,  bins=2*[40], weights=weights, cmap=mycmap, vmin=myvmin) plt.xlabel('x (mm)') plt.ylabel('px (mrad)') plt.show() <p>Numpy histogram 2d, with custom color map</p> In\u00a0[11]: Copied! <pre>import matplotlib.colors as colors\n\nmycmap = plt.get_cmap('viridis') # viridis plasma inferno magma and _r versions\nmycmap.set_under(color='white') # map 0 to this color\nH, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)\n\nxmin, xmax = min(xedges), max(xedges)\nymin, ymax = min(yedges), max(yedges)\n\nimage = np.flip(H.T, axis=0) # \nimax = np.max(image)\nnorm=colors.Normalize(vmin=1e-12*imax, vmax=imax)\nplt.xlabel('x (mm)')\nplt.ylabel('px (mrad)')\nplt.imshow(image, cmap=mycmap, norm=norm, extent=[xmin, xmax, ymin, ymax], aspect='auto')\n</pre> import matplotlib.colors as colors  mycmap = plt.get_cmap('viridis') # viridis plasma inferno magma and _r versions mycmap.set_under(color='white') # map 0 to this color H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)  xmin, xmax = min(xedges), max(xedges) ymin, ymax = min(yedges), max(yedges)  image = np.flip(H.T, axis=0) #  imax = np.max(image) norm=colors.Normalize(vmin=1e-12*imax, vmax=imax) plt.xlabel('x (mm)') plt.ylabel('px (mrad)') plt.imshow(image, cmap=mycmap, norm=norm, extent=[xmin, xmax, ymin, ymax], aspect='auto') Out[11]: <pre>&lt;matplotlib.image.AxesImage at 0x1440709e0&gt;</pre> In\u00a0[12]: Copied! <pre>np.min(image), np.max(image)\n</pre> np.min(image), np.max(image) Out[12]: <pre>(0.0, 8.469999999999999e-13)</pre> In\u00a0[13]: Copied! <pre>from bokeh.plotting import figure, show, output_notebook\nfrom bokeh import palettes, colors\nfrom bokeh.models import ColumnDataSource, HoverTool\noutput_notebook(verbose=False, hide_banner=True)\n\npal = palettes.Viridis[256]\n#white=colors.named.white\n#pal[0] = white # replace 0 with white\n</pre> from bokeh.plotting import figure, show, output_notebook from bokeh import palettes, colors from bokeh.models import ColumnDataSource, HoverTool output_notebook(verbose=False, hide_banner=True)  pal = palettes.Viridis[256] #white=colors.named.white #pal[0] = white # replace 0 with white In\u00a0[14]: Copied! <pre>H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)\nxmin, xmax = min(xedges), max(xedges)\nymin, ymax = min(yedges), max(yedges)\n</pre> H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40) xmin, xmax = min(xedges), max(xedges) ymin, ymax = min(yedges), max(yedges) In\u00a0[15]: Copied! <pre>ds = ColumnDataSource(data=dict(image=[H.transpose()]))   \np = figure(x_range=[xmin, xmax], y_range=[ymin, ymax], title='Bunch at end', \n           x_axis_label='x (mm)', y_axis_label='px (mrad)',\n           width=500, height=500)\np.image(image='image', source=ds, \n    x=xmin, y=ymin, dw=xmax-xmin, dh=ymax-ymin, palette=pal)\nshow(p)\n</pre> ds = ColumnDataSource(data=dict(image=[H.transpose()]))    p = figure(x_range=[xmin, xmax], y_range=[ymin, ymax], title='Bunch at end',             x_axis_label='x (mm)', y_axis_label='px (mrad)',            width=500, height=500) p.image(image='image', source=ds,      x=xmin, y=ymin, dw=xmax-xmin, dh=ymax-ymin, palette=pal) show(p) In\u00a0[16]: Copied! <pre>data = tao.bunch_data('end')\ndata.keys()\n</pre> data = tao.bunch_data('end') data.keys() Out[16]: <pre>dict_keys(['x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'])</pre> In\u00a0[17]: Copied! <pre>from pmd_beamphysics import ParticleGroup\n\nP = ParticleGroup(data=data)\nP\n</pre> from pmd_beamphysics import ParticleGroup  P = ParticleGroup(data=data) P Out[17]: <pre>&lt;ParticleGroup with 1000 particles at 0x16c388fb0&gt;</pre> In\u00a0[18]: Copied! <pre>P.plot('x', 'px')\n</pre> P.plot('x', 'px') In\u00a0[19]: Copied! <pre>P.twiss('xy')\n</pre> P.twiss('xy') Out[19]: <pre>{'alpha_x': -2.1521049736138544,\n 'beta_x': 0.3013428324900916,\n 'gamma_x': 18.688202307379118,\n 'emit_x': 1.2177638975257695e-08,\n 'eta_x': -0.04819365384510438,\n 'etap_x': -0.4549733922149835,\n 'norm_emit_x': 1.0008240321607808e-06,\n 'alpha_y': 1.9440813319008459,\n 'beta_y': 0.40782968839310874,\n 'gamma_y': 11.719235654169523,\n 'emit_y': 1.2177509284772322e-08,\n 'eta_y': -0.04573150414457775,\n 'etap_y': 0.026398476953048353,\n 'norm_emit_y': 1.0008133734974086e-06}</pre> In\u00a0[20]: Copied! <pre>tao.bunch_comb('x')\n</pre> tao.bunch_comb('x') Out[20]: <pre>array([ 3.70284435e-22,  1.52112706e-14,  3.04225407e-14,  4.56338110e-14,\n        6.08450813e-14,  7.60563516e-14,  9.12676217e-14, -1.16282940e-09,\n       -1.14870454e-09, -1.12526206e-09, -1.09261268e-09, -1.05084624e-09,\n       -9.99970453e-10, -9.39813419e-10, -8.69809925e-10, -7.88320099e-10,\n       -6.91745919e-10, -5.74407015e-10, -4.27876634e-10,  1.42339073e-09,\n        1.63091681e-09,  1.83850625e-09,  2.04615922e-09,  2.25387404e-09,\n        2.46164780e-09,  2.66947691e-09,  2.87735726e-09,  9.86158250e-09,\n        9.32199246e-09,  8.20091852e-09,  6.43516375e-09,  3.96715881e-09,\n        7.44494068e-10, -3.28054979e-09, -8.15630332e-09, -1.39318757e-08,\n       -2.06607116e-08, -2.83988809e-08, -4.55143879e-08, -5.47252817e-08,\n       -6.39361217e-08, -7.31469081e-08, -8.23576435e-08, -9.15683309e-08,\n       -1.00778975e-07])</pre> <p>Make a nice plot with the beam envelope</p> In\u00a0[21]: Copied! <pre>s = tao.bunch_comb('s')\nmean_x = tao.bunch_comb('x')\nmax_x = mean_x + tao.bunch_comb('rel_max.1')\nmin_x = mean_x + tao.bunch_comb('rel_min.1')\nsigma_x = np.sqrt(tao.bunch_comb('sigma.11'))\nfig, ax = plt.subplots()\n\nax.fill_between(s, min_x, max_x, alpha=0.2)\nax.plot(s, sigma_x, label=r'$+\\sigma_x$')\nax.plot(s, mean_x, label=r'$&lt;x&gt;$', marker='.')\nax.plot(s, -sigma_x, label=r'$-\\sigma_x$')\nax.set_xlabel('s (m)')\nax.set_ylabel('beam sizes (m)')\nplt.legend()\n</pre> s = tao.bunch_comb('s') mean_x = tao.bunch_comb('x') max_x = mean_x + tao.bunch_comb('rel_max.1') min_x = mean_x + tao.bunch_comb('rel_min.1') sigma_x = np.sqrt(tao.bunch_comb('sigma.11')) fig, ax = plt.subplots()  ax.fill_between(s, min_x, max_x, alpha=0.2) ax.plot(s, sigma_x, label=r'$+\\sigma_x$') ax.plot(s, mean_x, label=r'$$', marker='.') ax.plot(s, -sigma_x, label=r'$-\\sigma_x$') ax.set_xlabel('s (m)') ax.set_ylabel('beam sizes (m)') plt.legend()  Out[21]: <pre>&lt;matplotlib.legend.Legend at 0x16cad3890&gt;</pre> <p>Beam betas</p> In\u00a0[22]: Copied! <pre>plt.plot(tao.bunch_comb('s'), 1000*tao.bunch_comb('x.beta'), label='beam beta_x')\nplt.plot(tao.bunch_comb('s'), 1000*tao.bunch_comb('y.beta'), label='beam beta_y')\nplt.xlabel('s (m)')\nplt.ylabel('beam Twiss beta (m)')\nplt.legend()\n</pre> plt.plot(tao.bunch_comb('s'), 1000*tao.bunch_comb('x.beta'), label='beam beta_x') plt.plot(tao.bunch_comb('s'), 1000*tao.bunch_comb('y.beta'), label='beam beta_y') plt.xlabel('s (m)') plt.ylabel('beam Twiss beta (m)') plt.legend() Out[22]: <pre>&lt;matplotlib.legend.Legend at 0x16cb96270&gt;</pre>"},{"location":"examples/bunch/#bunch-commands","title":"Bunch Commands\u00b6","text":""},{"location":"examples/bunch/#initialize-tao-on-the-csr-beam-tracking-example","title":"Initialize Tao on the CSR beam tracking example\u00b6","text":""},{"location":"examples/bunch/#bunch_params","title":"bunch_params\u00b6","text":"<p>Bunch statistics can be retrieved from any element as a dict.</p>"},{"location":"examples/bunch/#bunch1","title":"bunch1\u00b6","text":"<p>Array data from a bunch can be retrieved. Available coordinates are:</p> <p>x, px, y, py, z, pz, s, t, charge, p0c, state, ix_ele</p> <p>Appropriate data types are returned</p>"},{"location":"examples/bunch/#plot-in-matplotlib","title":"Plot in matplotlib\u00b6","text":"<p>This can be used to plot particles.</p>"},{"location":"examples/bunch/#plot-in-bokeh","title":"Plot in Bokeh\u00b6","text":""},{"location":"examples/bunch/#data-for-particlegroup","title":"Data for ParticleGroup\u00b6","text":"<p>The above commands have been packaged into two functions for easier use, and to easily create ParticleGroup objects</p>"},{"location":"examples/bunch/#bunch_comb","title":"bunch_comb\u00b6","text":""},{"location":"examples/fodo/","title":"FODO optics","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n%config InlineBackend.figure_format = 'retina'\n</pre> from pytao import Tao import numpy as np import matplotlib.pyplot as plt import os %config InlineBackend.figure_format = 'retina' In\u00a0[2]: Copied! <pre>tao = Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad -noplot')\n</pre> tao = Tao('-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad -noplot') In\u00a0[3]: Copied! <pre>def add_info(d):\n    twiss1 = tao.ele_twiss('q1')\n    twiss2 = tao.ele_twiss('q2')\n\n    d['mean_beta_a'] = (twiss1['beta_a'] +  twiss2['beta_a'])/2\n    d['mean_beta_b'] = (twiss1['beta_b'] +  twiss2['beta_b'])/2\n    d['phi_a'] = twiss2['phi_a']\n    d['phi_b'] = twiss2['phi_b']\n    return d\n</pre> def add_info(d):     twiss1 = tao.ele_twiss('q1')     twiss2 = tao.ele_twiss('q2')      d['mean_beta_a'] = (twiss1['beta_a'] +  twiss2['beta_a'])/2     d['mean_beta_b'] = (twiss1['beta_b'] +  twiss2['beta_b'])/2     d['phi_a'] = twiss2['phi_a']     d['phi_b'] = twiss2['phi_b']     return d In\u00a0[4]: Copied! <pre>%%tao\nsho lat\n</pre> %%tao sho lat <pre>-------------------------\nTao&gt; sho lat\n# Values shown are for the Exit End of each Element:\n# Index  name      key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                            a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n      0  BEGINNING Beginning_Ele         0.000     ---    0.67   0.000   0.00   0.000    3.22   0.000   0.00   0.000  Alive\n      1  P1        Pipe                  0.900   0.900    3.22   0.105   0.00   0.000    0.67   0.105   0.00   0.000  Alive\n      2  Q1        Quadrupole            1.000   0.100    3.22   0.110   0.00   0.000    0.67   0.129   0.00   0.000  Alive\n      3  P1        Pipe                  1.900   0.900    0.67   0.215   0.00   0.000    3.22   0.235   0.00   0.000  Alive\n      4  Q2        Quadrupole            2.000   0.100    0.67   0.239   0.00   0.000    3.22   0.239   0.00   0.000  Alive\n      5  END       Marker                2.000   0.000    0.67   0.239   0.00   0.000    3.22   0.239   0.00   0.000  Alive\nLord Elements:\n      6  O_L       Overlay               1.900     ---    0.67   0.215   0.00     ---    3.22   0.235   0.00     ---  Not_Set\n# Index  name      key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                            a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n# Values shown are for the Exit End of each Element:\n-------------------------\nTao&gt; \n</pre> In\u00a0[5]: Copied! <pre>def set_kx(k1):\n    cmds = [f'set ele q1 k1 = {k1}',\n            f'set ele q2 k1 = {-k1}']\n    \n    d = {}\n    try:\n        tao.cmds(cmds)\n        tao.cmd('set global lattice_calc_on = T')\n        d['good'] = True\n        add_info(d)\n    except:\n        d['good'] = False\n    \n    \n    \n    return d\nx = set_kx(1.4142136E+01)\nKEYS = x.keys()\nx\n</pre> def set_kx(k1):     cmds = [f'set ele q1 k1 = {k1}',             f'set ele q2 k1 = {-k1}']          d = {}     try:         tao.cmds(cmds)         tao.cmd('set global lattice_calc_on = T')         d['good'] = True         add_info(d)     except:         d['good'] = False                    return d x = set_kx(1.4142136E+01) KEYS = x.keys() x Out[5]: <pre>{'good': True,\n 'mean_beta_a': 1.9442223177869156,\n 'mean_beta_b': 1.9442223177869151,\n 'phi_a': 1.50388821541239,\n 'phi_b': 1.5038882154124}</pre> In\u00a0[6]: Copied! <pre># Scan k1\nn1 = 20\nqvec1 = np.linspace(1, 25, n1)\n\nRESULTS = []\n\n#tao.cmd('set global plot_on = F')\nfor k in qvec1:\n    res = set_kx(k)\n    RESULTS.append(res)    \n#tao.cmd('set global plot_on = T')\n</pre> # Scan k1 n1 = 20 qvec1 = np.linspace(1, 25, n1)  RESULTS = []  #tao.cmd('set global plot_on = F') for k in qvec1:     res = set_kx(k)     RESULTS.append(res)     #tao.cmd('set global plot_on = T') In\u00a0[7]: Copied! <pre># Reshape data\nDAT = {}\nfor key in KEYS:\n    print(key)\n    x = []\n    for res in RESULTS:\n        if key in res:\n            x.append(res[key])\n        else:\n            x.append(np.nan)\n    DAT[key] = np.array(x)\n</pre> # Reshape data DAT = {} for key in KEYS:     print(key)     x = []     for res in RESULTS:         if key in res:             x.append(res[key])         else:             x.append(np.nan)     DAT[key] = np.array(x)             <pre>good\nmean_beta_a\nmean_beta_b\nphi_a\nphi_b\n</pre> In\u00a0[8]: Copied! <pre>DAT.keys()\n</pre> DAT.keys() Out[8]: <pre>dict_keys(['good', 'mean_beta_a', 'mean_beta_b', 'phi_a', 'phi_b'])</pre> In\u00a0[9]: Copied! <pre>for key in KEYS:\n    plt.plot(qvec1, DAT[key])\n    plt.ylabel(key)\n    plt.xlabel(r'k1 (m$^{-2}$)')\n    plt.show()\n</pre> for key in KEYS:     plt.plot(qvec1, DAT[key])     plt.ylabel(key)     plt.xlabel(r'k1 (m$^{-2}$)')     plt.show() In\u00a0[10]: Copied! <pre>def set_k(k1, k2):\n    cmds = [f'set ele q1 k1 = {k1}', f'set ele q2 k1 = {-k2}']\n    \n    d = {}\n    try:\n        tao.cmds(cmds)\n        tao.cmd('set global lattice_calc_on = T')\n        d['good'] = True\n        add_info(d)\n    except:\n        d['good'] = False\n    \n    \n    \n    return d\nx = set_k(1.4142136E+01, 1.4142136E+01)\nKEYS = x.keys()\nx\n</pre> def set_k(k1, k2):     cmds = [f'set ele q1 k1 = {k1}', f'set ele q2 k1 = {-k2}']          d = {}     try:         tao.cmds(cmds)         tao.cmd('set global lattice_calc_on = T')         d['good'] = True         add_info(d)     except:         d['good'] = False                    return d x = set_k(1.4142136E+01, 1.4142136E+01) KEYS = x.keys() x Out[10]: <pre>{'good': True,\n 'mean_beta_a': 1.9442223177869156,\n 'mean_beta_b': 1.9442223177869151,\n 'phi_a': 1.50388821541239,\n 'phi_b': 1.5038882154124}</pre> In\u00a0[11]: Copied! <pre>set_k(1,1)\n</pre> set_k(1,1) Out[11]: <pre>{'good': True,\n 'mean_beta_a': 20.723056201983,\n 'mean_beta_b': 20.7230562019829,\n 'phi_a': 0.0966467384116863,\n 'phi_b': 0.096646738411687}</pre> In\u00a0[12]: Copied! <pre>n1 = 50\nn2 = 60\nqvec1 = np.linspace(1, 15, n1)\nqvec2 = np.linspace(1, 15, n2)\nK1, K2 = np.meshgrid(qvec1, qvec2, indexing='ij')\n\nfK1 = K1.flatten()\nfK2 = K2.flatten()\n</pre> n1 = 50 n2 = 60 qvec1 = np.linspace(1, 15, n1) qvec2 = np.linspace(1, 15, n2) K1, K2 = np.meshgrid(qvec1, qvec2, indexing='ij')  fK1 = K1.flatten() fK2 = K2.flatten() In\u00a0[13]: Copied! <pre>%%time\n# Make data\n\ntao.cmd('set global plot_on = F')\n\nRESULTS = []\nfor k1, k2 in zip(fK1, fK2):\n    res = set_k(k1, k2)\n#    print(res)\n    RESULTS.append(res)\n\n    \n#tao.cmd('set global plot_on = T')\n</pre> %%time # Make data  tao.cmd('set global plot_on = F')  RESULTS = [] for k1, k2 in zip(fK1, fK2):     res = set_k(k1, k2) #    print(res)     RESULTS.append(res)       #tao.cmd('set global plot_on = T') <pre>CPU times: user 1.1 s, sys: 627 ms, total: 1.73 s\nWall time: 1.91 s\n</pre> In\u00a0[14]: Copied! <pre># Reshape data\nDAT = {}\nfor key in RESULTS[0]:\n    print(key)\n    x = []\n    for res in RESULTS:\n        if key in res:\n            x.append(res[key])\n        else:\n            x.append(np.nan)\n        \n    DAT[key] = np.array(x).reshape(n1, n2)\n</pre> # Reshape data DAT = {} for key in RESULTS[0]:     print(key)     x = []     for res in RESULTS:         if key in res:             x.append(res[key])         else:             x.append(np.nan)              DAT[key] = np.array(x).reshape(n1, n2) <pre>good\nmean_beta_a\nmean_beta_b\nphi_a\nphi_b\n</pre> In\u00a0[15]: Copied! <pre>NICE = {}\nNICE['mean_beta_a'] = r'$&lt;\\beta_x&gt;$'\nNICE['mean_beta_b'] = r'$&lt;\\beta_y&gt;$'\ndef nice(key):\n    if key in NICE:\n        return NICE[key]\n    return key\n</pre> NICE = {} NICE['mean_beta_a'] = r'$&lt;\\beta_x&gt;$' NICE['mean_beta_b'] = r'$&lt;\\beta_y&gt;$' def nice(key):     if key in NICE:         return NICE[key]     return key In\u00a0[16]: Copied! <pre>#fig, ax = plt.subplots(figsize=(10,8))\n\ndef plot1(key):\n    plt.imshow(DAT[key], origin='lower',\n               extent=[qvec1.min(), qvec1.max(), qvec2.min(), qvec2.max()], \n               cmap='jet',\n              vmax = 10)\n    plt.xlabel('Q1 (+)k1 (1/m$^2$)')\n    plt.ylabel('Q2 (-)k1 (1/m$^2$)')\n    plt.colorbar(label=nice(key))\n    plt.show()\nplot1('mean_beta_a')\nplot1('mean_beta_b')\n</pre> #fig, ax = plt.subplots(figsize=(10,8))  def plot1(key):     plt.imshow(DAT[key], origin='lower',                extent=[qvec1.min(), qvec1.max(), qvec2.min(), qvec2.max()],                 cmap='jet',               vmax = 10)     plt.xlabel('Q1 (+)k1 (1/m$^2$)')     plt.ylabel('Q2 (-)k1 (1/m$^2$)')     plt.colorbar(label=nice(key))     plt.show() plot1('mean_beta_a') plot1('mean_beta_b') In\u00a0[17]: Copied! <pre>def optimize(beta_a, beta_b):\n    cmds = f\"\"\"\nalias setbetas\nveto var *\nset lattice model=design\nveto dat *\nuse dat fodo.betas[1,2]\nset dat fodo.betas[1]|meas={beta_a}\nset dat fodo.betas[2]|meas={beta_b}\nuse var quad\nrun\nshow var -bmad -good\n    \"\"\"\n    lines = tao.cmds(cmds.split('\\n'), suppress_lattice_calc=False, suppress_plotting=False, raises=False)\n    \n    # Twiss at Q1\n    T = tao.ele_twiss('Q1')\n    return T\noptimize(10, 20)\n</pre> def optimize(beta_a, beta_b):     cmds = f\"\"\" alias setbetas veto var * set lattice model=design veto dat * use dat fodo.betas[1,2] set dat fodo.betas[1]|meas={beta_a} set dat fodo.betas[2]|meas={beta_b} use var quad run show var -bmad -good     \"\"\"     lines = tao.cmds(cmds.split('\\n'), suppress_lattice_calc=False, suppress_plotting=False, raises=False)          # Twiss at Q1     T = tao.ele_twiss('Q1')     return T optimize(10, 20)     Out[17]: <pre>{'mode_flip': False,\n 'beta_a': 19.8980601747808,\n 'alpha_a': 20.8824960367293,\n 'gamma_a': 21.9658919957421,\n 'phi_a': 0.688888454799636,\n 'eta_a': 0.0,\n 'etap_a': 0.0,\n 'beta_b': 8.56179989648874,\n 'alpha_b': -8.68869255013973,\n 'gamma_b': 8.93426372440964,\n 'phi_b': 0.0669702646497206,\n 'eta_b': 0.0,\n 'etap_b': 0.0,\n 'eta_x': 0.0,\n 'etap_x': 0.0,\n 'eta_y': 0.0,\n 'etap_y': 0.0}</pre> In\u00a0[18]: Copied! <pre># Check merit\ntao.merit()\n</pre> # Check merit tao.merit() Out[18]: <pre>['  1.76010645172912E-24']</pre> In\u00a0[19]: Copied! <pre># Check that the optimization worked\naverage_beta_a = tao.data('fodo', 'betas', dat_index=1)['model_value']\naverage_beta_b = tao.data('fodo', 'betas', dat_index=2)['model_value']\naverage_beta_a, average_beta_b\n</pre> # Check that the optimization worked average_beta_a = tao.data('fodo', 'betas', dat_index=1)['model_value'] average_beta_b = tao.data('fodo', 'betas', dat_index=2)['model_value'] average_beta_a, average_beta_b Out[19]: <pre>(10.0000000000001, 20.0000000000004)</pre> In\u00a0[20]: Copied! <pre># These are the K\nkq1 = tao.ele_gen_attribs('Q1')['K1']\nkq2 = tao.ele_gen_attribs('Q2')['K1']\nkq1, kq2\n</pre> # These are the K kq1 = tao.ele_gen_attribs('Q1')['K1'] kq2 = tao.ele_gen_attribs('Q2')['K1'] kq1, kq2 Out[20]: <pre>(20.6297896339797, -10.5500557883925)</pre> In\u00a0[21]: Copied! <pre>tao.cmd('alias setbetas veto var *;veto dat *;use dat fodo.betas[1,2];set dat fodo.betas[1]|meas=[[1]];set dat fodo.betas[2]|meas=[[2]];use var quad;run;show var -bmad -good')\n#tao.cmd('call SetBetas.tao', raises=False)\n\nlines = tao.cmd('setbetas 40 25', raises=False)\nlines[-3:];\ntao.merit()\n</pre> tao.cmd('alias setbetas veto var *;veto dat *;use dat fodo.betas[1,2];set dat fodo.betas[1]|meas=[[1]];set dat fodo.betas[2]|meas=[[2]];use var quad;run;show var -bmad -good') #tao.cmd('call SetBetas.tao', raises=False)  lines = tao.cmd('setbetas 40 25', raises=False) lines[-3:]; tao.merit() Out[21]: <pre>['  7.64007369085481E-23']</pre> In\u00a0[22]: Copied! <pre>T = tao.ele_twiss('Q1')\nT\n</pre> T = tao.ele_twiss('Q1') T Out[22]: <pre>{'mode_flip': False,\n 'beta_a': 79.7708116314783,\n 'alpha_a': 83.989771805627,\n 'gamma_a': 88.4444024533056,\n 'phi_a': 0.213283369019596,\n 'eta_a': 0.0,\n 'etap_a': 0.0,\n 'beta_b': 10.6890160749887,\n 'alpha_b': -10.8776594910372,\n 'gamma_b': 11.1631861310562,\n 'phi_b': 0.0536009562200223,\n 'eta_b': 0.0,\n 'etap_b': 0.0,\n 'eta_x': 0.0,\n 'etap_x': 0.0,\n 'eta_y': 0.0,\n 'etap_y': 0.0}</pre> In\u00a0[23]: Copied! <pre>from pytao.misc.markers import make_markers\n</pre> from pytao.misc.markers import make_markers In\u00a0[24]: Copied! <pre>?make_markers\n</pre> ?make_markers <pre>Signature: make_markers(slist, filename=None, ref=None)\nDocstring:\nMakes markers relative to ref ele.\n\nIf filename is given, the lines will be written to ta file. \nFile:      ~/Code/GitHub/pytao/pytao/misc/markers.py\nType:      function\n</pre> In\u00a0[25]: Copied! <pre>smax = 20.0 # m\n\n# Alternatively, if the lattice were already loaded\n#smax = tao.lat_list('*', who='ele.s').max()\n\nslist = np.linspace(0, smax, 200)\n\nmake_markers(slist, filename='markers.bmad');\n\nsmax\n</pre> smax = 20.0 # m  # Alternatively, if the lattice were already loaded #smax = tao.lat_list('*', who='ele.s').max()  slist = np.linspace(0, smax, 200)  make_markers(slist, filename='markers.bmad');  smax Out[25]: <pre>20.0</pre> In\u00a0[26]: Copied! <pre># Make a lattice and write to a local file\n\nlatfile = os.path.join(os.getcwd(), 'fodo10.bmad')\n\nLAT2 = f\"\"\"\n\ncall, file = $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad\ncall, file = markers.bmad\n\nQ1[k1] = {kq1}\nQ2[k1] = {kq2}\n\nlat: line = (10*fodo1)\n\nuse, lat\n\n\"\"\"\nopen(latfile, 'w').write(LAT2)\n</pre> # Make a lattice and write to a local file  latfile = os.path.join(os.getcwd(), 'fodo10.bmad')  LAT2 = f\"\"\"  call, file = $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad call, file = markers.bmad  Q1[k1] = {kq1} Q2[k1] = {kq2}  lat: line = (10*fodo1)  use, lat  \"\"\" open(latfile, 'w').write(LAT2) Out[26]: <pre>181</pre> In\u00a0[27]: Copied! <pre># Run with this lattice\ntao = Tao(f'-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot')\n</pre> # Run with this lattice tao = Tao(f'-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot') In\u00a0[28]: Copied! <pre># Toggle the beam on and off\ntao.cmd('set beam_init n_particle = 1000')\ntao.cmd('set global track_type = beam;set global track_type = single')\n</pre> # Toggle the beam on and off tao.cmd('set beam_init n_particle = 1000') tao.cmd('set global track_type = beam;set global track_type = single') Out[28]: <pre>['',\n 'Tao: set global track_type = beam',\n '',\n 'Tao: set global track_type = single']</pre> In\u00a0[29]: Copied! <pre>import h5py\nfrom pmd_beamphysics import ParticleGroup, particle_paths\n\nwith h5py.File('beam_dump.h5', 'r') as h5:\n    pp = particle_paths(h5)\n    Plist = [ParticleGroup(h5[g]) for g in pp]\n</pre> import h5py from pmd_beamphysics import ParticleGroup, particle_paths  with h5py.File('beam_dump.h5', 'r') as h5:     pp = particle_paths(h5)     Plist = [ParticleGroup(h5[g]) for g in pp]      In\u00a0[30]: Copied! <pre>skip = 1 # make larger for faster plotting\nfig, axes = plt.subplots(2, figsize=(12,8))\n\naxes[0].plot(\n    [P.t[::skip]*299792458 for P in  Plist],\n    [P.x[::skip]*1e6 for P in  Plist],\n    alpha=0.01, color='black'\n)\n\naxes[1].plot(\n    [P.t[::skip]*299792458 for P in  Plist],\n    [P.y[::skip]*1e6 for P in  Plist],\n    alpha=0.01, color='black'\n)\n\naxes[0].set_ylabel(r'$x$ (\u00b5m)')\naxes[1].set_ylabel(r'$y$ (\u00b5m)')\n\naxes[1].set_xlabel(r'$ct$ (m)')\n\nfor ax in axes:\n    ax.set_ylim(-2000,2000)\n</pre>  skip = 1 # make larger for faster plotting fig, axes = plt.subplots(2, figsize=(12,8))  axes[0].plot(     [P.t[::skip]*299792458 for P in  Plist],     [P.x[::skip]*1e6 for P in  Plist],     alpha=0.01, color='black' )  axes[1].plot(     [P.t[::skip]*299792458 for P in  Plist],     [P.y[::skip]*1e6 for P in  Plist],     alpha=0.01, color='black' )  axes[0].set_ylabel(r'$x$ (\u00b5m)') axes[1].set_ylabel(r'$y$ (\u00b5m)')  axes[1].set_xlabel(r'$ct$ (m)')  for ax in axes:     ax.set_ylim(-2000,2000) In\u00a0[31]: Copied! <pre>k1 = 'sigma_x'\nk2 = 'sigma_y'\n\nx =  np.array([P['mean_t']*299792458 for P in Plist])\ny1 = np.array([P[k1] for P in Plist])\ny2 = np.array([P[k2] for P in Plist])\n\nfig, ax = plt.subplots(figsize=(12,4))\nax.plot(x, y1*1e6, label=k1)\nax.plot(x, y2*1e6, label=k2)\nax.set_xlabel('&lt;ct&gt; (m)')\nax.set_ylabel(f'{k1}, {k2} (\u00b5m)')\nplt.legend()\n</pre> k1 = 'sigma_x' k2 = 'sigma_y'  x =  np.array([P['mean_t']*299792458 for P in Plist]) y1 = np.array([P[k1] for P in Plist]) y2 = np.array([P[k2] for P in Plist])  fig, ax = plt.subplots(figsize=(12,4)) ax.plot(x, y1*1e6, label=k1) ax.plot(x, y2*1e6, label=k2) ax.set_xlabel(' (m)') ax.set_ylabel(f'{k1}, {k2} (\u00b5m)') plt.legend() Out[31]: <pre>&lt;matplotlib.legend.Legend at 0x153cd9640&gt;</pre> In\u00a0[32]: Copied! <pre># Cleanup\n!rm beam_dump.h5\n!rm {latfile}\n!rm markers.bmad\n</pre> # Cleanup !rm beam_dump.h5 !rm {latfile} !rm markers.bmad"},{"location":"examples/fodo/#fodo-optics","title":"FODO optics\u00b6","text":"<p>This will demonstrate how to scan symmetrically and asymetrically the quadruople strengths in a standard FODO lattice.</p> <p>Later we will optimize for particular average beta function.</p> <p>Finally, we will track a beam and gather statistics from the particles.</p>"},{"location":"examples/fodo/#symmetric-fodo","title":"Symmetric FODO\u00b6","text":""},{"location":"examples/fodo/#asymmetric-fodo","title":"Asymmetric FODO\u00b6","text":"<p>Scan k1 for each quad</p>"},{"location":"examples/fodo/#plots","title":"Plots\u00b6","text":""},{"location":"examples/fodo/#optimize-for-some-special-beta-functions","title":"Optimize for some special beta functions\u00b6","text":""},{"location":"examples/fodo/#alternative-method-alias","title":"Alternative method: alias\u00b6","text":"<p>A 'simple' Tao alias can be useful when running on the command line.</p>"},{"location":"examples/fodo/#beam-tracking","title":"Beam tracking\u00b6","text":"<p>Here we will make a new lattice with 10 cells that calls the single fodo lattice.</p>"},{"location":"examples/fodo/#get-particles","title":"Get particles\u00b6","text":""},{"location":"examples/fodo/#pretty-plot","title":"Pretty plot\u00b6","text":"<p>Traces can be made by gathering the coordinate arrays</p>"},{"location":"examples/fodo/#get-some-statistics","title":"Get some statistics\u00b6","text":""},{"location":"examples/fodo/#cleanup","title":"Cleanup\u00b6","text":""},{"location":"examples/special_parsers/","title":"Special Parsers","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>tao=Tao('-init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init -noplot')\n</pre> tao=Tao('-init $ACC_ROOT_DIR/regression_tests/python_test/cesr/tao.init -noplot') In\u00a0[3]: Copied! <pre>tao.data_d_array('orbit', 'x')[7]\n</pre> tao.data_d_array('orbit', 'x')[7] Out[3]: <pre>{'ix_d1': 7,\n 'data_type': 'orbit.x',\n 'merit_type': 'target',\n 'ele_ref_name': '',\n 'ele_start_name': '',\n 'ele_name': 'DET_07W',\n 'meas_value': 0.0,\n 'model_value': -0.00909995345026739,\n 'design_value': -0.00909995345026739,\n 'useit_opt': False,\n 'useit_plot': False,\n 'good_user': True,\n 'weight': 1000000.0,\n 'exists': True}</pre> In\u00a0[4]: Copied! <pre>tao.cmd('veto var *;veto dat *;')\ntao.cmd('use var quad_k1[3:5]')\ntao.cmd('set dat orbit.x[1:5]|meas=0')\ntao.cmd('use dat orbit.x[1:5]');\n</pre> tao.cmd('veto var *;veto dat *;') tao.cmd('use var quad_k1[3:5]') tao.cmd('set dat orbit.x[1:5]|meas=0') tao.cmd('use dat orbit.x[1:5]'); In\u00a0[5]: Copied! <pre>result = tao.derivative()\nresult\n</pre> result = tao.derivative() result Out[5]: <pre>{1: array([[-0.01758468, -0.03303896,  0.00216133],\n        [-0.01711307, -0.03578883,  0.00283783],\n        [ 0.00189157, -0.00956715,  0.002403  ],\n        [-0.00893899,  0.00192382,  0.00267012]])}</pre> <p>n_datums x n_variables</p> In\u00a0[6]: Copied! <pre>result[1].shape\n</pre> result[1].shape Out[6]: <pre>(4, 3)</pre> In\u00a0[7]: Copied! <pre>tao.ele_control_var('H01W')\n</pre> tao.ele_control_var('H01W') Out[7]: <pre>{'HKICK': 0.0}</pre> In\u00a0[8]: Copied! <pre>result = tao.lat_ele_list()\n\nresult[0:5]\n</pre> result = tao.lat_ele_list()  result[0:5] Out[8]: <pre>['BEGINNING', 'IP_L0', 'CLEO_SOL#3', 'DET_00W', 'CLEO_SOL#4']</pre> In\u00a0[9]: Copied! <pre>tao.matrix('beginning', 'end')\n</pre> tao.matrix('beginning', 'end') Out[9]: <pre>{'mat6': array([[-9.85453321e-01, -1.78459151e-01, -2.95064264e-02,\n         -3.72328912e-05, -1.28463592e-03,  1.69890832e-03],\n        [ 1.94136498e-01, -9.79571649e-01, -7.19934541e-03,\n          8.91976963e-04, -5.89572298e-03, -3.81443689e-02],\n        [-8.56326169e-04,  6.02559410e-05, -8.76189778e-01,\n         -8.41353610e-03,  1.67854914e-05,  2.64910033e-03],\n        [ 1.16108943e-02,  2.96794811e-02,  2.66272918e+01,\n         -8.85649653e-01,  2.27202188e-05, -4.04349279e-02],\n        [-8.86152164e-02, -6.13453961e-03,  3.48586759e-02,\n         -2.68733720e-03,  9.47817657e-01, -8.79514378e+00],\n        [ 5.30821801e-03, -2.93203403e-04,  1.07833932e-04,\n         -1.59653540e-05,  1.15997844e-02,  9.47355161e-01]]),\n 'vec0': array([ 3.92874185e-04,  4.73093997e-03,  1.86151033e-06, -9.57458176e-05,\n        -7.06702236e-05,  5.03940903e-06])}</pre> In\u00a0[10]: Copied! <pre>tao.merit()\n</pre> tao.merit() Out[10]: <pre>411.826621947889</pre> In\u00a0[11]: Copied! <pre>result = tao.plot_list('r')\n\nresult[0:2]\n</pre> result = tao.plot_list('r')  result[0:2] Out[11]: <pre>[{'region': 'top',\n  'ix': 1,\n  'plot_name': '',\n  'visible': False,\n  'x1': 0.0,\n  'x2': 1.0,\n  'y1': 0.48,\n  'y2': 0.95},\n {'region': 'bottom',\n  'ix': 2,\n  'plot_name': '',\n  'visible': False,\n  'x1': 0.0,\n  'x2': 1.0,\n  'y1': 0.0,\n  'y2': 0.48}]</pre> In\u00a0[12]: Copied! <pre># 't' gives a mapping of template plot to index\nresult = tao.plot_list('t')\n\nresult['cbar']\n</pre> # 't' gives a mapping of template plot to index result = tao.plot_list('t')  result['cbar'] Out[12]: <pre>5</pre> In\u00a0[13]: Copied! <pre>tao.spin_invariant('l0')\n</pre> tao.spin_invariant('l0') Out[13]: <pre>array([[ 0.        ,  0.99835693,  0.05730134],\n       [ 0.        ,  0.99835693,  0.05730134],\n       [-0.05286846,  0.99704202,  0.05578657],\n       ...,\n       [-0.24326432,  0.96860132,  0.05132215],\n       [-0.29421324,  0.95443762,  0.04987387],\n       [-0.29421324,  0.95443762,  0.04987387]])</pre> In\u00a0[14]: Copied! <pre>tt = tao.taylor_map('beginning', 'end', order=2)\ntt\n</pre> tt = tao.taylor_map('beginning', 'end', order=2) tt Out[14]: <pre>{1: {(0, 0, 0, 0, 0, 0): -1.66366332399e-05,\n  (1, 0, 0, 0, 0, 0): -0.985196712163254,\n  (0, 1, 0, 0, 0, 0): -0.179943541449763,\n  (0, 0, 1, 0, 0, 0): -0.0296993930597934,\n  (2, 0, 0, 0, 0, 0): 0.446014935799591,\n  (1, 1, 0, 0, 0, 0): -1.0082815874369,\n  (0, 2, 0, 0, 0, 0): 1.02617393824841,\n  (1, 0, 1, 0, 0, 0): -0.826515800051477,\n  (0, 1, 1, 0, 0, 0): 0.667382863899269,\n  (0, 0, 2, 0, 0, 0): 44.7241374179086,\n  (0, 0, 0, 1, 0, 0): -3.8970786607117e-05,\n  (1, 0, 0, 1, 0, 0): -0.00123739509633878,\n  (0, 1, 0, 1, 0, 0): -0.0371117192737988,\n  (0, 0, 1, 1, 0, 0): -4.03450589571566,\n  (0, 0, 0, 0, 1, 0): -0.00131163342274997,\n  (1, 0, 0, 0, 1, 0): -0.14952266472463,\n  (0, 1, 0, 0, 1, 0): 0.0299330163946578,\n  (0, 0, 1, 0, 1, 0): 0.105807427956391,\n  (0, 0, 0, 0, 0, 1): 0.00175860485756863,\n  (1, 0, 0, 0, 0, 1): 2.90302998820428,\n  (0, 1, 0, 0, 0, 1): 3.49576360623984,\n  (0, 0, 1, 0, 0, 1): 7.97083175659058,\n  (0, 0, 0, 2, 0, 0): -0.0184811091743142,\n  (0, 0, 0, 1, 1, 0): -0.00392766890504798,\n  (0, 0, 0, 0, 2, 0): 0.00074282261016428,\n  (0, 0, 0, 1, 0, 1): 0.0279423475598951,\n  (0, 0, 0, 0, 1, 1): -0.01340355160728,\n  (0, 0, 0, 0, 0, 2): -2.38972031608605},\n 2: {(0, 0, 0, 0, 0, 0): 0.00239048642749099,\n  (1, 0, 0, 0, 0, 0): 0.195138002156719,\n  (0, 1, 0, 0, 0, 0): -0.979350347537081,\n  (0, 0, 1, 0, 0, 0): -0.00732021294143655,\n  (2, 0, 0, 0, 0, 0): 1.3249225261134,\n  (1, 1, 0, 0, 0, 0): -0.168996332588702,\n  (0, 2, 0, 0, 0, 0): 0.295739189067929,\n  (1, 0, 1, 0, 0, 0): -0.962169276481757,\n  (0, 1, 1, 0, 0, 0): 0.697969162655591,\n  (0, 0, 2, 0, 0, 0): 100.484273040881,\n  (0, 0, 0, 1, 0, 0): 0.000900228227216367,\n  (1, 0, 0, 1, 0, 0): 0.0452519623233577,\n  (0, 1, 0, 1, 0, 0): 0.00972379532280073,\n  (0, 0, 1, 1, 0, 0): -2.89154417505891,\n  (0, 0, 0, 0, 1, 0): -0.00589560314244696,\n  (1, 0, 0, 0, 1, 0): -0.0608681441596298,\n  (0, 1, 0, 0, 1, 0): 0.131509258514247,\n  (0, 0, 1, 0, 1, 0): 0.0812501763521962,\n  (0, 0, 0, 0, 0, 1): -0.0381872457210249,\n  (1, 0, 0, 0, 0, 1): -9.55209206188755,\n  (0, 1, 0, 0, 0, 1): -5.33586099635078,\n  (0, 0, 1, 0, 0, 1): 4.52923341679699,\n  (0, 0, 0, 2, 0, 0): 0.0629079369870873,\n  (0, 0, 0, 1, 1, 0): -0.00149863569373015,\n  (0, 0, 0, 0, 2, 0): 0.000587985962294018,\n  (0, 0, 0, 1, 0, 1): -0.31853579207818,\n  (0, 0, 0, 0, 1, 1): 0.0412939308727921,\n  (0, 0, 0, 0, 0, 2): 0.76601614933276},\n 3: {(0, 0, 0, 0, 0, 0): 1.05157632159555e-06,\n  (1, 0, 0, 0, 0, 0): -0.000864193360286813,\n  (0, 1, 0, 0, 0, 0): 6.23497458058423e-05,\n  (0, 0, 1, 0, 0, 0): -0.8735664544964,\n  (2, 0, 0, 0, 0, 0): -0.0217550050697433,\n  (1, 1, 0, 0, 0, 0): 0.000630827921344786,\n  (0, 2, 0, 0, 0, 0): -0.0181604455258593,\n  (1, 0, 1, 0, 0, 0): 4.98227511703817,\n  (0, 1, 1, 0, 0, 0): -3.43330383649897,\n  (0, 0, 2, 0, 0, 0): -0.305561098724387,\n  (0, 0, 0, 1, 0, 0): -0.00856834872278235,\n  (1, 0, 0, 1, 0, 0): -0.132656652144751,\n  (0, 1, 0, 1, 0, 0): -0.0220531121048376,\n  (0, 0, 1, 1, 0, 0): 0.00641085055272046,\n  (0, 0, 0, 0, 1, 0): 1.68093509057174e-05,\n  (1, 0, 0, 0, 1, 0): 0.00244665691322182,\n  (0, 1, 0, 0, 1, 0): -0.00396412713502785,\n  (0, 0, 1, 0, 1, 0): -0.299055160891415,\n  (0, 0, 0, 0, 0, 1): 0.00264467550336364,\n  (1, 0, 0, 0, 0, 1): 0.319510712558262,\n  (0, 1, 0, 0, 0, 1): 0.014171146893256,\n  (0, 0, 1, 0, 0, 1): -8.26626633959935,\n  (0, 0, 0, 2, 0, 0): -0.000318155048161447,\n  (0, 0, 0, 1, 1, 0): 0.000633772505878565,\n  (0, 0, 0, 0, 2, 0): -2.10025873360676e-05,\n  (0, 0, 0, 1, 0, 1): 0.0846818379113344,\n  (0, 0, 0, 0, 1, 1): -0.00127341179496129,\n  (0, 0, 0, 0, 0, 2): 0.0218742193846649},\n 4: {(0, 0, 0, 0, 0, 0): 1.82087247551517e-06,\n  (1, 0, 0, 0, 0, 0): 0.0117108773410044,\n  (0, 1, 0, 0, 0, 0): 0.0298731605771444,\n  (0, 0, 1, 0, 0, 0): 26.6637945908307,\n  (2, 0, 0, 0, 0, 0): 0.0868240483566442,\n  (1, 1, 0, 0, 0, 0): 0.86103323300697,\n  (0, 2, 0, 0, 0, 0): 0.190824817094323,\n  (1, 0, 1, 0, 0, 0): 92.6293350991725,\n  (0, 1, 1, 0, 0, 0): 46.0396587460772,\n  (0, 0, 2, 0, 0, 0): 0.449570908257767,\n  (0, 0, 0, 1, 0, 0): -0.883232864347968,\n  (1, 0, 0, 1, 0, 0): -0.0824329649632892,\n  (0, 1, 0, 1, 0, 0): 4.59607349264319,\n  (0, 0, 1, 1, 0, 0): 0.608976435371927,\n  (0, 0, 0, 0, 1, 0): 2.46914545805481e-05,\n  (1, 0, 0, 0, 1, 0): 0.0364417603959309,\n  (0, 1, 0, 0, 1, 0): 0.00478845202559958,\n  (0, 0, 1, 0, 1, 0): -0.706485566536203,\n  (0, 0, 0, 0, 0, 1): -0.040481745636089,\n  (1, 0, 0, 0, 0, 1): -2.75083077446046,\n  (0, 1, 0, 0, 0, 1): -8.49871721620549,\n  (0, 0, 1, 0, 0, 1): -131.350468854564,\n  (0, 0, 0, 2, 0, 0): 0.00467518361753533,\n  (0, 0, 0, 1, 1, 0): 0.276221869154924,\n  (0, 0, 0, 0, 2, 0): -1.88223240798573e-05,\n  (0, 0, 0, 1, 0, 1): 4.50404232769246,\n  (0, 0, 0, 0, 1, 1): 0.00433746050352927,\n  (0, 0, 0, 0, 0, 2): 0.120062779434416},\n 5: {(0, 0, 0, 0, 0, 0): -0.000398882588537139,\n  (1, 0, 0, 0, 0, 0): -0.0886757519916239,\n  (0, 1, 0, 0, 0, 0): -0.00609686912285954,\n  (0, 0, 1, 0, 0, 0): 0.0349098882028274,\n  (2, 0, 0, 0, 0, 0): -4.47044214172974,\n  (1, 1, 0, 0, 0, 0): -3.31988559556483,\n  (0, 2, 0, 0, 0, 0): -1.97937737937025,\n  (1, 0, 1, 0, 0, 0): 6.72117517990414,\n  (0, 1, 1, 0, 0, 0): -7.6648695472956,\n  (0, 0, 2, 0, 0, 0): -193.642470636415,\n  (0, 0, 0, 1, 0, 0): -0.00268389910185181,\n  (1, 0, 0, 1, 0, 0): -0.311156736963806,\n  (0, 1, 0, 1, 0, 0): -0.03869533588054,\n  (0, 0, 1, 1, 0, 0): 7.80657913492895,\n  (0, 0, 0, 0, 1, 0): 0.9478074307323,\n  (1, 0, 0, 0, 1, 0): 0.0358466617148942,\n  (0, 1, 0, 0, 1, 0): 0.010165655302366,\n  (0, 0, 1, 0, 1, 0): -0.0420291778081111,\n  (0, 0, 0, 0, 0, 1): -8.79504644245375,\n  (1, 0, 0, 0, 0, 1): 1.19143615751156,\n  (0, 1, 0, 0, 0, 1): 5.25211714015594,\n  (0, 0, 1, 0, 0, 1): 1.1222846771318,\n  (0, 0, 0, 2, 0, 0): -0.0114705854836205,\n  (0, 0, 0, 1, 1, 0): 0.00185575794581298,\n  (0, 0, 0, 0, 2, 0): -0.000314319937158193,\n  (0, 0, 0, 1, 0, 1): -0.00772739903188279,\n  (0, 0, 0, 0, 1, 1): 0.0127413092157923,\n  (0, 0, 0, 0, 0, 2): 0.364396954728399},\n 6: {(0, 0, 0, 0, 0, 0): -7.15739820527216e-06,\n  (1, 0, 0, 0, 0, 0): 0.00531272403470964,\n  (0, 1, 0, 0, 0, 0): -0.000311134298030367,\n  (0, 0, 1, 0, 0, 0): 0.000106214695876511,\n  (2, 0, 0, 0, 0, 0): -0.00928547217254939,\n  (1, 1, 0, 0, 0, 0): -0.1769104192046,\n  (0, 2, 0, 0, 0, 0): -0.0273916759401037,\n  (1, 0, 1, 0, 0, 0): -0.0170628885813259,\n  (0, 1, 1, 0, 0, 0): 0.00533000221930043,\n  (0, 0, 2, 0, 0, 0): 2.02217623395134,\n  (0, 0, 0, 1, 0, 0): -1.59179292331625e-05,\n  (1, 0, 0, 1, 0, 0): -0.00164361093394946,\n  (0, 1, 0, 1, 0, 0): -0.00408631872975518,\n  (0, 0, 1, 1, 0, 0): -0.155773826018652,\n  (0, 0, 0, 0, 1, 0): 0.0115997890354962,\n  (1, 0, 0, 0, 1, 0): -0.000236576535579418,\n  (0, 1, 0, 0, 1, 0): 0.00143001544142555,\n  (0, 0, 1, 0, 1, 0): 0.000135808759997953,\n  (0, 0, 0, 0, 0, 1): 0.947365020933153,\n  (1, 0, 0, 0, 0, 1): -0.0566185345310877,\n  (0, 1, 0, 0, 0, 1): 0.013436309919337,\n  (0, 0, 1, 0, 0, 1): 0.00297868830544677,\n  (0, 0, 0, 2, 0, 0): -0.00088980065810877,\n  (0, 0, 0, 1, 1, 0): -1.10290390902046e-07,\n  (0, 0, 0, 0, 2, 0): 4.34150580706664e-06,\n  (0, 0, 0, 1, 0, 1): -0.00200400188548278,\n  (0, 0, 0, 0, 1, 1): 0.000905968623531625,\n  (0, 0, 0, 0, 0, 2): 0.00962216934673814}}</pre> In\u00a0[15]: Copied! <pre># Compare some terms with the matrix calc:\ntao.matrix('beginning', 'end')['mat6'][0,0],  tt[1][(1,0,0,0,0,0)]\n</pre> # Compare some terms with the matrix calc: tao.matrix('beginning', 'end')['mat6'][0,0],  tt[1][(1,0,0,0,0,0)] Out[15]: <pre>(-0.985453321293537, -0.985196712163254)</pre> In\u00a0[16]: Copied! <pre>tao.matrix('beginning', 'end')['mat6'][1,0],  tt[2][(1,0,0,0,0,0)]\n</pre> tao.matrix('beginning', 'end')['mat6'][1,0],  tt[2][(1,0,0,0,0,0)] Out[16]: <pre>(0.194136497704459, 0.195138002156719)</pre> In\u00a0[17]: Copied! <pre>result = tao.var_v_array('quad_k1')\nresult[0:2]\n</pre> result = tao.var_v_array('quad_k1') result[0:2] Out[17]: <pre>[{'ix_v1': 0,\n  'var_attrib_name': 'Q00W[K1]',\n  'meas_value': 0.0,\n  'model_value': -0.841784836453016,\n  'design_value': -0.841784836453016,\n  'useit_opt': False,\n  'good_user': False,\n  'weight': 100000.0},\n {'ix_v1': 3,\n  'var_attrib_name': 'Q03W[K1]',\n  'meas_value': 0.0,\n  'model_value': -0.128947,\n  'design_value': -0.128947,\n  'useit_opt': True,\n  'good_user': True,\n  'weight': 100000.0}]</pre>"},{"location":"examples/special_parsers/#special-parsers","title":"Special Parsers\u00b6","text":"<p>Some of the Tao python commands output special structures in a <code>;</code> delimited fashion. Some PyTao methods parse these into more useful structures.</p>"},{"location":"examples/special_parsers/#data_d_array","title":"data_d_array\u00b6","text":""},{"location":"examples/special_parsers/#derivative","title":"derivative\u00b6","text":""},{"location":"examples/special_parsers/#ele_control_var","title":"ele_control_var\u00b6","text":""},{"location":"examples/special_parsers/#lat_ele_list","title":"lat_ele_list\u00b6","text":""},{"location":"examples/special_parsers/#matrix","title":"matrix\u00b6","text":""},{"location":"examples/special_parsers/#merit","title":"merit\u00b6","text":""},{"location":"examples/special_parsers/#plot_list","title":"plot_list\u00b6","text":""},{"location":"examples/special_parsers/#spin_invariant","title":"spin_invariant\u00b6","text":""},{"location":"examples/special_parsers/#taylor_map","title":"taylor_map\u00b6","text":""},{"location":"examples/special_parsers/#var_v_array","title":"var_v_array\u00b6","text":""}]}