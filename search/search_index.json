{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTao","text":"<p>Tao is an open source general purpose program for charged particle and X-ray simulations in accelerators and storage rings. It is built on top of the Bmad toolkit (software library) which provides the needed computational routines needed to do simulations. Essentially you can think of Tao as a car and Bmad as the engine that powers the car. In fact Bmad powers a number of other simulation programs but that is getting outside of the scope of this manual. It is sometimes convenient to be able to run Tao via Python. For example, in an online control system environment.</p> <p>PyTao is wrapper on top of Tao and allow users to access the Tao library via ctypes or pexpect.</p> <p>Documentation for Bmad and Tao, as well as information for downloading the code if needed is given on the Bmad web site</p>"},{"location":"development/","title":"Development Guidelines","text":"<p>It is recommended that PyTao is updated and maintained in the following way. This workflow was not invented by this project, there are many helpful tutorials online like this if you want more information.</p>"},{"location":"development/#creating-a-local-checkout","title":"Creating a Local Checkout","text":"<p>If you want to make changes to a repository the first step is to create your own fork. This allows you to create feature branches without cluttering the main repository. It also assures that the main repository is only added to by Pull Request and review. Repositories can be forked from the GitHub site like presented at this example. Once this repository is created, you can clone into your own workspace.</p> <pre><code>$ git clone https://YOUR-USERNAME@github.com/YOUR-USERNAME/REPOSITORY.git\n</code></pre> <p>Now, that we have a copy of the repository create a branch for the feature or bug you would like to work on.</p> <pre><code>$ git checkout -b my-feature\n\n$ git status\nOn branch my-feature\nnothing to commit, working tree clean\n</code></pre>"},{"location":"development/#commit-guidelines","title":"Commit Guidelines","text":"<p>Now you are ready to start working! Make changes to files and commit them to your new branch. We like to preface our commit messages with a descriptor code. This makes it easier for someone reviewing your commit history to see what you have done. These are borrowed from the NumPy development documentation.</p> <p>Code   Description</p> <p>API    an (incompatible) API change   BLD    change related to building   BUG    bug fix   DEP    deprecate something, or remove a deprecated object   DEV    development tool or utility   DOC    documentation   ENH    enhancement   MNT    maintenance commit (refactoring, typos, etc.)   REV    revert an earlier commit   STY    style fix (whitespace, PEP8)   TST    addition or modification of tests   REL    related to releasing numpy   WIP    Commit that is a work in progress</p> <p>It is also helpful underneath classes and functions to write docstrings. These are later converted by Sphinx into HTML documentation. They also are a valuable tool for exploration of a codebase within an IPython terminal. Docstrings should follow the form described in the NumPy documentation</p>"},{"location":"development/#merging-changes","title":"Merging Changes","text":"<p>Once you are happy with your code, <code>push</code> it back to your fork on GitHub.</p> <pre><code>$ git push origin my-feature\n</code></pre> <p>You should now be able to create a Pull Request back to the original repository. You should never commit directly back to the original repository. In fact, if you are creating a new repository it is possible to strictly disallow this by explicitly protecting certain branches from direct commits.The reason we feel strongly that Pull Requests are necessary because they:</p> <p>1)  Allows other collaborators to view the changes you made, and give     feedback. 2)  Leave an easily understood explanation to why these changes are     necessary.</p> <p>Once these changes are deemed acceptable to enter the main repository, they Pull Request can be merged.</p>"},{"location":"development/#syncing-your-local-checkout","title":"Syncing your Local Checkout","text":"<p>Inevitably, changes to the upstream repository will occur and you will need to update your local checkout to reflect those. The first step is to make your local checkout aware of the upstream repository. If this is done correctly, you should see something like this:</p> <pre><code>$ git remote add upstream https://github.com/UPSTREAM-ORG/REPOSITORY.git\n$ git remote -v\norigin   https://github.com/YOUR-USERNAME/REPOSITORY.git (fetch)\norigin   https://github.com/YOUR-USERNAME/REPOSITORY.git (push)\nupstream https://github.com/UPSTREAM-ORG/REPOSITORY.git (fetch)\nupstream https://github.com/UPSTREAM-ORG/REPOSITORY.git (push)\n</code></pre> <p>Now, we need to fetch any changes from the upstream repository. <code>git fetch</code> will grab the latest commits that were merged since we made our own fork</p> <pre><code>$ git fetch upstream\n</code></pre> <p>Ideally you haven\\'t made any changes to your <code>master</code> branch. So you should be able to merge the latest <code>master</code> branch from the upstream repository without concern. All you need to do is to switch to your <code>master</code> branch, and pull in the changes from the upstream remote. It is usually a good idea to push any changes back to your fork as well.</p> <pre><code>$ git checkout master\n$ git pull upstream master\n$ git push origin master\n</code></pre> <p>Finally, we need to update our feature-branch to have the new changes. Here we use a <code>git rebase</code> to take our local changes, remove them temporarily, pull the upstream changes into our branch, and then re-add our local changes on the tip of the commit history. This avoids extraneous merge commits that clog the commit history of the branch. A more in-depth discussion can be found here. This process should look like this:</p> <pre><code>$ git checkout my-feature\n$ git rebase upstream/master\n</code></pre>"},{"location":"development/#note","title":"Note","text":"<p>This process should not be done if you think that anyone else is also working on that branch. The rebasing process re-writes the commit history so any other checkout of the same branch referring to the old history will create duplicates of all the commits.</p>"},{"location":"installation/","title":"Installation","text":"<p>Note! The Bmad Distribution (which includes Tao) must be installed before installing PyTao. Additionally, the Bmad Distribution must be compiled with the <code>ACC_ENABLE_SHARED=\"Y\"</code> flag set in the <code>bmad_dist/util/dist_prefs</code> file.</p> <p>For instructions on how to install the Bmad Distribution, please refer to the instructions available at the Bmad website.</p> <p>Since PyTao is a python package, it can be installed in a couple of different ways:</p>"},{"location":"installation/#using-setuptools","title":"Using setuptools","text":"<pre><code>python setup.py install\n</code></pre>"},{"location":"installation/#using-pip","title":"Using pip","text":"<pre><code># From PyPI distribution\npip install pytao\n\n# or from the source folder\npip install .\n</code></pre>"},{"location":"installation/#using-conda","title":"Using conda","text":"<pre><code>conda install -c conda-forge pytao\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#pytao-with-jupyterlab","title":"PyTao with JupyterLab","text":"<p>PyTao has advanced JupyterLab integration for plotting and is generally the recommended method for using PyTao.</p> <p>Start up JupyterLab as you would normally:</p> <pre><code>jupyter lab\n</code></pre> <p>And then use PyTao, enabling your preferred plotting backend:</p> <pre><code>from pytao import Tao\n\n# Best available (Bokeh first, Matplotlib second)\ntao = Tao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\", plot=True)\n# Matplotlib:\ntao = Tao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\", plot=\"mpl\")\n# Bokeh\ntao = Tao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\", plot=\"bokeh\")\n</code></pre> <p>If you wish to use Tao's internal plotting mechanism, leave the <code>plot</code> keyword argument off or specify <code>plot=\"tao\"</code>:</p> <pre><code>from pytao import Tao\n\n# Use Tao's internal plotting mechanism:\ntao = Tao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\")\n</code></pre> <p>To disable plotting entirely, use:</p> <pre><code>from pytao import Tao\n\n# Use Tao's internal plotting mechanism:\ntao = Tao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\", noplot=True)\n</code></pre> <p>The <code>Tao</code> object supports all Tao initialization arguments as Python keyword arguments. That is, any of the following may be specified to <code>Tao</code>:</p> <pre><code>Tao(\n  beam_file=\"file_name\",                # File containing the tao_beam_init namelist.\n  beam_init_position_file=\"file_name\",  # File containing initial particle positions.\n  building_wall_file=\"file_name\",       # Define the building tunnel wall\n  command=\"command_string\",             # Commands to run after startup file commands\n  data_file=\"file_name\",                # Define data for plotting and optimization\n  debug=True,                           # Debug mode for Wizards\n  disable_smooth_line_calc=True,        # Disable the smooth line calc used in plotting\n  external_plotting=True,               # Tells Tao that plotting is done externally to Tao.\n  geometry=\"&lt;width&gt;x&lt;height&gt;\",          # Plot window geometry (pixels)\n  hook_init_file=\"file_name\",           # Init file for hook routines (Default = tao_hook.init)\n  init_file=\"file_name\",                # Tao init file\n  lattice_file=\"file_name\",             # Bmad lattice file\n  log_startup=True,                     # Write startup debugging info\n  no_stopping=True,                     # For debugging: Prevents Tao from exiting on errors\n  noinit=True,                          # Do not use Tao init file.\n  noplot=True,                          # Do not open a plotting window\n  nostartup=True,                       # Do not open a startup command file\n  no_rad_int=True,                      # Do not do any radiation integrals calculations.\n  plot_file=\"file_name\",                # Plotting initialization file\n  prompt_color=\"color\",                 # Set color of prompt string. Default is blue.\n  reverse=True,                         # Reverse lattice element order?\n  rf_on=True,                           # Use \"--rf_on\" to turn off RF (default is now RF on)\n  quiet=True,                           # Suppress terminal output when running a command file?\n  slice_lattice=\"ele_list\",             # Discards elements from lattice that are not in the list\n  start_branch_at=\"ele_name\",           # Start lattice branch at element.\n  startup_file=\"file_name\",             # Commands to run after parsing Tao init file\n  symbol_import=True,                   # Import symbols defined in lattice files(s)?\n  var_file=\"file_name\",                 # Define variables for plotting and optimization\n)\n</code></pre>"},{"location":"usage/#pytao-on-the-command-line","title":"PyTao on the command-line","text":"<p>PyTao has a simple IPython entrypoint, giving you quick access to Tao in Python.</p> <p>The following will start IPython with a <code>Tao</code> instance available as <code>tao</code>:</p> <pre><code>pytao -init_file \"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\"\n</code></pre> <p>To use PyTao's Matplotlib backend, do the following:</p> <pre><code>PYTAO_PLOT=mpl pytao -init_file \"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\"\n</code></pre> <pre><code>In [1]: tao.plot(\"beta\")\n\nIn [2]: plt.show()\n</code></pre>"},{"location":"usage/#pytao-deprecatedexperimental-gui","title":"PyTao (deprecated/experimental) GUI","text":"<p>Start the experimental (and mostly unsupported/deprecated) GUI by using the following:</p> <pre><code>pytao-gui -init_file \"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\"\n</code></pre>"},{"location":"usage/#notes-about-bokeh-on-jupyterhub","title":"Notes about Bokeh on JupyterHub","text":"<p>If you are using PyTao with Bokeh on your computer and are running JupyterLab locally, you can safely ignore this section.</p> <p>If you are accessing a JupyterHub deployment on an HPC cluster through a non-<code>localhost</code> website, there are some additional setup steps required.</p> <p>Please read this document from Bokeh for full details.</p> <p>At minimum, you will need to:</p> <ul> <li>Configure <code>JUPYTER_BOKEH_EXTERNAL_URL</code> to point to your server. For example, users may specify the following in their <code>~/.bashrc</code>: <code>export JUPYTER_BOKEH_EXTERNAL_URL=\"https//example.com\"</code> (replacing <code>example.com</code> with the URL you use to access JupyterHub)</li> </ul> <p>Additionally, you may be required to:</p> <ul> <li>In the JupyterHub environment, <code>conda install jupyter-server-proxy</code></li> <li>Restart JupyterHub</li> </ul>"},{"location":"api/plot-bokeh/","title":"Bokeh","text":""},{"location":"api/plot-bokeh/#pytao.plotting.bokeh","title":"pytao.plotting.bokeh","text":""},{"location":"api/plot-bokeh/#pytao.plotting.bokeh-classes","title":"Classes","text":""},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.BokehAppCreator","title":"pytao.plotting.bokeh.BokehAppCreator","text":"<pre><code>BokehAppCreator(manager, graphs, share_x=None, include_variables=False, grid=None, width=None, height=None, include_layout=False, graph_sizing_mode=None, layout_height=None, xlim=None, ylim=None)\n</code></pre> <p>A composite Bokeh application creator made up of 1 or more graphs.</p> <p>This can be used to: * Generate a static HTML page without Python widgets * Generate a Notebook (or standalone) application with Python widgets</p> <p>Interactive widgets will use the <code>Tao</code> object to adjust variables during callbacks resulting from user interaction.</p> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def __init__(\n    self,\n    manager: Union[BokehGraphManager, NotebookGraphManager],\n    graphs: List[AnyGraph],\n    share_x: Optional[bool] = None,\n    include_variables: bool = False,\n    grid: Optional[Tuple[int, int]] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    include_layout: bool = False,\n    graph_sizing_mode: Optional[SizingModeType] = None,\n    layout_height: Optional[int] = None,\n    xlim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    ylim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n) -&gt; None:\n    if not len(graphs):\n        raise ValueError(\"BokehAppCreator requires 1 or more graph\")\n\n    if any(isinstance(graph, LatticeLayoutGraph) for graph in graphs):\n        include_layout = False\n    elif not any(graph.is_s_plot for graph in graphs):\n        include_layout = False\n\n    if not grid:\n        grid = (len(graphs), 1)\n\n    if include_layout:\n        grid = (grid[0] + 1, grid[1])\n\n    if include_variables:\n        variables = Variable.from_tao_all(manager.tao)\n    else:\n        variables = []\n\n    self.manager = manager\n    self.graphs = graphs\n    self.share_x = share_x\n    self.variables = variables\n    self.grid = grid\n    self.width = width\n    self.height = height\n    self.graph_sizing_mode = graph_sizing_mode\n    self.include_layout = include_layout\n    self.layout_height = layout_height\n    self.xlim = fix_grid_limits(xlim, num_graphs=len(graphs))\n    self.ylim = fix_grid_limits(ylim, num_graphs=len(graphs))\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.BokehAppCreator-functions","title":"Functions","text":"pytao.plotting.bokeh.BokehAppCreator.create_state <pre><code>create_state()\n</code></pre> <p>Create an independent application state based on the graph data.</p> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def create_state(self) -&gt; BokehAppState:\n    \"\"\"Create an independent application state based on the graph data.\"\"\"\n    pairs, layout_pairs = self._create_figures()\n    grid = self._grid_figures(pairs, layout_pairs)\n    return BokehAppState(\n        pairs=pairs,\n        layout_pairs=layout_pairs,\n        grid=grid,\n    )\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.BokehGraphManager","title":"pytao.plotting.bokeh.BokehGraphManager","text":"<pre><code>BokehGraphManager(tao)\n</code></pre> <p>               Bases: <code>GraphManager</code></p> <p>Bokeh backend graph manager - for non-Jupyter contexts.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def __init__(self, tao: Tao) -&gt; None:\n    self.tao = tao\n    self.regions = {}\n    self._to_place = {}\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.BokehGraphManager-functions","title":"Functions","text":"pytao.plotting.bokeh.BokehGraphManager.plot <pre><code>plot(template, *, region_name=None, include_layout=True, sizing_mode=None, width=None, height=None, layout_height=None, share_x=None, xlim=None, ylim=None, save=None, curves=None, settings=None)\n</code></pre> <p>Plot a graph with Bokeh.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Graph template name.</p> required <code>region_name</code> <code>str</code> <p>Graph region name.</p> <code>None</code> <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom, if not already placed and if appropriate (i.e., another plot uses longitudinal coordinates on the x-axis).</p> <code>True</code> <code>sizing_mode</code> <code>Optional[SizingModeType]</code> <p>Set the sizing mode for all graphs.  Default is configured on a per-graph basis, typically \"inherit\".</p> <code>None</code> <code>width</code> <code>int</code> <p>Width of each plot.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of each plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Height of the layout plot.</p> <code>None</code> <code>share_x</code> <code>bool or None</code> <p>Share x-axes where sensible (<code>None</code>) or force sharing x-axes (True) for all plots.</p> <code>None</code> <code>xlim</code> <code>(float, float)</code> <p>X axis limits.</p> <code>None</code> <code>ylim</code> <code>(float, float)</code> <p>Y axis limits.</p> <code>None</code> <code>curves</code> <code>Dict[int, TaoCurveSettings]</code> <p>Dictionary of curve index to curve settings. These settings will be applied to the placed graph prior to plotting.</p> <code>None</code> <code>settings</code> <code>TaoGraphSettings</code> <p>Graph customization settings.</p> <code>None</code> <code>save</code> <code>str or bool</code> <p>Save the plot to a static HTML file with the given name. If <code>True</code>, saves to a filename based on the plot title.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <code>BokehAppCreator</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot(\n    self,\n    template: str,\n    *,\n    region_name: Optional[str] = None,\n    include_layout: bool = True,\n    sizing_mode: Optional[SizingModeType] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    layout_height: Optional[int] = None,\n    share_x: Optional[bool] = None,\n    xlim: Optional[Tuple[float, float]] = None,\n    ylim: Optional[Tuple[float, float]] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n    curves: Optional[Dict[int, TaoCurveSettings]] = None,\n    settings: Optional[TaoGraphSettings] = None,\n) -&gt; Tuple[List[AnyGraph], BokehAppCreator]:\n    \"\"\"\n    Plot a graph with Bokeh.\n\n    Parameters\n    ----------\n    template : str\n        Graph template name.\n    region_name : str, optional\n        Graph region name.\n    include_layout : bool\n        Include a layout plot at the bottom, if not already placed and if\n        appropriate (i.e., another plot uses longitudinal coordinates on\n        the x-axis).\n    sizing_mode : Optional[SizingModeType]\n        Set the sizing mode for all graphs.  Default is configured on a\n        per-graph basis, typically \"inherit\".\n    width : int, optional\n        Width of each plot.\n    height : int, optional\n        Height of each plot.\n    layout_height : int, optional\n        Height of the layout plot.\n    share_x : bool or None, default=None\n        Share x-axes where sensible (`None`) or force sharing x-axes (True)\n        for all plots.\n    xlim : (float, float), optional\n        X axis limits.\n    ylim : (float, float), optional\n        Y axis limits.\n    curves : Dict[int, TaoCurveSettings], optional\n        Dictionary of curve index to curve settings. These settings will be\n        applied to the placed graph prior to plotting.\n    settings : TaoGraphSettings, optional\n        Graph customization settings.\n    save : str or bool, optional\n        Save the plot to a static HTML file with the given name.\n        If `True`, saves to a filename based on the plot title.\n\n    Returns\n    -------\n    list of graphs\n\n    BokehAppCreator\n    \"\"\"\n    graphs = self.prepare_graphs_by_name(\n        template_name=template,\n        region_name=region_name,\n        curves=curves,\n        settings=settings,\n        xlim=xlim,\n        ylim=ylim,\n    )\n\n    if not graphs:\n        raise UnsupportedGraphError(f\"No supported plots from this template: {template}\")\n\n    app = BokehAppCreator(\n        manager=self,\n        graphs=graphs,\n        share_x=share_x,\n        include_variables=False,\n        grid=None,\n        width=width or _Defaults.width,\n        height=height or _Defaults.height,\n        layout_height=layout_height or _Defaults.layout_height,\n        include_layout=include_layout,\n        graph_sizing_mode=sizing_mode,\n        xlim=[xlim],\n        ylim=[ylim],\n    )\n\n    if save:\n        if save is True:\n            save = \"\"\n        filename = app.save(save)\n        logger.info(f\"Saving plot to {filename!r}\")\n\n    return graphs, app\n</code></pre> pytao.plotting.bokeh.BokehGraphManager.plot_field <pre><code>plot_field(ele_id, *, colormap=None, radius=0.015, num_points=100, x_scale=1.0, width=None, height=None, save=None)\n</code></pre> <p>Plot field information for a given element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> <code>str</code> <p>Element ID.</p> required <code>colormap</code> <code>str</code> <p>Colormap for the plot. Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".</p> <code>None</code> <code>radius</code> <code>float</code> <p>Radius.</p> <code>0.015</code> <code>num_points</code> <code>int</code> <p>Number of data points.</p> <code>100</code> <code>width</code> <code>int</code> <code>None</code> <code>height</code> <code>int</code> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> <p>Returns:</p> Type Description <code>ElementField</code> <code>figure</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot_field(\n    self,\n    ele_id: str,\n    *,\n    colormap: Optional[str] = None,\n    radius: float = 0.015,\n    num_points: int = 100,\n    x_scale: float = 1.0,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n):\n    \"\"\"\n    Plot field information for a given element.\n\n    Parameters\n    ----------\n    ele_id : str\n        Element ID.\n    colormap : str, optional\n        Colormap for the plot.\n        Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".\n    radius : float, default=0.015\n        Radius.\n    num_points : int, default=100\n        Number of data points.\n    width : int, optional\n    height : int, optional\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n\n    Returns\n    -------\n    ElementField\n\n    figure\n    \"\"\"\n    field = ElementField.from_tao(self.tao, ele_id, num_points=num_points, radius=radius)\n    fig = figure(title=f\"Field of {ele_id}\")\n\n    palette = colormap or _Defaults.palette\n\n    source = _fields_to_data_source([field], x_scale=x_scale)\n    cmap = bokeh.models.LinearColorMapper(\n        palette=palette or _Defaults.palette,\n        low=np.min(source.data[\"by\"]),\n        high=np.max(source.data[\"by\"]),\n    )\n\n    fig.image(\n        image=\"by\",\n        x=\"x\",\n        y=-1,\n        dw=\"dw\",\n        dh=\"dh\",\n        color_mapper=cmap,\n        source=source,\n        name=\"field_images\",\n    )\n    color_bar = bokeh.models.ColorBar(color_mapper=cmap, location=(0, 0))\n    fig.add_layout(color_bar, \"right\")\n\n    fig.frame_width = width or _Defaults.width\n    fig.frame_height = height or _Defaults.height\n\n    if save:\n        if save is True:\n            save = f\"{ele_id}_field.html\"\n        if not pathlib.Path(save).suffix:\n            save = f\"{save}.html\"\n        filename = bokeh.io.save(fig, filename=save)\n        logger.info(f\"Saving plot to {filename!r}\")\n\n    return field, fig\n</code></pre> pytao.plotting.bokeh.BokehGraphManager.plot_grid <pre><code>plot_grid(templates, grid, *, include_layout=False, share_x=None, width=None, height=None, figsize=None, layout_height=None, xlim=None, ylim=None, curves=None, settings=None, save=None)\n</code></pre> <p>Plot graphs on a grid with Bokeh.</p> <p>Parameters:</p> Name Type Description Default <code>templates</code> <code>list of str</code> <p>Graph template names.</p> required <code>grid</code> <code>(nrows, ncols)</code> <p>Grid the provided graphs into this many rows and columns.</p> required <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom of each column.</p> <code>False</code> <code>share_x</code> <code>bool or None</code> <p>Share x-axes where sensible (<code>None</code>) or force sharing x-axes (True) for all plots.</p> <code>None</code> <code>figsize</code> <code>(int, int)</code> <p>Figure size. Alternative to specifying <code>width</code> and <code>height</code> separately.  This takes precedence over <code>width</code> and <code>height</code>.</p> <code>None</code> <code>width</code> <code>int</code> <p>Width of the whole plot.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the whole plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Height of the layout plot.</p> <code>None</code> <code>xlim</code> <code>list of (float, float)</code> <p>X axis limits for each graph.</p> <code>None</code> <code>ylim</code> <code>list of (float, float)</code> <p>Y axis limits for each graph.</p> <code>None</code> <code>curves</code> <code>list of Dict[int, TaoCurveSettings]</code> <p>One dictionary per graph, with each dictionary mapping the curve index to curve settings. These settings will be applied to the placed graphs prior to plotting.</p> <code>None</code> <code>settings</code> <code>list of TaoGraphSettings</code> <p>Graph customization settings, per graph.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <code>BokehAppCreator</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot_grid(\n    self,\n    templates: List[str],\n    grid: Tuple[int, int],\n    *,\n    include_layout: bool = False,\n    share_x: Optional[bool] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    figsize: Optional[Tuple[int, int]] = None,\n    layout_height: Optional[int] = None,\n    xlim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    ylim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    curves: Optional[List[CurveIndexToCurve]] = None,\n    settings: Optional[List[TaoGraphSettings]] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n):\n    \"\"\"\n    Plot graphs on a grid with Bokeh.\n\n    Parameters\n    ----------\n    templates : list of str\n        Graph template names.\n    grid : (nrows, ncols), optional\n        Grid the provided graphs into this many rows and columns.\n    include_layout : bool, default=False\n        Include a layout plot at the bottom of each column.\n    share_x : bool or None, default=None\n        Share x-axes where sensible (`None`) or force sharing x-axes (True)\n        for all plots.\n    figsize : (int, int), optional\n        Figure size. Alternative to specifying `width` and `height`\n        separately.  This takes precedence over `width` and `height`.\n    width : int, optional\n        Width of the whole plot.\n    height : int, optional\n        Height of the whole plot.\n    layout_height : int, optional\n        Height of the layout plot.\n    xlim : list of (float, float), optional\n        X axis limits for each graph.\n    ylim : list of (float, float), optional\n        Y axis limits for each graph.\n    curves : list of Dict[int, TaoCurveSettings], optional\n        One dictionary per graph, with each dictionary mapping the curve\n        index to curve settings. These settings will be applied to the\n        placed graphs prior to plotting.\n    settings : list of TaoGraphSettings, optional\n        Graph customization settings, per graph.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n\n    Returns\n    -------\n    list of graphs\n\n    BokehAppCreator\n    \"\"\"\n    graphs = self.prepare_grid_by_names(\n        template_names=templates,\n        curves=curves,\n        settings=settings,\n        xlim=xlim,\n        ylim=ylim,\n    )\n\n    if figsize is not None:\n        width, height = figsize\n\n    app = BokehAppCreator(\n        manager=self,\n        graphs=graphs,\n        share_x=share_x,\n        include_variables=False,\n        grid=grid,\n        width=width or _Defaults.width,\n        height=height or _Defaults.stacked_height,\n        layout_height=layout_height or _Defaults.layout_height,\n        include_layout=include_layout,\n        xlim=xlim,\n        ylim=ylim,\n    )\n\n    if save:\n        if save is True:\n            save = \"\"\n        filename = app.save(save)\n        logger.info(f\"Saving plot to {filename!r}\")\n    return graphs, app\n</code></pre> pytao.plotting.bokeh.BokehGraphManager.to_bokeh_graph <pre><code>to_bokeh_graph(graph)\n</code></pre> <p>Create a Bokeh graph instance from the backend-agnostic AnyGraph version.</p> <p>For example, <code>BasicGraph</code> becomes <code>BokehBasicGraph</code>.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>AnyGraph</code> required <p>Returns:</p> Type Description <code>AnyBokehGraph</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def to_bokeh_graph(self, graph: AnyGraph) -&gt; AnyBokehGraph:\n    \"\"\"\n    Create a Bokeh graph instance from the backend-agnostic AnyGraph version.\n\n    For example, `BasicGraph` becomes `BokehBasicGraph`.\n\n    Parameters\n    ----------\n    graph : AnyGraph\n\n    Returns\n    -------\n    AnyBokehGraph\n    \"\"\"\n    if isinstance(graph, BasicGraph):\n        return BokehBasicGraph(self, graph)\n    elif isinstance(graph, LatticeLayoutGraph):\n        return BokehLatticeLayoutGraph(self, graph)\n    elif isinstance(graph, FloorPlanGraph):\n        return BokehFloorPlanGraph(self, graph)\n    raise NotImplementedError(type(graph).__name__)\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.NotebookGraphManager","title":"pytao.plotting.bokeh.NotebookGraphManager","text":"<pre><code>NotebookGraphManager(tao)\n</code></pre> <p>               Bases: <code>BokehGraphManager</code></p> <p>Jupyter notebook Bokeh backend graph manager.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def __init__(self, tao: Tao) -&gt; None:\n    self.tao = tao\n    self.regions = {}\n    self._to_place = {}\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.NotebookGraphManager-functions","title":"Functions","text":"pytao.plotting.bokeh.NotebookGraphManager.plot <pre><code>plot(template, *, region_name=None, include_layout=True, sizing_mode=None, width=None, height=None, layout_height=None, share_x=None, vars=False, xlim=None, ylim=None, notebook_handle=False, save=None, curves=None, settings=None)\n</code></pre> <p>Plot a graph with Bokeh.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Graph template name.</p> required <code>region_name</code> <code>str</code> <p>Graph region name.</p> <code>None</code> <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom, if not already placed and if appropriate (i.e., another plot uses longitudinal coordinates on the x-axis).</p> <code>True</code> <code>sizing_mode</code> <code>Optional[SizingModeType]</code> <p>Set the sizing mode for all graphs.  Default is configured on a per-graph basis, typically \"inherit\".</p> <code>None</code> <code>width</code> <code>int</code> <p>Width of each plot.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of each plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Height of the layout plot.</p> <code>None</code> <code>share_x</code> <code>bool or None</code> <p>Share x-axes where sensible (<code>None</code>) or force sharing x-axes (True) for all plots.</p> <code>None</code> <code>vars</code> <code>bool</code> <p>Show Tao variables as adjustable widgets, like \"single mode\".</p> <code>False</code> <code>xlim</code> <code>(float, float)</code> <p>X axis limits.</p> <code>None</code> <code>ylim</code> <code>(float, float)</code> <p>Y axis limits.</p> <code>None</code> <code>curves</code> <code>Dict[int, TaoCurveSettings]</code> <p>Dictionary of curve index to curve settings. These settings will be applied to the placed graph prior to plotting.</p> <code>None</code> <code>settings</code> <code>TaoGraphSettings</code> <p>Graph customization settings.</p> <code>None</code> <code>save</code> <code>str or bool</code> <p>Save the plot to a static HTML file with the given name. If <code>True</code>, saves to a filename based on the plot title.</p> <code>None</code> <p>Returns:</p> Type Description <code>BokehAppCreator</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot(\n    self,\n    template: str,\n    *,\n    region_name: Optional[str] = None,\n    include_layout: bool = True,\n    sizing_mode: Optional[SizingModeType] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    layout_height: Optional[int] = None,\n    share_x: Optional[bool] = None,\n    vars: bool = False,\n    xlim: Optional[Limit] = None,\n    ylim: Optional[Limit] = None,\n    notebook_handle: bool = False,\n    save: Union[bool, str, pathlib.Path, None] = None,\n    curves: Optional[Dict[int, TaoCurveSettings]] = None,\n    settings: Optional[TaoGraphSettings] = None,\n) -&gt; Tuple[List[AnyGraph], BokehAppCreator]:\n    \"\"\"\n    Plot a graph with Bokeh.\n\n    Parameters\n    ----------\n    template : str\n        Graph template name.\n    region_name : str, optional\n        Graph region name.\n    include_layout : bool\n        Include a layout plot at the bottom, if not already placed and if\n        appropriate (i.e., another plot uses longitudinal coordinates on\n        the x-axis).\n    sizing_mode : Optional[SizingModeType]\n        Set the sizing mode for all graphs.  Default is configured on a\n        per-graph basis, typically \"inherit\".\n    width : int, optional\n        Width of each plot.\n    height : int, optional\n        Height of each plot.\n    layout_height : int, optional\n        Height of the layout plot.\n    share_x : bool or None, default=None\n        Share x-axes where sensible (`None`) or force sharing x-axes (True)\n        for all plots.\n    vars : bool, default=False\n        Show Tao variables as adjustable widgets, like \"single mode\".\n    xlim : (float, float), optional\n        X axis limits.\n    ylim : (float, float), optional\n        Y axis limits.\n    curves : Dict[int, TaoCurveSettings], optional\n        Dictionary of curve index to curve settings. These settings will be\n        applied to the placed graph prior to plotting.\n    settings : TaoGraphSettings, optional\n        Graph customization settings.\n    save : str or bool, optional\n        Save the plot to a static HTML file with the given name.\n        If `True`, saves to a filename based on the plot title.\n\n    Returns\n    -------\n    BokehAppCreator\n    \"\"\"\n    graphs, app = super().plot(\n        region_name=region_name,\n        template=template,\n        include_layout=include_layout,\n        sizing_mode=sizing_mode,\n        width=width,\n        height=height,\n        layout_height=layout_height,\n        xlim=xlim,\n        ylim=ylim,\n        curves=curves,\n        settings=settings,\n        share_x=share_x,\n        save=save,\n    )\n\n    if vars:\n        app.variables = Variable.from_tao_all(self.tao)\n\n    bokeh.plotting.show(\n        app.create_full_app(),\n        notebook_handle=notebook_handle,\n    )\n    return graphs, app\n</code></pre> pytao.plotting.bokeh.NotebookGraphManager.plot_field <pre><code>plot_field(ele_id, *, colormap=None, radius=0.015, num_points=100, width=None, height=None, x_scale=1.0, save=None)\n</code></pre> <p>Plot field information for a given element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> <code>str</code> <p>Element ID.</p> required <code>colormap</code> <code>str</code> <p>Colormap for the plot. Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".</p> <code>None</code> <code>radius</code> <code>float</code> <p>Radius.</p> <code>0.015</code> <code>num_points</code> <code>int</code> <p>Number of data points.</p> <code>100</code> <code>width</code> <code>int</code> <code>None</code> <code>height</code> <code>int</code> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot_field(\n    self,\n    ele_id: str,\n    *,\n    colormap: Optional[str] = None,\n    radius: float = 0.015,\n    num_points: int = 100,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    x_scale: float = 1.0,\n    save: Union[bool, str, pathlib.Path, None] = None,\n):\n    \"\"\"\n    Plot field information for a given element.\n\n    Parameters\n    ----------\n    ele_id : str\n        Element ID.\n    colormap : str, optional\n        Colormap for the plot.\n        Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".\n    radius : float, default=0.015\n        Radius.\n    num_points : int, default=100\n        Number of data points.\n    width : int, optional\n    height : int, optional\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n    \"\"\"\n    field, fig = super().plot_field(\n        ele_id,\n        colormap=colormap,\n        radius=radius,\n        num_points=num_points,\n        width=width,\n        height=height,\n        save=save,\n        x_scale=x_scale,\n    )\n    bokeh.plotting.show(fig, notebook_handle=True)\n\n    return field, fig\n</code></pre> pytao.plotting.bokeh.NotebookGraphManager.plot_grid <pre><code>plot_grid(templates, grid, *, curves=None, settings=None, include_layout=False, share_x=None, vars=False, figsize=None, layout_height=None, xlim=None, ylim=None, width=None, height=None, save=None)\n</code></pre> <p>Plot graphs on a grid with Bokeh.</p> <p>Parameters:</p> Name Type Description Default <code>templates</code> <code>list of str</code> <p>Graph template names.</p> required <code>grid</code> <code>(nrows, ncols)</code> <p>Grid the provided graphs into this many rows and columns.</p> required <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom of each column.</p> <code>False</code> <code>share_x</code> <code>bool or None</code> <p>Share x-axes where sensible (<code>None</code>) or force sharing x-axes (True) for all plots.</p> <code>None</code> <code>vars</code> <code>bool</code> <p>Show Tao variables as adjustable widgets, like \"single mode\".</p> <code>False</code> <code>figsize</code> <code>(int, int)</code> <p>Figure size. Alternative to specifying <code>width</code> and <code>height</code> separately.  This takes precedence over <code>width</code> and <code>height</code>.</p> <code>None</code> <code>width</code> <code>int</code> <p>Width of the whole plot.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the whole plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Height of the layout plot.</p> <code>None</code> <code>xlim</code> <code>list of (float, float)</code> <p>X axis limits for each graph.</p> <code>None</code> <code>ylim</code> <code>list of (float, float)</code> <p>Y axis limits for each graph.</p> <code>None</code> <code>curves</code> <code>list of Dict[int, TaoCurveSettings]</code> <p>One dictionary per graph, with each dictionary mapping the curve index to curve settings. These settings will be applied to the placed graphs prior to plotting.</p> <code>None</code> <code>settings</code> <code>list of TaoGraphSettings</code> <p>Graph customization settings, per graph.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <code>BokehAppCreator</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def plot_grid(\n    self,\n    templates: List[str],\n    grid: Tuple[int, int],\n    *,\n    curves: Optional[List[CurveIndexToCurve]] = None,\n    settings: Optional[List[TaoGraphSettings]] = None,\n    include_layout: bool = False,\n    share_x: Optional[bool] = None,\n    vars: bool = False,\n    figsize: Optional[Tuple[int, int]] = None,\n    layout_height: Optional[int] = None,\n    xlim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    ylim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n):\n    \"\"\"\n    Plot graphs on a grid with Bokeh.\n\n    Parameters\n    ----------\n    templates : list of str\n        Graph template names.\n    grid : (nrows, ncols), optional\n        Grid the provided graphs into this many rows and columns.\n    include_layout : bool, default=False\n        Include a layout plot at the bottom of each column.\n    share_x : bool or None, default=None\n        Share x-axes where sensible (`None`) or force sharing x-axes (True)\n        for all plots.\n    vars : bool, default=False\n        Show Tao variables as adjustable widgets, like \"single mode\".\n    figsize : (int, int), optional\n        Figure size. Alternative to specifying `width` and `height`\n        separately.  This takes precedence over `width` and `height`.\n    width : int, optional\n        Width of the whole plot.\n    height : int, optional\n        Height of the whole plot.\n    layout_height : int, optional\n        Height of the layout plot.\n    xlim : list of (float, float), optional\n        X axis limits for each graph.\n    ylim : list of (float, float), optional\n        Y axis limits for each graph.\n    curves : list of Dict[int, TaoCurveSettings], optional\n        One dictionary per graph, with each dictionary mapping the curve\n        index to curve settings. These settings will be applied to the\n        placed graphs prior to plotting.\n    settings : list of TaoGraphSettings, optional\n        Graph customization settings, per graph.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n\n    Returns\n    -------\n    list of graphs\n\n    BokehAppCreator\n    \"\"\"\n    graphs, app = super().plot_grid(\n        templates=templates,\n        grid=grid,\n        curves=curves,\n        settings=settings,\n        include_layout=include_layout,\n        share_x=share_x,\n        figsize=figsize,\n        width=width,\n        height=height,\n        xlim=xlim,\n        ylim=ylim,\n        layout_height=layout_height,\n        save=save,\n    )\n    if vars:\n        app.variables = Variable.from_tao_all(self.tao)\n    bokeh.plotting.show(app.create_full_app())\n    return graphs, app\n</code></pre>"},{"location":"api/plot-bokeh/#pytao.plotting.bokeh-functions","title":"Functions","text":""},{"location":"api/plot-bokeh/#pytao.plotting.bokeh.set_defaults","title":"pytao.plotting.bokeh.set_defaults","text":"<pre><code>set_defaults(width=None, height=None, stacked_height=None, layout_height=None, palette=None, show_bokeh_logo=None, tools=None, grid_toolbar_location=None, lattice_layout_tools=None, floor_plan_tools=None, floor_plan_annotate_elements=None, layout_font_size=None, floor_plan_font_size=None, limit_scale_factor=None, max_data_points=None, variables_per_row=None, show_sliders=None)\n</code></pre> <p>Change defaults used for Bokeh plots.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Plot default width.</p> <code>None</code> <code>height</code> <code>int</code> <p>Plot default height.</p> <code>None</code> <code>stacked_height</code> <code>int</code> <p>Stacked plot default height (<code>plot_grid</code>)</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Layout plot height.</p> <code>None</code> <code>palette</code> <code>str</code> <p>Palette for <code>plot_field</code>.</p> <code>None</code> <code>show_bokeh_logo</code> <code>bool</code> <p>Show Bokeh logo on each plot.</p> <code>None</code> <code>tools</code> <code>str</code> <p>Bokeh tools to use.</p> <code>\"pan,wheel_zoom,box_zoom,reset,hover,crosshair\"</code> <code>grid_toolbar_location</code> <code>str</code> <p>Toolbar location for gridded plots.</p> <code>\"right\"</code> <code>lattice_layout_tools</code> <code>str</code> <p>Bokeh tools to use specifically for lattice layouts.</p> <code>None</code> <code>floor_plan_tools</code> <code>str</code> <p>Bokeh tools to use specifically for floor plan layouts.</p> <code>None</code> <code>layout_font_size</code> <code>str</code> <p>Font size to use in lattice layouts.</p> <code>None</code> <code>floor_plan_font_size</code> <code>str</code> <p>Font size to use in floor plan layouts.</p> <code>None</code> <code>limit_scale_factor</code> <code>float</code> <p>View limits from Tao are scaled by this factor.  This can be used to ensure that all data is visible despite drawing method differences.</p> <code>1.01</code> <code>max_data_points</code> <code>int</code> <p>Maximum number of data points to show in the slider.</p> <code>None</code> <code>variables_per_row</code> <code>int</code> <p>Variables to list per row when in single mode (i.e., <code>vars=True</code>).</p> <code>2</code> <code>show_sliders</code> <code>bool</code> <p>Show sliders alongside the spinners in single mode.</p> <code>True</code> Source code in <code>pytao/plotting/bokeh.py</code> <pre><code>def set_defaults(\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    stacked_height: Optional[int] = None,\n    layout_height: Optional[int] = None,\n    palette: Optional[str] = None,\n    show_bokeh_logo: Optional[bool] = None,\n    tools: Optional[str] = None,\n    grid_toolbar_location: Optional[str] = None,\n    lattice_layout_tools: Optional[str] = None,\n    floor_plan_tools: Optional[str] = None,\n    floor_plan_annotate_elements: Optional[bool] = None,\n    layout_font_size: Optional[str] = None,\n    floor_plan_font_size: Optional[str] = None,\n    limit_scale_factor: Optional[float] = None,\n    max_data_points: Optional[int] = None,\n    variables_per_row: Optional[int] = None,\n    show_sliders: Optional[bool] = None,\n):\n    \"\"\"\n    Change defaults used for Bokeh plots.\n\n    Parameters\n    ----------\n    width : int, optional\n        Plot default width.\n    height : int, optional\n        Plot default height.\n    stacked_height : int, optional\n        Stacked plot default height (`plot_grid`)\n    layout_height : int, optional\n        Layout plot height.\n    palette : str, optional\n        Palette for `plot_field`.\n    show_bokeh_logo : bool, optional\n        Show Bokeh logo on each plot.\n    tools : str, default=\"pan,wheel_zoom,box_zoom,reset,hover,crosshair\"\n        Bokeh tools to use.\n    grid_toolbar_location : str, default=\"right\"\n        Toolbar location for gridded plots.\n    lattice_layout_tools : str, optional\n        Bokeh tools to use specifically for lattice layouts.\n    floor_plan_tools : str, optional\n        Bokeh tools to use specifically for floor plan layouts.\n    layout_font_size : str, optional\n        Font size to use in lattice layouts.\n    floor_plan_font_size : str, optional\n        Font size to use in floor plan layouts.\n    limit_scale_factor : float, default=1.01\n        View limits from Tao are scaled by this factor.  This can be used to\n        ensure that all data is visible despite drawing method differences.\n    max_data_points : int, optional\n        Maximum number of data points to show in the slider.\n    variables_per_row : int, default=2\n        Variables to list per row when in single mode (i.e., `vars=True`).\n    show_sliders : bool, default=True\n        Show sliders alongside the spinners in single mode.\n    \"\"\"\n\n    if width is not None:\n        _Defaults.width = int(width)\n    if height is not None:\n        _Defaults.height = int(height)\n    if stacked_height is not None:\n        _Defaults.stacked_height = int(stacked_height)\n    if layout_height is not None:\n        _Defaults.layout_height = int(layout_height)\n    if palette is not None:\n        _Defaults.palette = palette\n    if show_bokeh_logo is not None:\n        _Defaults.show_bokeh_logo = bool(show_bokeh_logo)\n    if tools is not None:\n        _Defaults.tools = tools\n    if grid_toolbar_location is not None:\n        _Defaults.grid_toolbar_location = grid_toolbar_location\n    if lattice_layout_tools is not None:\n        _Defaults.lattice_layout_tools = lattice_layout_tools\n    if floor_plan_tools is not None:\n        _Defaults.floor_plan_tools = floor_plan_tools\n    if floor_plan_annotate_elements is not None:\n        _Defaults.floor_plan_annotate_elements = floor_plan_annotate_elements\n    if layout_font_size is not None:\n        _Defaults.layout_font_size = layout_font_size\n    if floor_plan_font_size is not None:\n        _Defaults.floor_plan_font_size = floor_plan_font_size\n    if limit_scale_factor is not None:\n        _Defaults.limit_scale_factor = float(limit_scale_factor)\n    if max_data_points is not None:\n        _Defaults.max_data_points = int(max_data_points)\n    if variables_per_row is not None:\n        _Defaults.variables_per_row = int(variables_per_row)\n    if show_sliders is not None:\n        _Defaults.show_sliders = bool(show_sliders)\n    return {\n        key: value\n        for key, value in vars(_Defaults).items()\n        if not key.startswith(\"_\") and key not in {\"get_size_for_class\"}\n    }\n</code></pre>"},{"location":"api/plot-mpl/","title":"Matplotlib","text":""},{"location":"api/plot-mpl/#pytao.plotting.mpl","title":"pytao.plotting.mpl","text":""},{"location":"api/plot-mpl/#pytao.plotting.mpl-classes","title":"Classes","text":""},{"location":"api/plot-mpl/#pytao.plotting.mpl.MatplotlibGraphManager","title":"pytao.plotting.mpl.MatplotlibGraphManager","text":"<pre><code>MatplotlibGraphManager(tao)\n</code></pre> <p>               Bases: <code>GraphManager</code></p> <p>Matplotlib backend graph manager.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def __init__(self, tao: Tao) -&gt; None:\n    self.tao = tao\n    self.regions = {}\n    self._to_place = {}\n</code></pre>"},{"location":"api/plot-mpl/#pytao.plotting.mpl.MatplotlibGraphManager-functions","title":"Functions","text":"pytao.plotting.mpl.MatplotlibGraphManager.plot <pre><code>plot(template, *, region_name=None, include_layout=True, tight_layout=True, width=None, height=None, layout_height=None, figsize=None, share_x=True, xlim=None, ylim=None, save=None, settings=None, curves=None, axes=None)\n</code></pre> <p>Plot a graph with Matplotlib.</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>Graph template name.</p> required <code>region_name</code> <code>str</code> <p>Graph region name.</p> <code>None</code> <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom, if not already placed and if appropriate (i.e., another plot uses longitudinal coordinates on the x-axis).</p> <code>True</code> <code>tight_layout</code> <code>bool</code> <p>Apply a tight layout with matplotlib.</p> <code>True</code> <code>figsize</code> <code>(float, float)</code> <p>Figure size. Alternative to specifying <code>width</code> and <code>height</code> separately.  This takes precedence over <code>width</code> and <code>height</code>. Defaults to Matplotlib's `rcParams[\"figure.figsize\"]``.</p> <code>None</code> <code>width</code> <code>float</code> <p>Width of the whole plot.</p> <code>None</code> <code>height</code> <code>float</code> <p>Height of the whole plot.</p> <code>None</code> <code>layout_height</code> <code>float</code> <p>Normalized height of the layout plot - assuming regular plots are of height 1.  Default is 0.5 which is configurable with <code>set_defaults</code>.</p> <code>None</code> <code>share_x</code> <code>bool</code> <p>Share x-axes for all plots.</p> <code>True</code> <code>xlim</code> <code>(float, float)</code> <p>X axis limits.</p> <code>None</code> <code>ylim</code> <code>(float, float)</code> <p>Y axis limits.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> <code>curves</code> <code>Dict[int, TaoCurveSettings]</code> <p>Dictionary of curve index to curve settings. These settings will be applied to the placed graph prior to plotting.</p> <code>None</code> <code>settings</code> <code>TaoGraphSettings</code> <p>Graph customization settings.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <p>List of plotted graphs.</p> <code>Figure</code> <p>To gain access to the resulting plot objects, use the backend's <code>plot</code> method directly.</p> <code>List[Axes]</code> Source code in <code>pytao/plotting/mpl.py</code> <pre><code>def plot(\n    self,\n    template: str,\n    *,\n    region_name: Optional[str] = None,\n    include_layout: bool = True,\n    tight_layout: bool = True,\n    width: Optional[float] = None,\n    height: Optional[float] = None,\n    layout_height: Optional[float] = None,\n    figsize: Optional[Tuple[float, float]] = None,\n    share_x: bool = True,\n    xlim: Optional[Limit] = None,\n    ylim: Optional[Limit] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n    settings: Optional[TaoGraphSettings] = None,\n    curves: Optional[Dict[int, TaoCurveSettings]] = None,\n    axes: Optional[List[matplotlib.axes.Axes]] = None,\n):\n    \"\"\"\n    Plot a graph with Matplotlib.\n\n    Parameters\n    ----------\n    template : str\n        Graph template name.\n    region_name : str, optional\n        Graph region name.\n    include_layout : bool, optional\n        Include a layout plot at the bottom, if not already placed and if\n        appropriate (i.e., another plot uses longitudinal coordinates on\n        the x-axis).\n    tight_layout : bool, default=True\n        Apply a tight layout with matplotlib.\n    figsize : (float, float), optional\n        Figure size. Alternative to specifying `width` and `height`\n        separately.  This takes precedence over `width` and `height`.\n        Defaults to Matplotlib's `rcParams[\"figure.figsize\"]``.\n    width : float, optional\n        Width of the whole plot.\n    height : float, optional\n        Height of the whole plot.\n    layout_height : float, optional\n        Normalized height of the layout plot - assuming regular plots are\n        of height 1.  Default is 0.5 which is configurable with `set_defaults`.\n    share_x : bool, default=True\n        Share x-axes for all plots.\n    xlim : (float, float), optional\n        X axis limits.\n    ylim : (float, float), optional\n        Y axis limits.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n    curves : Dict[int, TaoCurveSettings], optional\n        Dictionary of curve index to curve settings. These settings will be\n        applied to the placed graph prior to plotting.\n    settings : TaoGraphSettings, optional\n        Graph customization settings.\n\n    Returns\n    -------\n    list of graphs\n        List of plotted graphs.\n    matplotlib.Figure\n        To gain access to the resulting plot objects, use the backend's\n        `plot` method directly.\n    List[matplotlib.axes.Axes]\n    \"\"\"\n    graphs = self.prepare_graphs_by_name(\n        template_name=template,\n        region_name=region_name,\n        curves=curves,\n        settings=settings,\n        xlim=xlim,\n        ylim=ylim,\n    )\n    if not graphs:\n        raise UnsupportedGraphError(f\"No supported plots from this template: {template}\")\n\n    figsize = get_figsize(figsize, width, height)\n\n    if (\n        include_layout\n        and not any(isinstance(graph, LatticeLayoutGraph) for graph in graphs)\n        and any(graph.is_s_plot for graph in graphs)\n    ):\n        layout_graph = self.lattice_layout_graph\n        graphs.append(layout_graph)\n    else:\n        include_layout = False\n\n    if axes is not None:\n        if len(axes) != len(graphs):\n            raise ValueError(\n                f\"Not enough axes provided. Expected {len(graphs)}, got {len(axes)}\"\n            )\n        fig = axes[0].figure\n    else:\n        if include_layout:\n            layout_height = layout_height or _Defaults.layout_height\n            fig, gs = plt.subplots(\n                nrows=len(graphs),\n                ncols=1,\n                sharex=share_x,\n                height_ratios=[1] * (len(graphs) - 1) + [layout_height],\n                figsize=figsize,\n                squeeze=False,\n            )\n        else:\n            fig, gs = plt.subplots(\n                nrows=len(graphs),\n                ncols=1,\n                sharex=share_x,\n                figsize=figsize,\n                squeeze=False,\n            )\n        axes = list(gs[:, 0])\n        assert axes is not None\n\n    if include_layout:\n        layout_graph = self.lattice_layout_graph\n\n    for ax, graph in zip(axes, graphs):\n        try:\n            plot(graph, ax)\n        except UnsupportedGraphError:\n            continue\n\n        if isinstance(graph, LatticeLayoutGraph) and len(graphs) &gt; 1:\n            # Do not set ylimits if the user specifically requested a layout graph\n            yl = None\n        else:\n            yl = ylim\n\n        setup_matplotlib_ticks(graph, ax, user_xlim=xlim, user_ylim=yl)\n\n    if fig is not None:\n        if tight_layout:\n            fig.tight_layout()\n\n        if save:\n            title = graphs[0].title or f\"plot-{time.time()}\"\n            if save is True:\n                save = f\"{title}.png\"\n            logger.info(f\"Saving plot to {save!r}\")\n            fig.savefig(save)\n\n    return graphs, fig, axes\n</code></pre> pytao.plotting.mpl.MatplotlibGraphManager.plot_field <pre><code>plot_field(ele_id, *, colormap=None, radius=0.015, num_points=100, figsize=None, width=4, height=4, x_scale=1000.0, ax=None, save=None)\n</code></pre> <p>Plot field information for a given element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> <code>str</code> <p>Element ID.</p> required <code>colormap</code> <code>str</code> <p>Colormap for the plot. Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".</p> <code>None</code> <code>radius</code> <code>float</code> <p>Radius.</p> <code>0.015</code> <code>num_points</code> <code>int</code> <p>Number of data points.</p> <code>100</code> <code>ax</code> <code>Axes</code> <p>The axes to place the plot in.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> Source code in <code>pytao/plotting/mpl.py</code> <pre><code>def plot_field(\n    self,\n    ele_id: str,\n    *,\n    colormap: Optional[str] = None,\n    radius: float = 0.015,\n    num_points: int = 100,\n    figsize: Optional[Tuple[float, float]] = None,\n    width: int = 4,\n    height: int = 4,\n    x_scale: float = 1e3,\n    ax: Optional[matplotlib.axes.Axes] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n):\n    \"\"\"\n    Plot field information for a given element.\n\n    Parameters\n    ----------\n    ele_id : str\n        Element ID.\n    colormap : str, optional\n        Colormap for the plot.\n        Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"\".\n    radius : float, default=0.015\n        Radius.\n    num_points : int, default=100\n        Number of data points.\n    ax : matplotlib.axes.Axes, optional\n        The axes to place the plot in.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n    \"\"\"\n    user_specified_axis = ax is not None\n\n    figsize = get_figsize(figsize, width, height)\n\n    if ax is None:\n        _, ax = plt.subplots(figsize=figsize)\n    assert ax is not None\n\n    colormap = colormap or _Defaults.colormap\n\n    field = ElementField.from_tao(self.tao, ele_id, num_points=num_points, radius=radius)\n    mesh = ax.pcolormesh(\n        np.asarray(field.s),\n        np.asarray(field.x) * x_scale,\n        np.asarray(field.by),\n        # vmin=min_field,\n        # vmax=max_field,\n        cmap=colormap,\n    )\n    fig = ax.figure\n    if fig is not None:\n        if not user_specified_axis:\n            fig.colorbar(mesh)\n\n        if save:\n            if save is True:\n                save = f\"{ele_id}_field.png\"\n            if not pathlib.Path(save).suffix:\n                save = f\"{save}.png\"\n            logger.info(f\"Saving plot to {save!r}\")\n            fig.savefig(save)\n\n    return field, fig, ax\n</code></pre> pytao.plotting.mpl.MatplotlibGraphManager.plot_grid <pre><code>plot_grid(templates, grid, *, include_layout=False, figsize=None, tight_layout=True, share_x='col', layout_height=None, width=None, height=None, xlim=None, ylim=None, curves=None, settings=None, save=None, axes=None)\n</code></pre> <p>Plot graphs on a grid with Matplotlib.</p> <p>Parameters:</p> Name Type Description Default <code>templates</code> <code>list of str</code> <p>Graph template names.</p> required <code>grid</code> <code>(nrows, ncols)</code> <p>Grid the provided graphs into this many rows and columns.</p> required <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom of each column.</p> <code>False</code> <code>tight_layout</code> <code>bool</code> <p>Apply a tight layout with matplotlib.</p> <code>True</code> <code>figsize</code> <code>(float, float)</code> <p>Figure size. Alternative to specifying <code>width</code> and <code>height</code> separately.  This takes precedence over <code>width</code> and <code>height</code>. Defaults to Matplotlib's `rcParams[\"figure.figsize\"]``.</p> <code>None</code> <code>width</code> <code>float</code> <p>Width of the whole plot.</p> <code>None</code> <code>height</code> <code>float</code> <p>Height of the whole plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Normalized height of the layout plot - assuming regular plots are of height 1.  Default is 0.5 which is configurable with <code>set_defaults</code>.</p> <code>None</code> <code>share_x</code> <code>(bool, 'row', 'col', 'all')</code> <p>Share all x-axes (<code>True</code> or \"all\"), share x-axes in rows (\"row\") or in columns (\"col\").</p> <code>\"col\"</code> <code>xlim</code> <code>list of (float, float)</code> <p>X axis limits for each graph.</p> <code>None</code> <code>ylim</code> <code>list of (float, float)</code> <p>Y axis limits for each graph.</p> <code>None</code> <code>curves</code> <code>list of Dict[int, TaoCurveSettings]</code> <p>One dictionary per graph, with each dictionary mapping the curve index to curve settings. These settings will be applied to the placed graphs prior to plotting.</p> <code>None</code> <code>settings</code> <code>list of TaoGraphSettings</code> <p>Graph customization settings, per graph.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <p>List of plotted graphs.</p> <code>Figure</code> <p>To gain access to the resulting plot objects, use the backend's <code>plot</code> method directly.</p> <code>List[List[Axes]]</code> <p>Gridded axes, accessible with <code>grid[row][col]</code>.</p> Source code in <code>pytao/plotting/mpl.py</code> <pre><code>def plot_grid(\n    self,\n    templates: List[str],\n    grid: Tuple[int, int],\n    *,\n    include_layout: bool = False,\n    figsize: Optional[Tuple[float, float]] = None,\n    tight_layout: bool = True,\n    share_x: Union[bool, Literal[\"row\", \"col\", \"all\"]] = \"col\",\n    layout_height: Optional[float] = None,\n    width: Optional[float] = None,\n    height: Optional[float] = None,\n    xlim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    ylim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    curves: Optional[List[Dict[int, TaoCurveSettings]]] = None,\n    settings: Optional[List[TaoGraphSettings]] = None,\n    save: Union[bool, str, pathlib.Path, None] = None,\n    axes: Optional[List[List[matplotlib.axes.Axes]]] = None,\n):\n    \"\"\"\n    Plot graphs on a grid with Matplotlib.\n\n    Parameters\n    ----------\n    templates : list of str\n        Graph template names.\n    grid : (nrows, ncols), optional\n        Grid the provided graphs into this many rows and columns.\n    include_layout : bool, default=False\n        Include a layout plot at the bottom of each column.\n    tight_layout : bool, default=True\n        Apply a tight layout with matplotlib.\n    figsize : (float, float), optional\n        Figure size. Alternative to specifying `width` and `height`\n        separately.  This takes precedence over `width` and `height`.\n        Defaults to Matplotlib's `rcParams[\"figure.figsize\"]``.\n    width : float, optional\n        Width of the whole plot.\n    height : float, optional\n        Height of the whole plot.\n    layout_height : int, optional\n        Normalized height of the layout plot - assuming regular plots are\n        of height 1.  Default is 0.5 which is configurable with `set_defaults`.\n    share_x : bool, \"row\", \"col\", \"all\", default=\"col\"\n        Share all x-axes (`True` or \"all\"), share x-axes in rows (\"row\") or\n        in columns (\"col\").\n    xlim : list of (float, float), optional\n        X axis limits for each graph.\n    ylim : list of (float, float), optional\n        Y axis limits for each graph.\n    curves : list of Dict[int, TaoCurveSettings], optional\n        One dictionary per graph, with each dictionary mapping the curve\n        index to curve settings. These settings will be applied to the\n        placed graphs prior to plotting.\n    settings : list of TaoGraphSettings, optional\n        Graph customization settings, per graph.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n\n    Returns\n    -------\n    list of graphs\n        List of plotted graphs.\n    matplotlib.Figure\n        To gain access to the resulting plot objects, use the backend's\n        `plot` method directly.\n    List[List[matplotlib.axes.Axes]]\n        Gridded axes, accessible with `grid[row][col]`.\n    \"\"\"\n\n    graphs = self.prepare_grid_by_names(\n        template_names=templates,\n        curves=curves,\n        settings=settings,\n        xlim=xlim,\n        ylim=ylim,\n    )\n    nrows, ncols = grid\n    height_ratios = None\n\n    figsize = get_figsize(figsize, width, height)\n\n    if include_layout:\n        layout_height = layout_height or _Defaults.layout_height\n        empty_graph_count = nrows * ncols - len(templates)\n        if empty_graph_count &lt; ncols:\n            # Add a row for the layout\n            nrows += 1\n        height_ratios = [1] * (nrows - 1) + [layout_height]\n\n    if axes is not None:\n        tight_layout = False\n        fig = None\n    else:\n        fig, gs = plt.subplots(\n            nrows=nrows,\n            ncols=ncols,\n            sharex=share_x,\n            figsize=figsize,\n            squeeze=False,\n            height_ratios=height_ratios,\n        )\n        axes = [list(gs[row, :]) for row in range(nrows)]\n        for row in axes:\n            for ax in row:\n                ax.set_axis_off()\n\n    all_xlim = fix_grid_limits(xlim, num_graphs=len(graphs))\n    all_ylim = fix_grid_limits(ylim, num_graphs=len(graphs))\n\n    rows_cols = [(row, col) for row in range(nrows) for col in range(ncols)]\n\n    for graph, xl, yl, (row, col) in zip(graphs, all_xlim, all_ylim, rows_cols):\n        ax = axes[row][col]\n        try:\n            plot(graph, ax)\n        except UnsupportedGraphError:\n            continue\n\n        ax.set_axis_on()\n        setup_matplotlib_ticks(graph, ax, user_xlim=xl, user_ylim=yl)\n\n    if include_layout:\n        layout_graph = self.lattice_layout_graph\n        for col in range(ncols):\n            ax = axes[-1][col]\n            plot(layout_graph, ax)\n            ax.set_axis_on()\n\n            xl = None\n            if share_x in {\"all\", \"col\", True} and nrows &gt; 1:\n                try:\n                    xl = axes[0][col].get_xlim()\n                except IndexError:\n                    pass\n\n            setup_matplotlib_ticks(layout_graph, ax, user_xlim=xl, user_ylim=None)\n\n    if tight_layout and fig is not None:\n        fig.tight_layout()\n\n    if save and fig is not None:\n        title = graphs[0].title or f\"plot-{time.time()}\"\n        if save is True:\n            save = f\"{title}.png\"\n        logger.info(f\"Saving plot to {save!r}\")\n        fig.savefig(save)\n\n    return graphs, fig, axes\n</code></pre>"},{"location":"api/plot-mpl/#pytao.plotting.mpl-functions","title":"Functions","text":""},{"location":"api/plot-mpl/#pytao.plotting.mpl.setup_matplotlib_axis","title":"pytao.plotting.mpl.setup_matplotlib_axis","text":"<pre><code>setup_matplotlib_axis(graph, ax)\n</code></pre> <p>Configure limits, title, and basic info for the given axes.</p> Source code in <code>pytao/plotting/mpl.py</code> <pre><code>def setup_matplotlib_axis(graph: AnyGraph, ax: matplotlib.axes.Axes):\n    \"\"\"Configure limits, title, and basic info for the given axes.\"\"\"\n    if not graph.show_axes:\n        ax.set_axis_off()\n\n    ax.set_title(pgplot.mpl_string(graph.title))\n    ax.set_xlabel(pgplot.mpl_string(graph.xlabel))\n    ax.set_ylabel(pgplot.mpl_string(graph.ylabel))\n    ax.set_axisbelow(True)\n\n    if graph.draw_grid:\n        ax.grid(graph.draw_grid, which=\"major\", axis=\"both\")\n</code></pre>"},{"location":"api/plot/","title":"Plotting","text":""},{"location":"api/plot/#pytao.plotting.plot","title":"pytao.plotting.plot","text":""},{"location":"api/plot/#pytao.plotting.plot-classes","title":"Classes","text":""},{"location":"api/plot/#pytao.plotting.plot.GraphBase","title":"pytao.plotting.plot.GraphBase","text":""},{"location":"api/plot/#pytao.plotting.plot.GraphBase-functions","title":"Functions","text":"pytao.plotting.plot.GraphBase.update <pre><code>update(manager, *, error_on_new_type=True, raise_if_invalid=False)\n</code></pre> <p>Ask Tao to update the plot region. Returns a new Graph instance.</p> <p>Raises:</p> Type Description <code>GraphInvalidError</code> <p>If <code>raise_if_invalid</code> is set and Tao reports the graph data as invalid.</p> <code>ValueError</code> <p>If <code>error_on_new_type</code> is set and the graph type changes after the update.</p> <code>RuntimeError</code> <p>If the same graph is no longer found after the update.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def update(\n    self,\n    manager: GraphManager,\n    *,\n    error_on_new_type: bool = True,\n    raise_if_invalid: bool = False,\n):\n    \"\"\"\n    Ask Tao to update the plot region. Returns a new Graph instance.\n\n    Raises\n    ------\n    GraphInvalidError\n        If `raise_if_invalid` is set and Tao reports the graph data as\n        invalid.\n    ValueError\n        If `error_on_new_type` is set and the graph type changes after the\n        update.\n    RuntimeError\n        If the same graph is no longer found after the update.\n    \"\"\"\n    try:\n        graphs = manager.prepare_graphs_by_name(\n            region_name=self.region_name,\n            template_name=self.template_name or self.graph_name,\n            ignore_invalid=False,\n            place=False,\n        )\n    except GraphInvalidError:\n        if raise_if_invalid:\n            raise\n        return self\n\n    if self.template_graph_index is not None:\n        return graphs[self.template_graph_index]\n\n    for graph in graphs:\n        if graph.graph_name == self.graph_name:\n            if error_on_new_type and not isinstance(graph, type(self)):\n                raise ValueError(\n                    f\"Graph type changed from {type(self).__name__} to {type(graph).__name__}\"\n                )\n            return graph\n    raise RuntimeError(\"Plot not found after update?\")\n</code></pre>"},{"location":"api/plot/#pytao.plotting.plot.GraphManager","title":"pytao.plotting.plot.GraphManager","text":"<pre><code>GraphManager(tao)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Graph backend manager base class.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def __init__(self, tao: Tao) -&gt; None:\n    self.tao = tao\n    self.regions = {}\n    self._to_place = {}\n</code></pre>"},{"location":"api/plot/#pytao.plotting.plot.GraphManager-attributes","title":"Attributes","text":"pytao.plotting.plot.GraphManager.floor_plan_graph <code>property</code> <pre><code>floor_plan_graph\n</code></pre> <p>The floor plan graph. Placed if not already available.</p> pytao.plotting.plot.GraphManager.lattice_layout_graph <code>property</code> <pre><code>lattice_layout_graph\n</code></pre> <p>The lattice layout graph.  Placed if not already available.</p> pytao.plotting.plot.GraphManager.to_place <code>property</code> <pre><code>to_place\n</code></pre> <p>Graphs to place - region name to graph name.</p>"},{"location":"api/plot/#pytao.plotting.plot.GraphManager-functions","title":"Functions","text":"pytao.plotting.plot.GraphManager.clear <pre><code>clear(region_name='*')\n</code></pre> <p>Clear a single region or all regions.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Defaults to '*', which is all regions.</p> <code>'*'</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def clear(self, region_name: str = \"*\"):\n    \"\"\"\n    Clear a single region or all regions.\n\n    Parameters\n    ----------\n    region_name : str, optional\n        Defaults to '*', which is all regions.\n    \"\"\"\n    try:\n        self.tao.cmd(f\"place -no_buffer {region_name} none\")\n    except RuntimeError as ex:\n        logger.warning(f\"Region clear failed: {ex}\")\n\n    self._clear_region(region_name)\n</code></pre> pytao.plotting.plot.GraphManager.configure_curves <pre><code>configure_curves(region_name, settings, *, graph_name=None)\n</code></pre> <p>Configure curves in a region.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Already-placed region name.</p> required <code>settings</code> <code>Dict[int, TaoCurveSettings]</code> <p>Per-curve settings, keyed by integer curve index (starting at 1).</p> required <code>graph_name</code> <code>str</code> <p>The graph name, if available.  If unspecified, settings will be applied to all plots in the region.</p> <code>None</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def configure_curves(\n    self,\n    region_name: str,\n    settings: Dict[int, TaoCurveSettings],\n    *,\n    graph_name: Optional[str] = None,\n):\n    \"\"\"\n    Configure curves in a region.\n\n    Parameters\n    ----------\n    region_name : str\n        Already-placed region name.\n    settings : Dict[int, TaoCurveSettings]\n        Per-curve settings, keyed by integer curve index (starting at 1).\n    graph_name : str, optional\n        The graph name, if available.  If unspecified, settings will be\n        applied to all plots in the region.\n    \"\"\"\n    if not graph_name:\n        for plot_name in get_plots_in_region(self.tao, region_name):\n            self.configure_curves(region_name, settings=settings, graph_name=plot_name)\n        return\n\n    for curve_idx, curve in settings.items():\n        for command in curve.get_commands(\n            region_name,\n            graph_name,\n            curve_index=curve_idx,\n        ):\n            self.tao.cmd(command)\n</code></pre> pytao.plotting.plot.GraphManager.configure_graph <pre><code>configure_graph(region_name, settings, *, graph_name=None)\n</code></pre> <p>Configure graph settings for a region.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Already-placed region name.</p> required <code>settings</code> <code>TaoGraphSettings</code> <p>Graph customization settings.</p> required <code>graph_name</code> <code>str</code> <p>The graph name, if available.  If unspecified, settings will be applied to all plots in the region.</p> <code>None</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def configure_graph(\n    self,\n    region_name: str,\n    settings: TaoGraphSettings,\n    *,\n    graph_name: Optional[str] = None,\n):\n    \"\"\"\n    Configure graph settings for a region.\n\n    Parameters\n    ----------\n    region_name : str\n        Already-placed region name.\n    settings : TaoGraphSettings\n        Graph customization settings.\n    graph_name : str, optional\n        The graph name, if available.  If unspecified, settings will be\n        applied to all plots in the region.\n    \"\"\"\n    if not graph_name:\n        for plot_name in get_plots_in_region(self.tao, region_name):\n            self.configure_graph(region_name, settings=settings, graph_name=plot_name)\n        return\n\n    graph_info = get_plot_graph_info(self.tao, region_name, graph_name)\n    graph_type = graph_info[\"graph^type\"]\n    for command in settings.get_commands(\n        region_name,\n        graph_name,\n        graph_type=graph_type,\n    ):\n        self.tao.cmd(command)\n</code></pre> pytao.plotting.plot.GraphManager.get_region_to_place_template <pre><code>get_region_to_place_template(template_name)\n</code></pre> <p>Get a region for placing the graph.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def get_region_to_place_template(self, template_name: str) -&gt; str:\n    \"\"\"Get a region for placing the graph.\"\"\"\n    for region_name, to_place in self.to_place.items():\n        if to_place == template_name:\n            logger.debug(\"Graph %s found in region %s\", template_name, region_name)\n            return region_name\n\n    try:\n        region_name = find_unused_plot_region(self.tao, set(self.to_place))\n    except AllPlotRegionsInUseError:\n        region_name = list(self.regions)[0]\n        plots_in_region = list(graph.template_name for graph in self.regions[region_name])\n        if plots_in_region:\n            logger.warning(\n                f\"All plot regions are in use; reusing plot region {region_name} which has graphs: {plots_in_region}\"\n            )\n    else:\n        logger.debug(\"New region for graph %s: %s\", template_name, region_name)\n    return region_name\n</code></pre> pytao.plotting.plot.GraphManager.make_graph <pre><code>make_graph(region_name, graph_name, template_name=None, template_graph_index=None)\n</code></pre> <p>Create a graph instance from an already-placed graph.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>The region name of the graph.</p> required <code>graph_name</code> <code>str</code> <p>The placed graph name (tao_template_graph graph%name).</p> required <code>template_name</code> <code>str</code> <p>The graph template name.</p> <code>None</code> <code>template_graph_index</code> <code>str</code> <p>The zero-based graph index of those placed for <code>template_name</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>AnyGraph</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def make_graph(\n    self,\n    region_name: str,\n    graph_name: str,\n    template_name: Optional[str] = None,\n    template_graph_index: Optional[int] = None,\n) -&gt; AnyGraph:\n    \"\"\"\n    Create a graph instance from an already-placed graph.\n\n    Parameters\n    ----------\n    region_name : str\n        The region name of the graph.\n    graph_name : str\n        The placed graph name (tao_template_graph graph%name).\n    template_name : str, optional\n        The graph template name.\n    template_graph_index : str, optional\n        The zero-based graph index of those placed for `template_name`.\n\n    Returns\n    -------\n    AnyGraph\n    \"\"\"\n    return make_graph(\n        self.tao,\n        region_name=region_name,\n        graph_name=graph_name,\n        template_name=template_name,\n        template_graph_index=template_graph_index,\n    )\n</code></pre> pytao.plotting.plot.GraphManager.place <pre><code>place(template_name, *, region_name=None, ignore_invalid=True)\n</code></pre> <p>Place <code>template_name</code> in <code>region_name</code>.</p> <p>Parameters:</p> Name Type Description Default <code>template_name</code> <code>str</code> <p>The graph template name.</p> required <code>region_name</code> <code>str</code> <p>The region name to place it.  Determined automatically if unspecified.</p> <code>None</code> <code>ignore_invalid</code> <code>bool</code> <p>Ignore graphs marked as invalid by bmad.</p> <code>True</code> <p>Returns:</p> Type Description <code>list of graphs</code> <p>The type of each graph is backend-dependent.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def place(\n    self,\n    template_name: str,\n    *,\n    region_name: Optional[str] = None,\n    ignore_invalid: bool = True,\n) -&gt; List[AnyGraph]:\n    \"\"\"\n    Place `template_name` in `region_name`.\n\n    Parameters\n    ----------\n    template_name : str\n        The graph template name.\n    region_name : str, optional\n        The region name to place it.  Determined automatically if unspecified.\n    ignore_invalid : bool\n        Ignore graphs marked as invalid by bmad.\n\n    Returns\n    -------\n    list of graphs\n        The type of each graph is backend-dependent.\n    \"\"\"\n    region_name = self._place(template_name, region_name)\n    return self.update_region(\n        region_name=region_name,\n        template_name=template_name,\n        ignore_invalid=ignore_invalid,\n    )\n</code></pre> pytao.plotting.plot.GraphManager.place_all <pre><code>place_all(*, ignore_invalid=True, ignore_unsupported=True)\n</code></pre> <p>Place all graphs in the place buffer.</p> <p>Side effect: clears <code>to_place</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ignore_invalid</code> <code>bool</code> <p>Ignore graphs marked as invalid by bmad.</p> <code>True</code> <code>ignore_unsupported</code> <code>bool</code> <p>Ignore unsupported graph types (e.g., key tables).</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, List[AnyGraph]]</code> <p>Region to list of graphs.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def place_all(\n    self,\n    *,\n    ignore_invalid: bool = True,\n    ignore_unsupported: bool = True,\n) -&gt; Dict[str, List[AnyGraph]]:\n    \"\"\"\n    Place all graphs in the place buffer.\n\n    Side effect: clears `to_place`.\n\n    Parameters\n    ----------\n    ignore_invalid : bool\n        Ignore graphs marked as invalid by bmad.\n    ignore_unsupported : bool\n        Ignore unsupported graph types (e.g., key tables).\n\n    Returns\n    -------\n    Dict[str, List[AnyGraph]]\n        Region to list of graphs.\n    \"\"\"\n    to_place = list(self.to_place.items())\n    self.to_place.clear()\n\n    logger.debug(\"Placing all plots: %s\", to_place)\n    result = {}\n    for region_name, template_name in to_place:\n        try:\n            result[region_name] = self.place(\n                template_name=template_name,\n                region_name=region_name,\n                ignore_invalid=ignore_invalid,\n            )\n        except UnsupportedGraphError:\n            if not ignore_unsupported:\n                raise\n\n    return result\n</code></pre> pytao.plotting.plot.GraphManager.plot_all <pre><code>plot_all(grid=None, include_layout=False, **kwargs)\n</code></pre> <p>Plot all \"placed\" graphs.</p> <p>Parameters:</p> Name Type Description Default <code>grid</code> <code>Tuple[int, int]</code> <p>Grid plots into this shape - (rows, cols).</p> <code>None</code> <code>include_layout</code> <code>bool</code> <p>Include a layout plot.</p> <code>False</code> <code>**kwargs</code> <p>Keyword arguments are passed to <code>.plot_grid()</code>.</p> <code>{}</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def plot_all(\n    self,\n    grid: Optional[Tuple[int, int]] = None,\n    include_layout: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Plot all \"placed\" graphs.\n\n    Parameters\n    ----------\n    grid : Tuple[int, int], optional\n        Grid plots into this shape - (rows, cols).\n    include_layout : bool, default=False\n        Include a layout plot.\n    **kwargs\n        Keyword arguments are passed to `.plot_grid()`.\n    \"\"\"\n    template_names = list(self.to_place.values())\n    if not grid:\n        grid = (len(template_names), 1)\n    return self.plot_grid(\n        template_names,\n        grid=grid,\n        include_layout=include_layout,\n        **kwargs,\n    )\n</code></pre> pytao.plotting.plot.GraphManager.prepare_graphs_by_name <pre><code>prepare_graphs_by_name(template_name, *, region_name=None, settings=None, curves=None, ignore_unsupported=True, ignore_invalid=True, place=True, xlim=None, ylim=None)\n</code></pre> <p>Prepare a graph for plotting.</p> <p>Parameters:</p> Name Type Description Default <code>template_name</code> <code>str</code> <p>The graph template name.</p> required <code>region_name</code> <code>str</code> <p>The region name to place it.  Determined automatically if unspecified.</p> <code>None</code> <code>settings</code> <code>TaoGraphSettings</code> <p>Graph customization settings.</p> <code>None</code> <code>curves</code> <code>Dict[int, TaoCurveSettings]</code> <p>Curve settings, keyed by curve number.</p> <code>None</code> <code>ignore_unsupported</code> <code>bool</code> <p>Ignore unsupported graph types (e.g., key tables).</p> <code>True</code> <code>ignore_invalid</code> <code>bool</code> <p>Ignore graphs marked as invalid by bmad.</p> <code>True</code> <code>place</code> <code>bool</code> <p>Tell Tao to place the template first.</p> <code>True</code> <code>xlim</code> <code>(float, float)</code> <p>X axis limits.</p> <code>None</code> <code>ylim</code> <code>(float, float)</code> <p>Y axis limits.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> <p>The type of each graph is backend-dependent.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def prepare_graphs_by_name(\n    self,\n    template_name: str,\n    *,\n    region_name: Optional[str] = None,\n    settings: Optional[TaoGraphSettings] = None,\n    curves: Optional[Dict[int, TaoCurveSettings]] = None,\n    ignore_unsupported: bool = True,\n    ignore_invalid: bool = True,\n    place: bool = True,\n    xlim: Optional[Limit] = None,\n    ylim: Optional[Limit] = None,\n) -&gt; List[AnyGraph]:\n    \"\"\"\n    Prepare a graph for plotting.\n\n    Parameters\n    ----------\n    template_name : str\n        The graph template name.\n    region_name : str, optional\n        The region name to place it.  Determined automatically if unspecified.\n    settings : TaoGraphSettings, optional\n        Graph customization settings.\n    curves : Dict[int, TaoCurveSettings], optional\n        Curve settings, keyed by curve number.\n    ignore_unsupported : bool\n        Ignore unsupported graph types (e.g., key tables).\n    ignore_invalid : bool\n        Ignore graphs marked as invalid by bmad.\n    place : bool, default=True\n        Tell Tao to place the template first.\n    xlim : (float, float), optional\n        X axis limits.\n    ylim : (float, float), optional\n        Y axis limits.\n\n    Returns\n    -------\n    list of graphs\n        The type of each graph is backend-dependent.\n    \"\"\"\n    if place:\n        region_name = self._place(template_name=template_name, region_name=region_name)\n    elif not region_name:\n        region_name = self.get_region_to_place_template(template_name)\n\n    if settings is None:\n        settings = TaoGraphSettings()\n    if xlim is not None:\n        settings.xlim = xlim\n    if ylim is not None:\n        settings.ylim = ylim\n\n    self.configure_graph(region_name, settings)\n\n    if curves is not None:\n        self.configure_curves(region_name, curves)\n\n    return self.update_region(\n        region_name=region_name,\n        template_name=template_name,\n        ignore_unsupported=ignore_unsupported,\n        ignore_invalid=ignore_invalid,\n    )\n</code></pre> pytao.plotting.plot.GraphManager.prepare_grid_by_names <pre><code>prepare_grid_by_names(template_names, curves=None, settings=None, xlim=None, ylim=None)\n</code></pre> <p>Prepare multiple graphs for a grid plot.</p> <p>Applies per-graph curve settings and also region/graph settings.</p> <p>Parameters:</p> Name Type Description Default <code>template_names</code> <code>list of str</code> <p>Graph names.</p> required <code>curves</code> <code>list of Dict[int, TaoCurveSettings]</code> <p>One dictionary per graph, with each dictionary mapping the curve index to curve settings. These settings will be applied to the placed graphs prior to plotting.</p> <code>None</code> <code>settings</code> <code>list of TaoGraphSettings</code> <p>Graph customization settings.</p> <code>None</code> <code>xlim</code> <code>list of (float, float)</code> <p>X axis limits for each graph.</p> <code>None</code> <code>ylim</code> <code>list of (float, float)</code> <p>Y axis limits for each graph.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of graphs</code> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def prepare_grid_by_names(\n    self,\n    template_names: List[str],\n    curves: Optional[List[CurveIndexToCurve]] = None,\n    settings: Optional[List[TaoGraphSettings]] = None,\n    xlim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n    ylim: Union[OptionalLimit, Sequence[OptionalLimit]] = None,\n):\n    \"\"\"\n    Prepare multiple graphs for a grid plot.\n\n    Applies per-graph curve settings and also region/graph settings.\n\n    Parameters\n    ----------\n    template_names : list of str\n        Graph names.\n    curves : list of Dict[int, TaoCurveSettings], optional\n        One dictionary per graph, with each dictionary mapping the curve\n        index to curve settings. These settings will be applied to the\n        placed graphs prior to plotting.\n    settings : list of TaoGraphSettings, optional\n        Graph customization settings.\n    xlim : list of (float, float), optional\n        X axis limits for each graph.\n    ylim : list of (float, float), optional\n        Y axis limits for each graph.\n\n    Returns\n    -------\n    list of graphs\n    \"\"\"\n    num_graphs = len(template_names)\n    if not curves:\n        curves = [{}] * num_graphs\n    elif len(curves) &lt; num_graphs:\n        assert len(curves)\n        curves = list(curves) + [{}] * (num_graphs - len(curves))\n\n    if not settings:\n        settings = [TaoGraphSettings()] * num_graphs\n    elif len(settings) &lt; num_graphs:\n        settings = list(settings) + [TaoGraphSettings()] * (num_graphs - len(settings))\n\n    xlim = fix_grid_limits(xlim, num_graphs=num_graphs)\n    ylim = fix_grid_limits(ylim, num_graphs=num_graphs)\n    for setting, xl, yl in zip(settings, xlim, ylim):\n        setting.xlim = xl\n        setting.ylim = yl\n\n    graphs = sum(\n        (\n            self.prepare_graphs_by_name(\n                template_name=template_name,\n                curves=graph_curves,\n                settings=graph_settings,\n            )\n            for template_name, graph_curves, graph_settings in zip(\n                template_names,\n                curves,\n                settings,\n            )\n        ),\n        [],\n    )\n\n    if not graphs:\n        raise UnsupportedGraphError(\n            f\"No supported plots from these templates: {template_names}\"\n        )\n    return graphs\n</code></pre> pytao.plotting.plot.GraphManager.tao_init_hook <pre><code>tao_init_hook()\n</code></pre> <p>Tao has reinitialized; clear our state.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def tao_init_hook(self) -&gt; None:\n    \"\"\"Tao has reinitialized; clear our state.\"\"\"\n    self.regions.clear()\n    self._to_place.clear()\n</code></pre> pytao.plotting.plot.GraphManager.update_region <pre><code>update_region(region_name, template_name, ignore_invalid=True, ignore_unsupported=True)\n</code></pre> <p>Query information about already-placed graphs in a given region.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>The region name where the graph was placed.</p> required <code>template_name</code> <code>str</code> <p>The template name the user placed.</p> required <code>ignore_invalid</code> <code>bool</code> <p>Ignore graphs marked as invalid by bmad.</p> <code>True</code> <code>ignore_unsupported</code> <code>bool</code> <p>Ignore unsupported graph types (e.g., key tables).</p> <code>True</code> <p>Returns:</p> Type Description <code>list of graphs</code> <p>The type of each graph is backend-dependent.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>def update_region(\n    self,\n    region_name: str,\n    template_name: str,\n    ignore_invalid: bool = True,\n    ignore_unsupported: bool = True,\n) -&gt; List[AnyGraph]:\n    \"\"\"\n    Query information about already-placed graphs in a given region.\n\n    Parameters\n    ----------\n    region_name : str, optional\n        The region name where the graph was placed.\n    template_name : str\n        The template name the user placed.\n    ignore_invalid : bool\n        Ignore graphs marked as invalid by bmad.\n    ignore_unsupported : bool\n        Ignore unsupported graph types (e.g., key tables).\n\n    Returns\n    -------\n    list of graphs\n        The type of each graph is backend-dependent.\n    \"\"\"\n    self._clear_region(region_name)\n\n    result = []\n    plot_names = get_plots_in_region(self.tao, region_name)\n    for idx, plot_name in enumerate(plot_names):\n        try:\n            result.append(\n                self.make_graph(\n                    region_name=region_name,\n                    graph_name=plot_name,\n                    template_name=template_name,\n                    template_graph_index=idx,\n                )\n            )\n        except UnsupportedGraphError as ex:\n            if ignore_unsupported:\n                logger.debug(f\"Unsupported graph in region {region_name}: {ex}\")\n                continue\n            raise\n        except GraphInvalidError as ex:\n            if ignore_invalid:\n                logger.warning(f\"Invalid graph in region {region_name}: {ex}\")\n                continue\n            raise\n\n    self.regions[region_name] = result\n    logger.debug(\n        \"Updating region: %s template: %s generated %d plots\",\n        region_name,\n        template_name,\n        len(result),\n    )\n    return result\n</code></pre>"},{"location":"api/plot/#pytao.plotting.plot.LatticeLayoutElement","title":"pytao.plotting.plot.LatticeLayoutElement","text":""},{"location":"api/plot/#pytao.plotting.plot.LatticeLayoutElement-functions","title":"Functions","text":"pytao.plotting.plot.LatticeLayoutElement.wrapped_shape <code>classmethod</code> <pre><code>wrapped_shape(s1, s2, y1, y2, color, shape, name, x_min, x_max, y2_floor)\n</code></pre> <p>Element is wrapped around the lattice ends, and s1 &gt;= s2.</p> <p><code>$ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wake</code> shows off this functionality.</p> Source code in <code>pytao/plotting/plot.py</code> <pre><code>@classmethod\ndef wrapped_shape(\n    cls,\n    s1: float,\n    s2: float,\n    y1: float,\n    y2: float,\n    color: str,\n    shape: str,\n    name: str,\n    x_min: float,\n    x_max: float,\n    y2_floor: float,\n) -&gt; Tuple[Optional[layout_shapes.AnyWrappedLayoutShape], List[PlotAnnotation]]:\n    \"\"\"\n    Element is wrapped around the lattice ends, and s1 &gt;= s2.\n\n    `$ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wake` shows off\n    this functionality.\n    \"\"\"\n    assert s1 &gt;= s2\n    s_min = max((x_min, s1 + (s1 + s2) / 2.0))\n    s_max = min((x_max, s1 - (s1 + s2) / 2.0))\n\n    try:\n        shape_cls = layout_shapes.wrapped_shape_to_class[shape]\n    except KeyError:\n        logger.debug(f\"Unsupported wrappedlayout shape type: {shape}\")\n        shape_instance = None\n    else:\n        shape_instance = shape_cls(\n            s1=s1,\n            s2=s2,\n            y1=y1,\n            y2=y2,\n            color=color,\n            s_min=s_min,\n            s_max=s_max,\n            name=name,\n            fill=False,\n        )\n\n    annotations = [\n        PlotAnnotation(\n            x=s_max,\n            y=1.1 * y2_floor,\n            text=name,\n            horizontalalignment=\"right\",\n            verticalalignment=\"top\",\n            clip_on=True,\n            color=color,\n        ),\n        PlotAnnotation(\n            x=s_min,\n            y=1.1 * y2_floor,\n            text=name,\n            horizontalalignment=\"left\",\n            verticalalignment=\"top\",\n            clip_on=True,\n            color=color,\n        ),\n    ]\n\n    return shape_instance, annotations\n</code></pre>"},{"location":"api/plot/#pytao.plotting.curves","title":"pytao.plotting.curves","text":""},{"location":"api/plot/#pytao.plotting.curves-classes","title":"Classes","text":""},{"location":"api/plot/#pytao.plotting.curves.TaoCurveSettings","title":"pytao.plotting.curves.TaoCurveSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>TaoCurveSettings are per-curve settings for Tao's <code>set curve</code> command.</p> <p>All parameters are <code>None</code> by default and will only be applied if user-specified.</p> <p>Attributes:</p> Name Type Description <code>ele_ref_name</code> <code>str</code> <p>Name or index or the reference element.  An empty string means no reference element.</p> <code>ix_ele_ref</code> <code>int</code> <p>Same as setting <code>ele_ref_name</code>. -1 = No reference element.</p> <code>component</code> <code>str</code> <p>Who to plot. Eg: 'meas - design' A \"data\" graph is used to draw lattice parameters such as orbits, or Tao data, or variable values such as quadrupole strengths. The data values will depend upon where the data comes from. This is determined, in part, by the setting of the component parameter in the tao_template_graph namelist. The component may be one of:</p> <pre><code>\"model\", for model values. This is the default.\n\"design\", for design values.\n\"base\", for base values.\n\"meas\", for data values.\n\"ref\", for reference data values.\n\"beam_chamber_wall\", for beam chamber wall data.\n</code></pre> <p>Additionally, component may be set to plot a linear combination of the above. For example:     \"model - design\" This will plot the difference between the model and design values.</p> <code>ix_branch</code> <code>int</code> <p>Branch index.</p> <code>ix_bunch</code> <code>int</code> <p>Bunch index.</p> <code>ix_universe</code> <code>int</code> <p>Universe index.</p> <code>symbol_every</code> <code>int</code> <p>Symbol skip number.</p> <code>y_axis_scale_factor</code> <code>int</code> <p>Scaling of y axis</p> <code>draw_line</code> <code>bool</code> <p>Draw a line through the data points?</p> <code>draw_symbols</code> <code>bool</code> <p>Draw a symbol at the data points?</p> <code>draw_symbol_index</code> <code>bool</code> <p>Draw the symbol index number curve%ix_symb?</p>"},{"location":"api/plot/#pytao.plotting.fields","title":"pytao.plotting.fields","text":""},{"location":"api/plot/#pytao.plotting.fields-classes","title":"Classes","text":""},{"location":"api/plot/#pytao.plotting.pgplot","title":"pytao.plotting.pgplot","text":""},{"location":"api/plot/#pytao.plotting.pgplot-functions","title":"Functions","text":""},{"location":"api/plot/#pytao.plotting.pgplot.mathjax_string","title":"pytao.plotting.pgplot.mathjax_string","text":"<pre><code>mathjax_string(value)\n</code></pre> <p>Takes string with pgplot characters and returns string with characters replaced with MathJax equivalent.</p> Source code in <code>pytao/plotting/pgplot.py</code> <pre><code>def mathjax_string(value: str) -&gt; str:\n    \"\"\"\n    Takes string with pgplot characters and returns string with characters replaced with MathJax equivalent.\n    \"\"\"\n    res = mpl_string(value)\n    if res.startswith(\"$\") and res.endswith(\"$\"):\n        # MathJAX strings are $$ ... $$ instead of just $ ... $\n        return f\"${res}$\"\n    return res\n</code></pre>"},{"location":"api/plot/#pytao.plotting.pgplot.mpl_color","title":"pytao.plotting.pgplot.mpl_color","text":"<pre><code>mpl_color(pgplot_color)\n</code></pre> <p>Pgplot color to matplotlib color.</p> Source code in <code>pytao/plotting/pgplot.py</code> <pre><code>def mpl_color(pgplot_color: str) -&gt; str:\n    \"\"\"Pgplot color to matplotlib color.\"\"\"\n    return {\n        \"yellow_green\": \"greenyellow\",\n        \"light_green\": \"limegreen\",\n        \"navy_blue\": \"navy\",\n        \"reddish_purple\": \"mediumvioletred\",\n        \"dark_grey\": \"gray\",\n        \"light_grey\": \"lightgray\",\n        \"transparent\": \"none\",\n    }.get(pgplot_color.lower(), pgplot_color)\n</code></pre>"},{"location":"api/plot/#pytao.plotting.pgplot.mpl_string","title":"pytao.plotting.pgplot.mpl_string","text":"<pre><code>mpl_string(value)\n</code></pre> <p>Takes string with pgplot characters and returns string with characters replaced with matplotlib equivalent.</p> Source code in <code>pytao/plotting/pgplot.py</code> <pre><code>def mpl_string(value: str) -&gt; str:\n    \"\"\"Takes string with pgplot characters and returns string with characters replaced with matplotlib equivalent.\"\"\"\n    backslash = \"\\\\\"\n    if backslash not in value:\n        return value\n\n    value = value.replace(backslash, r\"\\\\\")\n\n    result = f\"${value}$\"\n    while r\"\\\\d\" in result and r\"\\\\u\" in result:\n        d_pos = result.find(r\"\\\\d\")\n        u_pos = result.find(r\"\\\\u\")\n        if d_pos &lt; u_pos:\n            sx = result[d_pos : u_pos + 3]\n            result = result.replace(sx, \"_\" + sx[3:-3])\n        else:\n            sx = result[u_pos : d_pos + 3]\n            result = result.replace(sx, \"^\" + sx[3:-3])\n\n    # TODO this is far from performant, but this is unlikely to be called\n    # frequently so I'm leaving it for now\n    for from_, to in _pgplot_to_mpl_chars:\n        result = result.replace(from_, to)\n\n    # Replace any instances of \\1 with non-LaTeX equivalents, as these can be\n    # used in component names.\n    result = re.sub(r\"\\\\\\\\(\\d+)\", r\"\\\\backslash\\1\", result)\n\n    if r\"\\\\\" in result:\n        logger.debug(f\"Unknown pgplot character in string: {result}\")\n\n    return result\n</code></pre>"},{"location":"api/plot/#pytao.plotting.settings","title":"pytao.plotting.settings","text":""},{"location":"api/plot/#pytao.plotting.settings-classes","title":"Classes","text":""},{"location":"api/plot/#pytao.plotting.settings.QuickPlotPoint","title":"pytao.plotting.settings.QuickPlotPoint","text":"<p>Tao QuickPlot Point.</p> <p>Attributes:</p> Name Type Description <code>x</code> <code>float</code> <code>y</code> <code>float</code> <code>units</code> <code>(str, optional)</code>"},{"location":"api/plot/#pytao.plotting.settings.QuickPlotPoint-functions","title":"Functions","text":"pytao.plotting.settings.QuickPlotPoint.get_commands <pre><code>get_commands(region_name, graph_name, parent_name)\n</code></pre> <p>Get command strings to apply these settings with Tao.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Region name.</p> required <code>graph_name</code> <code>str</code> <p>Graph name.</p> required <code>parent_name</code> <code>str</code> <p>Parent item name.</p> required <p>Returns:</p> Type Description <code>list of str</code> <p>Commands to send to Tao to apply these settings.</p> Source code in <code>pytao/plotting/settings.py</code> <pre><code>def get_commands(\n    self,\n    region_name: str,\n    graph_name: str,\n    parent_name: str,\n) -&gt; List[str]:\n    \"\"\"\n    Get command strings to apply these settings with Tao.\n\n    Parameters\n    ----------\n    region_name : str\n        Region name.\n    graph_name : str\n        Graph name.\n    parent_name : str\n        Parent item name.\n\n    Returns\n    -------\n    list of str\n        Commands to send to Tao to apply these settings.\n    \"\"\"\n    return [\n        f\"set graph {region_name}.{graph_name} {parent_name}%{key} = {value}\"\n        for key, value in asdict(self).items()\n        if value is not None\n    ]\n</code></pre>"},{"location":"api/plot/#pytao.plotting.settings.QuickPlotRectangle","title":"pytao.plotting.settings.QuickPlotRectangle","text":"<p>Tao QuickPlot Rectangle.</p> <p>Attributes:</p> Name Type Description <code>x1</code> <code>float</code> <code>x2</code> <code>float</code> <code>y1</code> <code>float</code> <code>y2</code> <code>float</code> <code>units</code> <code>(str, optional)</code>"},{"location":"api/plot/#pytao.plotting.settings.QuickPlotRectangle-functions","title":"Functions","text":"pytao.plotting.settings.QuickPlotRectangle.get_commands <pre><code>get_commands(region_name, graph_name, parent_name)\n</code></pre> <p>Get command strings to apply these settings with Tao.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Region name.</p> required <code>graph_name</code> <code>str</code> <p>Graph name.</p> required <code>parent_name</code> <code>str</code> <p>Parent item name.</p> required <p>Returns:</p> Type Description <code>list of str</code> <p>Commands to send to Tao to apply these settings.</p> Source code in <code>pytao/plotting/settings.py</code> <pre><code>def get_commands(\n    self,\n    region_name: str,\n    graph_name: str,\n    parent_name: str,\n) -&gt; List[str]:\n    \"\"\"\n    Get command strings to apply these settings with Tao.\n\n    Parameters\n    ----------\n    region_name : str\n        Region name.\n    graph_name : str\n        Graph name.\n    parent_name : str\n        Parent item name.\n\n    Returns\n    -------\n    list of str\n        Commands to send to Tao to apply these settings.\n    \"\"\"\n    return [\n        f\"set graph {region_name}.{graph_name} {parent_name}%{key} = {value}\"\n        for key, value in asdict(self).items()\n        if value is not None\n    ]\n</code></pre>"},{"location":"api/plot/#pytao.plotting.settings.TaoAxisSettings","title":"pytao.plotting.settings.TaoAxisSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Tao per-axis (x, x2, y, or y2) settings in a graph.</p> <p>Intended for use with:</p> <p><code>tao.plot(..., settings=TaoGraphSettings(y=TaoAxisSettings(...)))</code>.</p> <p>All attributes may be <code>None</code>. A value of <code>None</code> indicates that the setting should not be configured in Tao.</p> <p>Not all parameters are useful for PyTao plotting.  This class intends to support Tao's internal plotting mechanism as well for users who prefer to use it instead.</p> <p>Attributes:</p> Name Type Description <code>bounds</code> <code>One of {\"zero_at_end\", \"zero_symmetric\", \"general\", \"exact\"}</code> <p>Axis bounds.</p> <code>min</code> <code>float</code> <p>Left or bottom axis number range.</p> <code>max</code> <code>float</code> <p>Right or top axis number range.</p> <code>number_offset</code> <code>float</code> <p>Offset from the axis line in inches.</p> <code>label_offset</code> <code>float</code> <p>Offset from numbers in inches.</p> <code>major_tick_len</code> <code>float</code> <p>Major tick length in inches.</p> <code>minor_tick_len</code> <code>float</code> <p>Minor tick length in inches.</p> <code>label_color</code> <code>str</code> <p>Color of the label string.</p> <code>major_div</code> <code>int</code> <p>Number of major divisions.</p> <code>major_div_nominal</code> <code>int</code> <p>Major divisions nominal value.</p> <code>minor_div</code> <code>int</code> <p>Number of minor divisions, where 0 is automatic.</p> <code>minor_div_max</code> <code>int</code> <p>Maximum minor divisions, if <code>minor_div</code> is set to automatic (0).</p> <code>places</code> <code>int</code> <p>Number of digits to print.</p> <code>tick_side</code> <code>-1, 0, or 1</code> <ul> <li>1: draw ticks to the inside</li> <li>0: draw ticks both inside and outside</li> <li>-1: draw ticks to the outside</li> </ul> <code>number_side</code> <code>-1 or 1</code> <ul> <li>1: draw numbers to the inside</li> <li>-1: draw numbers to the outside</li> </ul> <code>label</code> <code>str</code> <p>Axis label string.</p> <code>type</code> <code>log or linear</code> <p>Axis type.</p> <code>draw_label</code> <code>bool</code> <p>Draw the label string.</p> <code>draw_numbers</code> <code>bool</code> <p>Draw the numbers.</p>"},{"location":"api/plot/#pytao.plotting.settings.TaoAxisSettings-functions","title":"Functions","text":"pytao.plotting.settings.TaoAxisSettings.get_commands <pre><code>get_commands(region_name, axis_name)\n</code></pre> <p>Get command strings to apply these settings with Tao.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Region name.</p> required <code>axis_name</code> <code>str</code> <p>Axis name.</p> required <p>Returns:</p> Type Description <code>list of str</code> <p>Commands to send to Tao to apply these settings.</p> Source code in <code>pytao/plotting/settings.py</code> <pre><code>def get_commands(\n    self,\n    region_name: str,\n    axis_name: str,\n) -&gt; List[str]:\n    \"\"\"\n    Get command strings to apply these settings with Tao.\n\n    Parameters\n    ----------\n    region_name : str\n        Region name.\n    axis_name : str\n        Axis name.\n\n    Returns\n    -------\n    list of str\n        Commands to send to Tao to apply these settings.\n    \"\"\"\n    items = {key: value for key, value in self.model_dump().items() if value is not None}\n    scale = items.pop(\"scale\", None)\n    scale_gang = items.pop(\"scale_gang\", None)\n\n    commands = []\n    if scale is not None:\n        scale_low, scale_high = scale\n        scale_cmd = {\n            \"x\": \"x_scale\",\n            \"x2\": \"x_scale\",\n            \"y\": \"scale -y\",\n            \"y2\": \"scale -y2\",\n        }[axis_name]\n        if scale_gang:\n            scale_cmd = f\"{scale_cmd} -gang\"\n        elif scale_gang is False:  # note: may be None\n            scale_cmd = f\"{scale_cmd} -nogang\"\n        commands.append(f\"{scale_cmd} {region_name} {scale_low} {scale_high}\")\n\n    return commands + [\n        f\"set graph {region_name} {axis_name}%{key} = {value}\"\n        for key, value in items.items()\n    ]\n</code></pre>"},{"location":"api/plot/#pytao.plotting.settings.TaoFloorPlanSettings","title":"pytao.plotting.settings.TaoFloorPlanSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Tao graph settings specifically for floor plans.</p> <p>Intended for use with:</p> <p><code>tao.plot(..., settings=TaoGraphSettings(floor_plan=TaoFloorPlanSettings(...)))</code>.</p> <p>All attributes may be <code>None</code>. A value of <code>None</code> indicates that the setting should not be configured in Tao.</p> <p>Not all parameters are useful for PyTao plotting.  This class intends to support Tao's internal plotting mechanism as well for users who prefer to use it instead.</p> <p>Attributes:</p> Name Type Description <code>correct_distortion</code> <code>bool</code> <p>Correct distortion. By default, the horizontal or vertical margins of the graph will be increased so that the horizontal scale (meters per plotting inch) is equal to the vertical scale. If <code>correct_distortion</code> is set to False, this scaling will not be done.</p> <code>size_is_absolute</code> <code>bool</code> <p>Shape sizes scaled to absolute dimensions. The size_is_absolute logical is combined with the  setting for a shape to determine the size transverse to the center line curve of the drawn shape. If size_is_absolute is False (the default),  is taken to be the size of the shape in points (72 points is approximately 1 inch). If size_is_absolute is True,  is taken to be the size in meters. That is, if size_is_absolute is False, zooming in or out will not affect the size of an element shape while if size_is_absolute is True, the size of an element will scale when zooming. <code>draw_only_first_pass</code> <code>bool</code> <p>Suppresses drawing of multipass_slave lattice elements that are associated with the second and higher passes. Setting to True is only useful in some extreme circumstances where the plotting of additional passes leads to large pdf/ps file sizes.</p> <code>flip_label_side</code> <code>bool</code> <p>Draw element label on other side of element.</p> <code>rotation</code> <code>float</code> <p>Rotation of floor plan plot: 1.0 -&gt; 360 deg. An overall rotation of the floor plan can be controlled by setting rotation parameter. A setting of 1.0 corresponds to 360\u25e6. Positive values correspond to counter-clockwise rotations. Alternatively, the global coordinates at the start of the lattice can be defined in the lattice file and this can rotate the floor plan. Unless there is an offset specified in the lattice file, a lattice will start at (x, y) = (0, 0). Assuming that the machine lies in the horizontal plane with no negative bends, the reference orbit will start out pointing in the negative x direction and will circle clockwise in the (x, y) plane.</p> <code>orbit_scale</code> <code>float</code> <p>Scale for the orbit.  If 0 (the default), no orbit will be drawn.</p> <code>orbit_color</code> <code>str</code> <p>Orbit color.</p> <code>orbit_lattice</code> <code>One of {\"model\", \"design\", \"base\"}</code> <p>Orbit lattice.</p> <code>orbit_pattern</code> <code>str</code> <p>Orbit pattern.</p> <code>orbit_width</code> <code>int</code> <p>Orbit width.</p> <code>view</code> <code>One of {\"xy\", \"xz\", \"yx\", \"yz\", \"zx\", \"zy\"}</code>"},{"location":"api/plot/#pytao.plotting.settings.TaoFloorPlanSettings-functions","title":"Functions","text":"pytao.plotting.settings.TaoFloorPlanSettings.get_commands <pre><code>get_commands(region_name, graph_name)\n</code></pre> <p>Get command strings to apply these settings with Tao.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Region name.</p> required <code>graph_name</code> <code>str</code> <p>Graph name.</p> required <p>Returns:</p> Type Description <code>list of str</code> <p>Commands to send to Tao to apply these settings.</p> Source code in <code>pytao/plotting/settings.py</code> <pre><code>def get_commands(\n    self,\n    region_name: str,\n    graph_name: str,\n) -&gt; List[str]:\n    \"\"\"\n    Get command strings to apply these settings with Tao.\n\n    Parameters\n    ----------\n    region_name : str\n        Region name.\n    graph_name : str\n        Graph name.\n\n    Returns\n    -------\n    list of str\n        Commands to send to Tao to apply these settings.\n    \"\"\"\n    return [\n        f\"set graph {region_name} floor_plan%{key} = {value}\"\n        for key, value in self.model_dump().items()\n        if value is not None\n    ]\n</code></pre>"},{"location":"api/plot/#pytao.plotting.settings.TaoGraphSettings","title":"pytao.plotting.settings.TaoGraphSettings","text":"<p>               Bases: <code>BaseModel</code></p> <p>Per-graph settings for Tao.</p> <p>Intended for use with <code>tao.plot(..., settings=TaoGraphSettings())</code>.</p> <p>All attributes may be <code>None</code>. A value of <code>None</code> indicates that the setting should not be configured in Tao.</p> <p>Not all parameters are useful for PyTao plotting.  This class intends to support Tao's internal plotting mechanism as well for users who prefer to use it instead.</p> <p>Attributes:</p> Name Type Description <code>text_legend</code> <code>Dict[int, str]</code> <p>Dictionary of text legend index to legend string. The text legend is a legend that can be setup by either the user or by Tao itself. Tao uses the text legend in conjunction with phase space plotting or histogram displays. The text legend is distinct from the curve legend.</p> <code>allow_wrap_around</code> <code>bool</code> <p>If <code>plot%x_axis_type</code> is set to \"s\", and if the plotted data is from a lattice branch with a closed geometry, and if <code>graph%x%min</code> is negative, then the <code>graph%allow_wrap_around</code> parameter sets if the curves contained in the graph are \u201cwrapped around\u201d the beginning of the lattice so that the curves are not cut off at s = 0. The Tao default is True.</p> <code>box</code> <code>Dict[int, int]</code> <p>The <code>graph%box parameter</code> sets the layout of the box which the graph is placed. The Tao default is 1,1,1,1 which scales a graph to cover the entire region the plot is placed in.</p> <code>commands</code> <code>List[str]</code> <p>Custom commands to be sent to Tao for this graph. Each string will be formatted with the following keys: * <code>settings</code> - the <code>TaoGraphSettings</code> object itself * <code>region</code> - the region name (e.g., <code>r12</code>) * <code>graph_name</code> - the graph name (e.g., <code>g</code>) * <code>graph_type</code> - the graph type (e.g., <code>lat_layout</code>) * <code>graph</code> - the full graph name (e.g., <code>r12.g</code>)</p> <code>component</code> <code>str</code> <p>Who to plot - applied to all curves. For example: <code>'meas - design'</code> A \"data\" graph is used to draw lattice parameters such as orbits, or Tao data, or variable values such as quadrupole strengths. The data values will depend upon where the data comes from. This is determined, in part, by the setting of the component parameter in the tao_template_graph namelist. The component may be one of:</p> <pre><code>\"model\", for model values. This is the default.\n\"design\", for design values.\n\"base\", for base values.\n\"meas\", for data values.\n\"ref\", for reference data values.\n\"beam_chamber_wall\", for beam chamber wall data.\n</code></pre> <p>Additionally, component may be set to plot a linear combination of the above. For example:     \"model - design\" This will plot the difference between the model and design values.</p> <code>clip</code> <code>bool</code> <p>Clip curves at the boundary.</p> <code>curve_legend_origin</code> <code>tuple[float, float, str] or QuickPlotPoint</code> <p>The curve legend displays which curves are associated with which of the plotted lines and symbols. This defines where the upper left hand corner of the legend is.</p> <code>draw_axes</code> <code>bool</code> <p>Draw the graph axes.</p> <code>draw_title</code> <code>bool</code> <p>Draw the graph title.</p> <code>draw_curve_legend</code> <code>bool</code> <p>Draw the curve legend.</p> <code>draw_grid</code> <code>bool</code> <p>Draw the graph grid.</p> <code>draw_only_good_user_data_or_vars</code> <code>bool</code> <p>When plotting Tao data or variables, if <code>draw_only_good_user_data_or_vars</code> is set to True (the default), symbol points of curves in the graph associated with data or variables whose <code>good_user</code> parameter is set to False will be ignored. That is, data and variables that will not be used in an optimization will be ignored. If <code>draw_only_good_user_data_or_vars</code> is set to False, data or variables that have a valid value will be plotted.</p> <code>floor_plan</code> <code>TaoFloorPlanSettings</code> <p>Settings only for floor plan graphs.</p> <code>ix_universe</code> <code>int</code> <p>The default universe for curves of the graph.</p> <code>ix_branch</code> <code>int</code> <p>The default branch for curves of the graph.</p> <code>margin</code> <code>tuple[float, float, float, float, str] or QuickPlotRectangle</code> <p>Margin between the graph and the box: (x1, x2, y1, y2, units)</p> <code>scale_margin</code> <code>Union[QuickPlotRectangle, QuickPlotRectangleTuple]</code> <p>(x1, x2, y1, y2, units) Used to set the minimum space between what is being drawn and the edges of the graph when a <code>scale</code>, <code>x_scale</code>, or an <code>xy_scale</code> command is issued. Normally this is zero but is useful for floor plan drawings.</p> <code>symbol_size_scale</code> <code>float</code> <p>Symbol size scale.</p> <code>text_legend_origin</code> <code>tuple[float, float, float, float, str] or QuickPlotRectangle</code> <p>(x1, x2, y1, y2, units) Text legend origin.</p> <code>title</code> <code>str</code> <p>The <code>title</code> component is the string printed just above the graph box. The full string will also include information about what is being plotted and the horizontal axis type. To fully suppress the title leave it blank. Note: A graph also has a <code>title_suffix</code> which Tao uses to hold the string which is printed to the right of the <code>graph%title</code>. This string contains information like what curve%component is being plotted. The <code>graph%title_suffix</code> cannot be set by the user.</p> <code>type</code> <code>str</code> <p>The type of graph. Tao knows about the following types:</p> <ul> <li><code>\"data\"</code></li> </ul> <p>Lattice parameters, data and/or variable plots (default)</p> <p>With <code>type</code> set to <code>\"data\"</code>, data such as orbits and/or variable values such as quadrupole strengths are plotted. Here \u201cdata\u201d can be data from a defined data structure or computed directly from the lattice, beam tracking, etc. A \"data\" graph type will contain a number of curves and multiple data and variable curves can be drawn in one graph.</p> <ul> <li><code>\"floor_plan\"</code></li> </ul> <p>With <code>type</code> set to <code>\"floor_plan\"</code>, the two dimensional layout of the machine is drawn.</p> <ul> <li><code>\"dynamic_aperture\"</code></li> </ul> <p>Dynamic aperture plot.</p> <ul> <li><code>\"histogram\"</code></li> </ul> <p>With <code>type</code> set to <code>\"histogram\"</code>, such things such as beam densities can be his- togrammed.</p> <ul> <li><code>\"lat_layout\"</code></li> </ul> <p>With <code>type</code> set to <code>\"lat_layout\"</code>, the elements of the lattice are symbolical drawn in a one dimensional line as a function of the longitudinal distance along the machine centerline.</p> <ul> <li><code>\"phase_space\"</code></li> </ul> <p>With <code>type</code> set to <code>\"phase_space\"</code>, phase space plots are produced.</p> <ul> <li><code>\"key_table\"</code> - unsupported by PyTao plotting.</li> </ul> <p>With <code>type</code> set to <code>\"key_table\"</code>, the key bindings for use in single mode are displayed. Note: The \"key_table\" graph type does not have any associated curves.</p> <code>x</code> <code>TaoAxisSettings</code> <p>Primary x-axis settings.</p> <code>x2</code> <code>TaoAxisSettings</code> <p>Secondary x-axis settings.</p> <code>y</code> <code>TaoAxisSettings</code> <p>Primary y-axis settings.</p> <code>y2</code> <code>TaoAxisSettings</code> <p>Secondary y-axis settings.</p> <code>y2_mirrors_y</code> <code>bool</code> <p>Keep y2 min/max the same as y-axis.</p> <code>x_axis_scale_factor</code> <code>float</code> <p>Sets the horizontal x-axis scale factor. For a given datum value, the plotted value will be: <code>x(plotted) = scale_factor * x(datum)</code> The default value is 1. For example, a %x_axis_scale_factor of 1000 will draw a 1.0 mm phase space z value at the 1.0 mark on the horizontal scale. That is, the horizontal scale will be in millimeters. Also see <code>curve(N)%y_axis_scale_factor</code>.</p>"},{"location":"api/plot/#pytao.plotting.settings.TaoGraphSettings-functions","title":"Functions","text":"pytao.plotting.settings.TaoGraphSettings.get_commands <pre><code>get_commands(region_name, graph_name, graph_type)\n</code></pre> <p>Get command strings to apply these settings with Tao.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> <code>str</code> <p>Region name.</p> required <code>graph_name</code> <code>str</code> <p>Graph name.</p> required <code>graph_type</code> <code>str</code> <p>Graph type.  Required to determine which commands to send - that is, <code>TaoFloorPlanSettings</code> will be skipped for non-floor plan graphs.</p> required <p>Returns:</p> Type Description <code>list of str</code> <p>Commands to send to Tao to apply these settings.</p> Source code in <code>pytao/plotting/settings.py</code> <pre><code>def get_commands(\n    self,\n    region_name: str,\n    graph_name: str,\n    graph_type: str,\n) -&gt; List[str]:\n    \"\"\"\n    Get command strings to apply these settings with Tao.\n\n    Parameters\n    ----------\n    region_name : str\n        Region name.\n    graph_name : str\n        Graph name.\n    graph_type : str\n        Graph type.  Required to determine which commands to send - that is,\n        `TaoFloorPlanSettings` will be skipped for non-floor plan graphs.\n\n    Returns\n    -------\n    list of str\n        Commands to send to Tao to apply these settings.\n    \"\"\"\n    result = []\n    for key in self.model_dump().keys():\n        value = getattr(self, key)\n        if value is None:\n            continue\n\n        if key == \"commands\":\n            result.extend(\n                [\n                    cmd.format(\n                        settings=self,\n                        region=region_name,\n                        graph_name=graph_name,\n                        graph_type=graph_type,\n                        graph=f\"{region_name}.{graph_name}\",\n                    )\n                    for cmd in value\n                    if cmd\n                ]\n            )\n            continue\n        if key in (\"curve_legend_origin\",) and isinstance(value, tuple):\n            value = QuickPlotPoint(*value)\n        elif key in (\"scale_margin\", \"margin\", \"text_legend_origin\") and isinstance(\n            value, tuple\n        ):\n            value = QuickPlotRectangle(*value)\n\n        if isinstance(value, QuickPlotPoint):\n            result.extend(value.get_commands(region_name, graph_name, key))\n        elif isinstance(value, TaoFloorPlanSettings):\n            result.extend(value.get_commands(region_name, graph_name))\n        elif isinstance(value, QuickPlotRectangle):\n            result.extend(value.get_commands(region_name, graph_name, key))\n        elif isinstance(value, TaoAxisSettings):\n            result.extend(value.get_commands(region_name, key))\n        elif key == \"n_curve_points\":\n            result.append(f\"set plot {region_name} n_curve_pts = {value}\")\n        elif key == \"text_legend\":\n            for legend_index, legend_value in value.items():\n                result.append(\n                    f\"set graph {region_name} text_legend({legend_index}) = {legend_value}\"\n                )\n        elif key == \"box\":\n            for box_index, box_value in value.items():\n                result.append(f\"set graph {region_name} box({box_index}) = {box_value}\")\n        elif isinstance(value, TaoFloorPlanSettings):\n            if graph_type == \"floor_plan\":\n                result.extend(value.get_commands(region_name, graph_name))\n        else:\n            result.append(f\"set graph {region_name}.{graph_name} {key} = {value}\")\n    return result\n</code></pre>"},{"location":"api/subprocesstao/","title":"SubprocessTao","text":""},{"location":"api/subprocesstao/#pytao.SubprocessTao","title":"pytao.SubprocessTao","text":"<pre><code>SubprocessTao(*args, **kwargs)\n</code></pre> <p>               Bases: <code>Tao</code></p> <p>Subprocess helper for Tao.</p> <p>This special version of the <code>Tao</code> class executes a Python subprocess which interacts with Tao through ctypes.</p> <p>This can be used exactly as the normal <code>Tao</code> object with the primary added benefit that Fortran crashes will not affect the main Python process.</p> <p>For full parameter information, see the <code>Tao</code> class documentation.</p> Usage <p>When creating many <code>SubprocessTao</code> objects, ensure to close the subprocess when done with it.  This can be done manually:</p> <pre><code>&gt;&gt;&gt; tao.close_subprocess()\n</code></pre> <p>Or automatically by way of a context manager:</p> <pre><code>&gt;&gt;&gt; with SubprocessTao(init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\", plot=True) as tao:\n...     tao.plot(\"floor\")\n</code></pre> Source code in <code>pytao/subproc.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self._subproc_pipe_ = None\n    try:\n        super().__init__(*args, **kwargs)\n    except Exception:\n        # In case we don't make a usable SubprocessTao object, close the\n        # subprocess so it doesn't linger.\n        try:\n            self.close_subprocess()\n        except Exception:\n            pass\n        raise\n</code></pre>"},{"location":"api/subprocesstao/#pytao.SubprocessTao-attributes","title":"Attributes","text":""},{"location":"api/subprocesstao/#pytao.SubprocessTao.subprocess_alive","title":"pytao.SubprocessTao.subprocess_alive  <code>property</code>","text":"<pre><code>subprocess_alive\n</code></pre> <p>Subprocess is still running.</p>"},{"location":"api/subprocesstao/#pytao.SubprocessTao-functions","title":"Functions","text":""},{"location":"api/subprocesstao/#pytao.SubprocessTao.close_subprocess","title":"pytao.SubprocessTao.close_subprocess","text":"<pre><code>close_subprocess()\n</code></pre> <p>Close the Tao subprocess.</p> Source code in <code>pytao/subproc.py</code> <pre><code>def close_subprocess(self) -&gt; None:\n    \"\"\"Close the Tao subprocess.\"\"\"\n    if self._subproc_pipe_ is not None:\n        self._subproc_pipe_.close()\n    self._subproc_pipe_ = None\n</code></pre>"},{"location":"api/subprocesstao/#pytao.SubprocessTao.cmd","title":"pytao.SubprocessTao.cmd","text":"<pre><code>cmd(cmd, raises=True)\n</code></pre> <p>Runs a command, and returns the output.</p> Source code in <code>pytao/subproc.py</code> <pre><code>@override\ndef cmd(self, cmd: str, raises: bool = True) -&gt; List[str]:\n    \"\"\"Runs a command, and returns the output.\"\"\"\n    res = self._send_command_through_pipe(\"cmd\", cmd, raises=raises)\n    return cast(List[str], res)\n</code></pre>"},{"location":"api/subprocesstao/#pytao.SubprocessTao.cmd_integer","title":"pytao.SubprocessTao.cmd_integer","text":"<pre><code>cmd_integer(cmd, raises=True)\n</code></pre> <p>Runs a command, and returns an integer array.</p> Source code in <code>pytao/subproc.py</code> <pre><code>@override\ndef cmd_integer(self, cmd: str, raises: bool = True) -&gt; Optional[np.ndarray]:\n    \"\"\"Runs a command, and returns an integer array.\"\"\"\n    res = self._send_command_through_pipe(\"cmd_integer\", cmd, raises=raises)\n    return cast(Optional[np.ndarray], res)\n</code></pre>"},{"location":"api/subprocesstao/#pytao.SubprocessTao.cmd_real","title":"pytao.SubprocessTao.cmd_real","text":"<pre><code>cmd_real(cmd, raises=True)\n</code></pre> <p>Runs a command, and returns a floating point array.</p> Source code in <code>pytao/subproc.py</code> <pre><code>@override\ndef cmd_real(self, cmd: str, raises: bool = True) -&gt; Optional[np.ndarray]:\n    \"\"\"Runs a command, and returns a floating point array.\"\"\"\n    res = self._send_command_through_pipe(\"cmd_real\", cmd, raises=raises)\n    return cast(Optional[np.ndarray], res)\n</code></pre>"},{"location":"api/subprocesstao/#pytao.SubprocessTao.subprocess_call","title":"pytao.SubprocessTao.subprocess_call","text":"<pre><code>subprocess_call(func, **kwargs)\n</code></pre> <p>Run a custom function in the subprocess.</p> <p>The function must be readily importable by Python and not a dynamically created function or <code>lambda</code>.  The first argument passed will be the <code>tao</code> object, and the remainder of the arguments are user-specified by keyword only.</p> Source code in <code>pytao/subproc.py</code> <pre><code>def subprocess_call(self, func: Callable, **kwargs):\n    \"\"\"\n    Run a custom function in the subprocess.\n\n    The function must be readily importable by Python and not a dynamically\n    created function or `lambda`.  The first argument passed will be the\n    `tao` object, and the remainder of the arguments are user-specified by\n    keyword only.\n    \"\"\"\n    if not self.subprocess_alive:\n        raise TaoDisconnectedError(\n            \"Tao subprocess is no longer running. Make a new `SubprocessTao` \"\n            \"object or reinitialize with `.init()`.\"\n        )\n    assert self._subproc_pipe_ is not None\n    return self._subproc_pipe_.send_receive_custom(func, kwargs)\n</code></pre>"},{"location":"api/tao/","title":"Tao","text":""},{"location":"api/tao/#pytao.Tao","title":"pytao.Tao","text":"<pre><code>Tao(init='', so_lib='', *, plot='tao', beam_file=None, beam_init_position_file=None, building_wall_file=None, command='', data_file=None, debug=False, disable_smooth_line_calc=False, external_plotting=False, geometry='', hook_init_file=None, init_file=None, lattice_file=None, log_startup=False, no_stopping=False, noinit=False, noplot=False, nostartup=False, no_rad_int=False, plot_file=None, prompt_color='', reverse=False, rf_on=False, quiet=False, slice_lattice='', start_branch_at='', startup_file=None, symbol_import=False, var_file=None)\n</code></pre> <p>               Bases: <code>TaoCore</code></p> <p>Communicate with Tao using ctypes.</p> <p>Parameters:</p> Name Type Description Default <code>init</code> <code>str</code> <p>Initialization string for Tao.  Same as the tao command-line, including \"-init\" and such.  Shell variables in <code>init</code> strings will be expanded by Tao.  For example, an <code>init</code> string containing <code>$HOME</code> would be replaced by your home directory.</p> <code>''</code> <code>so_lib</code> <code>str</code> <p>Path to the Tao shared library.  Auto-detected if not specified.</p> <code>''</code> <code>plot</code> <code>(str, bool)</code> <p>Use pytao's plotting mechanism with matplotlib or bokeh, if available. If <code>True</code>, pytao will pick an appropriate plotting backend. If <code>False</code> or \"tao\", Tao plotting will be used. (Default) If \"mpl\", the pytao matplotlib plotting backend will be selected. If \"bokeh\", the pytao Bokeh plotting backend will be selected.</p> <code>'tao'</code> <code>beam_file</code> <code>str or Path</code> <p>File containing the tao_beam_init namelist.</p> <code>None</code> <code>beam_init_position_file</code> <code>Path or str</code> <p>File containing initial particle positions.</p> <code>None</code> <code>building_wall_file</code> <code>str or Path</code> <p>Define the building tunnel wall</p> <code>None</code> <code>command</code> <code>str</code> <p>Commands to run after startup file commands</p> <code>''</code> <code>data_file</code> <code>str or Path</code> <p>Define data for plotting and optimization</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Debug mode for Wizards</p> <code>False</code> <code>disable_smooth_line_calc</code> <code>bool</code> <p>Disable the smooth line calc used in plotting</p> <code>False</code> <code>external_plotting</code> <code>bool</code> <p>Tells Tao that plotting is done externally to Tao.</p> <code>False</code> <code>geometry</code> <code>\"wxh\" or (width, height) tuple</code> <p>Plot window geometry (pixels)</p> <code>''</code> <code>hook_init_file</code> <code> pathlib.Path or str</code> <p>Init file for hook routines (Default = tao_hook.init)</p> <code>None</code> <code>init_file</code> <code>str or Path</code> <p>Tao init file</p> <code>None</code> <code>lattice_file</code> <code>str or Path</code> <p>Bmad lattice file</p> <code>None</code> <code>log_startup</code> <code>bool</code> <p>Write startup debugging info</p> <code>False</code> <code>no_stopping</code> <code>bool</code> <p>For debugging : Prevents Tao from exiting on errors</p> <code>False</code> <code>noinit</code> <code>bool</code> <p>Do not use Tao init file.</p> <code>False</code> <code>noplot</code> <code>bool</code> <p>Do not open a plotting window</p> <code>False</code> <code>nostartup</code> <code>bool</code> <p>Do not open a startup command file</p> <code>False</code> <code>no_rad_int</code> <code>bool</code> <p>Do not do any radiation integrals calculations.</p> <code>False</code> <code>plot_file</code> <code>str or Path</code> <p>Plotting initialization file</p> <code>None</code> <code>prompt_color</code> <code>str</code> <p>Set color of prompt string. Default is blue.</p> <code>''</code> <code>reverse</code> <code>bool</code> <p>Reverse lattice element order?</p> <code>False</code> <code>rf_on</code> <code>bool</code> <p>Use \"--rf_on\" to turn off RF (default is now RF on)</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output when running a command file?</p> <code>False</code> <code>slice_lattice</code> <code>str</code> <p>Discards elements from lattice that are not in the list</p> <code>''</code> <code>start_branch_at</code> <code>str</code> <p>Start lattice branch at element.</p> <code>''</code> <code>startup_file</code> <code>str or Path</code> <p>Commands to run after parsing Tao init file</p> <code>None</code> <code>symbol_import</code> <code>bool</code> <p>Import symbols defined in lattice files(s)?</p> <code>False</code> <code>var_file</code> <code>str or Path</code> <p>Define variables for plotting and optimization</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>plot_backend_name</code> <code>str or None</code> <p>Plotting backend name, if using pytao plotting. <code>None</code> indicates that internal Tao plotting is to be used. Changing the backend may require reinitialization to enable external plotting.</p> <code>init_output</code> <code>list of str</code> <p>Tao initialization output, recorded when the Tao object first initializes.  Subsequent calls to <code>init()</code> will override this variable.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>@override\ndef __init__(\n    self,\n    init: str = \"\",\n    so_lib: str = \"\",\n    *,\n    plot: Union[str, bool] = \"tao\",\n    beam_file: Optional[AnyPath] = None,\n    beam_init_position_file: Optional[AnyPath] = None,\n    building_wall_file: Optional[AnyPath] = None,\n    command: str = \"\",\n    data_file: Optional[AnyPath] = None,\n    debug: bool = False,\n    disable_smooth_line_calc: bool = False,\n    external_plotting: bool = False,\n    geometry: Union[str, Tuple[int, int]] = \"\",\n    hook_init_file: Optional[AnyPath] = None,\n    init_file: Optional[AnyPath] = None,\n    lattice_file: Optional[AnyPath] = None,\n    log_startup: bool = False,\n    no_stopping: bool = False,\n    noinit: bool = False,\n    noplot: bool = False,\n    nostartup: bool = False,\n    no_rad_int: bool = False,\n    plot_file: Optional[AnyPath] = None,\n    prompt_color: str = \"\",\n    reverse: bool = False,\n    rf_on: bool = False,\n    quiet: bool = False,\n    slice_lattice: str = \"\",\n    start_branch_at: str = \"\",\n    startup_file: Optional[AnyPath] = None,\n    symbol_import: bool = False,\n    var_file: Optional[AnyPath] = None,\n):\n    self._init_shared_library(so_lib=so_lib)\n    self.plot_backend_name = None\n    self._graph_managers = {}\n    self._tao_version_checked = False\n    # NOTE: do not call super() here - we handle the init arguments on our\n    # own.\n    # super().__init__(init=\"\", so_lib=so_lib)\n    self.init(\n        cmd=init,\n        plot=plot,\n        beam_file=beam_file,\n        beam_init_position_file=beam_init_position_file,\n        building_wall_file=building_wall_file,\n        command=command,\n        data_file=data_file,\n        debug=debug,\n        disable_smooth_line_calc=disable_smooth_line_calc,\n        external_plotting=external_plotting,\n        geometry=geometry,\n        hook_init_file=hook_init_file,\n        init_file=init_file,\n        lattice_file=lattice_file,\n        log_startup=log_startup,\n        no_stopping=no_stopping,\n        noinit=noinit,\n        noplot=noplot,\n        nostartup=nostartup,\n        no_rad_int=no_rad_int,\n        plot_file=plot_file,\n        prompt_color=prompt_color,\n        reverse=reverse,\n        rf_on=rf_on,\n        quiet=quiet,\n        slice_lattice=slice_lattice,\n        start_branch_at=start_branch_at,\n        startup_file=startup_file,\n        symbol_import=symbol_import,\n        var_file=var_file,\n    )\n    try:\n        self.register_cell_magic()\n    except NameError:\n        # Not in IPython\n        pass\n    except Exception:\n        logger.debug(\"Failed to register cell magic\", exc_info=True)\n</code></pre>"},{"location":"api/tao/#pytao.Tao-attributes","title":"Attributes","text":""},{"location":"api/tao/#pytao.Tao.bokeh","title":"pytao.Tao.bokeh  <code>property</code>","text":"<pre><code>bokeh\n</code></pre> <p>Get the Bokeh graph manager.</p>"},{"location":"api/tao/#pytao.Tao.matplotlib","title":"pytao.Tao.matplotlib  <code>property</code>","text":"<pre><code>matplotlib\n</code></pre> <p>Get the Matplotlib graph manager.</p>"},{"location":"api/tao/#pytao.Tao.plot_manager","title":"pytao.Tao.plot_manager  <code>property</code>","text":"<pre><code>plot_manager\n</code></pre> <p>The currently-configured plot graph manager.</p> <p>This can be configured at initialization time by specifying <code>plot=\"mpl\"</code>, for example. This may also be reconfigured by changing the attribute <code>plot_backend_name</code>.</p>"},{"location":"api/tao/#pytao.Tao-functions","title":"Functions","text":""},{"location":"api/tao/#pytao.Tao.beam","title":"pytao.Tao.beam","text":"<pre><code>beam(ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output beam parameters that are not in the beam_init structure.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>''</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe beam {ix_uni}@{ix_branch}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p> <p>Note: To set beam_init parameters use the \"set beam\" command.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def beam(self, ix_branch, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output beam parameters that are not in the beam_init structure.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe beam {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Note: To set beam_init parameters use the \"set beam\" command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f\"pipe beam {ix_uni}@{ix_branch}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"beam\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.beam_init","title":"pytao.Tao.beam_init","text":"<pre><code>beam_init(ix_branch, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output beam_init parameters.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>''</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe beam_init {ix_uni}@{ix_branch}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p> <p>Note: To set beam_init parameters use the \"set beam_init\" command</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def beam_init(self, ix_branch, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output beam_init parameters.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe beam_init {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Note: To set beam_init parameters use the \"set beam_init\" command\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f\"pipe beam_init {ix_uni}@{ix_branch}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"beam_init\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.bmad_com","title":"pytao.Tao.bmad_com","text":"<pre><code>bmad_com(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output bmad_com structure components.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe bmad_com</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bmad_com(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output bmad_com structure components.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe bmad_com\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe bmad_com\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"bmad_com\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.branch1","title":"pytao.Tao.branch1","text":"<pre><code>branch1(ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lattice branch information for a particular lattice branch.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>''</code> required <code>ix_branch</code> <code>''</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe branch1 {ix_uni}@{ix_branch}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def branch1(self, ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice branch information for a particular lattice branch.\n\n    Parameters\n    ----------\n    ix_uni : \"\"\n    ix_branch : \"\"\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe branch1 {ix_uni}@{ix_branch}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f\"pipe branch1 {ix_uni}@{ix_branch}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"branch1\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.building_wall_graph","title":"pytao.Tao.building_wall_graph","text":"<pre><code>building_wall_graph(graph, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output (x, y) points for drawing the building wall for a particular graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> required <p>Returns:</p> Type Description <code>list of dicts</code> Notes <p>Command syntax:   pipe building_wall_graph {graph}</p> <p>Where:   {graph} is a plot region graph name.</p> <p>Note: The graph defines the coordinate system for the (x, y) points.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall  args:    graph: floor_plan.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_graph(self, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x, y) points for drawing the building wall for a particular graph.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    list of dicts\n\n    Notes\n    -----\n    Command syntax:\n      pipe building_wall_graph {graph}\n\n    Where:\n      {graph} is a plot region graph name.\n\n    Note: The graph defines the coordinate system for the (x, y) points.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall\n     args:\n       graph: floor_plan.g\n\n    \"\"\"\n    cmd = f\"pipe building_wall_graph {graph}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"building_wall_graph\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.building_wall_list","title":"pytao.Tao.building_wall_list","text":"<pre><code>building_wall_list(*, ix_section='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output List of building wall sections or section points</p> <p>Parameters:</p> Name Type Description Default <code>ix_section</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>list of dicts</code> Notes <p>Command syntax:   pipe building_wall_list {ix_section}</p> <p>Where:   {ix_section} is a building wall section index.</p> <p>If {ix_section} is not present, a list of building wall sections is given. If {ix_section} is present, a list of section points is given.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall  args:    ix_section:</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall  args:    ix_section: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_list(self, *, ix_section=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output List of building wall sections or section points\n\n    Parameters\n    ----------\n    ix_section : optional\n\n    Returns\n    -------\n    list of dicts\n\n    Notes\n    -----\n    Command syntax:\n      pipe building_wall_list {ix_section}\n\n    Where:\n      {ix_section} is a building wall section index.\n\n    If {ix_section} is not present, a list of building wall sections is given.\n    If {ix_section} is present, a list of section points is given.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall\n     args:\n       ix_section:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall\n     args:\n       ix_section: 1\n\n    \"\"\"\n    cmd = f\"pipe building_wall_list {ix_section}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"building_wall_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.building_wall_point","title":"pytao.Tao.building_wall_point","text":"<pre><code>building_wall_point(ix_section, ix_point, z, x, radius, z_center, x_center, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>add or delete a building wall point</p> <p>Parameters:</p> Name Type Description Default <code>ix_section</code> required <code>ix_point</code> required <code>z</code> required <code>x</code> required <code>radius</code> required <code>z_center</code> required <code>x_center</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}</p> <p>Where:   {ix_section}    -- Section index.   {ix_point}      -- Point index. Points of higher indexes will be moved up                        if adding a point and down if deleting.   {z}, etc...     -- See tao_building_wall_point_struct components.                   -- If {z} is set to \"delete\" then delete the point.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall  args:    ix_section: 1    ix_point: 1    z: 0    x: 0    radius: 0    z_center: 0    x_center: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_point(\n    self,\n    ix_section,\n    ix_point,\n    z,\n    x,\n    radius,\n    z_center,\n    x_center,\n    *,\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    add or delete a building wall point\n\n    Parameters\n    ----------\n    ix_section\n    ix_point\n    z\n    x\n    radius\n    z_center\n    x_center\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}\n\n    Where:\n      {ix_section}    -- Section index.\n      {ix_point}      -- Point index. Points of higher indexes will be moved up\n                           if adding a point and down if deleting.\n      {z}, etc...     -- See tao_building_wall_point_struct components.\n                      -- If {z} is set to \"delete\" then delete the point.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall\n     args:\n       ix_section: 1\n       ix_point: 1\n       z: 0\n       x: 0\n       radius: 0\n       z_center: 0\n       x_center: 0\n\n    \"\"\"\n    cmd = f\"pipe building_wall_point {ix_section}^^{ix_point}^^{z}^^{x}^^{radius}^^{z_center}^^{x_center}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"building_wall_point\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.building_wall_section","title":"pytao.Tao.building_wall_section","text":"<pre><code>building_wall_section(ix_section, sec_name, sec_constraint, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Add or delete a building wall section</p> <p>Parameters:</p> Name Type Description Default <code>ix_section</code> required <code>sec_name</code> required <code>sec_constraint</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}</p> <p>Where:   {ix_section}      -- Section index. Sections with higher indexes will be                          moved up if adding a section and down if deleting.   {sec_name}        -- Section name.   {sec_constraint}  -- A section constraint name or \"delete\". Must be one of:       delete          -- Delete section. Anything else will add the section.       none       left_side       right_side</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_section: 1    sec_name: test    sec_constraint: none</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def building_wall_section(\n    self, ix_section, sec_name, sec_constraint, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Add or delete a building wall section\n\n    Parameters\n    ----------\n    ix_section\n    sec_name\n    sec_constraint\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}\n\n    Where:\n      {ix_section}      -- Section index. Sections with higher indexes will be\n                             moved up if adding a section and down if deleting.\n      {sec_name}        -- Section name.\n      {sec_constraint}  -- A section constraint name or \"delete\". Must be one of:\n          delete          -- Delete section. Anything else will add the section.\n          none\n          left_side\n          right_side\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_section: 1\n       sec_name: test\n       sec_constraint: none\n\n    \"\"\"\n    cmd = f\"pipe building_wall_section {ix_section}^^{sec_name}^^{sec_constraint}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"building_wall_section\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.bunch1","title":"pytao.Tao.bunch1","text":"<pre><code>bunch1(ele_id, coordinate, *, which='model', ix_bunch='1', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Outputs Bunch parameters at the exit end of a given lattice element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>coordinate</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <code>ix_bunch</code> <code>default=1</code> <code>'1'</code> <p>Returns:</p> Type Description <code>real_array</code> <p>if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c']</p> <code>integer_array</code> <p>if coordinate in ['state', 'ix_ele']</p> Notes <p>Command syntax:   pipe bunch1 {ele_id}|{which} {ix_bunch} {coordinate}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {ix_bunch} is the bunch index.   {coordinate} is one of: x, px, y, py, z, pz, \"s\", \"t\", \"charge\", \"p0c\", \"state\", \"ix_ele\"</p> <p>For example, if {coordinate} = \"px\", the phase space px coordinate of each particle of the bunch is displayed. The \"state\" of a particle is an integer. A value of 1 means alive and any other value means the particle has been lost.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init  args:    ele_id: end    coordinate: x    which: model    ix_bunch: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch1(\n    self,\n    ele_id,\n    coordinate,\n    *,\n    which=\"model\",\n    ix_bunch=\"1\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Outputs Bunch parameters at the exit end of a given lattice element.\n\n    Parameters\n    ----------\n    ele_id\n    coordinate\n    which : default=model\n    ix_bunch : default=1\n\n    Returns\n    -------\n    real_array\n        if coordinate in ['x', 'px', 'y', 'py', 'z', 'pz', 's', 't', 'charge', 'p0c']\n    integer_array\n        if coordinate in ['state', 'ix_ele']\n\n    Notes\n    -----\n    Command syntax:\n      pipe bunch1 {ele_id}|{which} {ix_bunch} {coordinate}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {ix_bunch} is the bunch index.\n      {coordinate} is one of: x, px, y, py, z, pz, \"s\", \"t\", \"charge\", \"p0c\", \"state\", \"ix_ele\"\n\n    For example, if {coordinate} = \"px\", the phase space px coordinate of each particle\n    of the bunch is displayed. The \"state\" of a particle is an integer. A value of 1 means\n    alive and any other value means the particle has been lost.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init\n     args:\n       ele_id: end\n       coordinate: x\n       which: model\n       ix_bunch: 1\n\n    \"\"\"\n    cmd = f\"pipe bunch1 {ele_id}|{which} {ix_bunch} {coordinate}\"\n    if verbose:\n        print(cmd)\n    if coordinate in [\"x\", \"px\", \"y\", \"py\", \"z\", \"pz\", \"s\", \"t\", \"charge\", \"p0c\"]:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"bunch1\", cmd_type=\"real_array\"\n        )\n    if coordinate in [\"state\", \"ix_ele\"]:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"bunch1\", cmd_type=\"integer_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.bunch_comb","title":"pytao.Tao.bunch_comb","text":"<pre><code>bunch_comb(who, *, ix_uni='', ix_branch='', ix_bunch='1', flags='-array_out', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Outputs bunch parameters at a comb point. Also see the \"write bunch_comb\" and \"show bunch -comb\" commands.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>ix_bunch</code> <code>default=1</code> <code>'1'</code> <code>flags</code> <code>default=-array_out</code> <code>'-array_out'</code> <p>Returns:</p> Type Description <code>string_list</code> <p>if '-array_out' not in flags</p> <code>real_array</code> <p>if '-array_out' in flags</p> Notes <p>Command syntax:   pipe bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}</p> <p>Where:   {flags} are optional switches:       -array_out : If present, the output will be available in the tao_c_interface_com%c_real.   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a branch index. Defaults to s%global%default_branch.   {ix_bunch} is the bunch index. Defaults to 1.   {who} is one of:       x, px, y, py, z, pz, t, s, spin.x, spin.y, spin.z, p0c, beta     -- centroid       x.Q, y.Q, z.Q, a.Q, b.Q, c.Q where Q is one of: beta, alpha, gamma, phi, eta, etap,                                                                 sigma, sigma_p, emit, norm_emit     sigma.IJ where I, J in range [1,6]     rel_min.I, rel_max.I where I in range [1,6]     charge_live, n_particle_live, n_particle_lost_in_ele, ix_ele</p> <p>Note: If ix_uni or ix_branch is present, \"@\" must be present.</p> <p>Example:   pipe bunch_comb py 2@1 1</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init  args:    who: x.beta</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch_comb(\n    self,\n    who,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    ix_bunch=\"1\",\n    flags=\"-array_out\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Outputs bunch parameters at a comb point.\n    Also see the \"write bunch_comb\" and \"show bunch -comb\" commands.\n\n    Parameters\n    ----------\n    who\n    ix_uni : optional\n    ix_branch : optional\n    ix_bunch : default=1\n    flags : default=-array_out\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      pipe bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}\n\n    Where:\n      {flags} are optional switches:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {ix_bunch} is the bunch index. Defaults to 1.\n      {who} is one of:\n          x, px, y, py, z, pz, t, s, spin.x, spin.y, spin.z, p0c, beta     -- centroid\n          x.Q, y.Q, z.Q, a.Q, b.Q, c.Q where Q is one of: beta, alpha, gamma, phi, eta, etap,\n                                                                    sigma, sigma_p, emit, norm_emit\n        sigma.IJ where I, J in range [1,6]\n        rel_min.I, rel_max.I where I in range [1,6]\n        charge_live, n_particle_live, n_particle_lost_in_ele, ix_ele\n\n      Note: If ix_uni or ix_branch is present, \"@\" must be present.\n\n    Example:\n      pipe bunch_comb py 2@1 1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init\n     args:\n       who: x.beta\n\n    \"\"\"\n    cmd = f\"pipe bunch_comb {flags} {who} {ix_uni}@{ix_branch} {ix_bunch}\"\n    if verbose:\n        print(cmd)\n    if \"-array_out\" not in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"bunch_comb\", cmd_type=\"string_list\"\n        )\n    if \"-array_out\" in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"bunch_comb\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.bunch_data","title":"pytao.Tao.bunch_data","text":"<pre><code>bunch_data(ele_id, *, which='model', ix_bunch=1, verbose=False)\n</code></pre> <p>Returns bunch data in openPMD-beamphysics format/notation.</p> Notes <p>Note that Tao's 'write beam' will also write a proper h5 file in this format.</p> <p>Expected usage:     data = bunch_data(tao, 'end')     from pmd_beamphysics import ParticleGroup     P = ParicleGroup(data=data)</p> <p>Returns:</p> Name Type Description <code>data</code> <code>dict</code> <p>dict of arrays, with keys 'x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'</p> <p>Examples:</p> <p>Example: 1 init: $ACC_ROOT_DIR/tao/examples/csr_beam_tracking/tao.init args: ele_id: end which: model ix_bunch: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch_data(self, ele_id, *, which=\"model\", ix_bunch=1, verbose=False):\n    \"\"\"\n    Returns bunch data in openPMD-beamphysics format/notation.\n\n    Notes\n    -----\n    Note that Tao's 'write beam' will also write a proper h5 file in this format.\n\n    Expected usage:\n        data = bunch_data(tao, 'end')\n        from pmd_beamphysics import ParticleGroup\n        P = ParicleGroup(data=data)\n\n\n    Returns\n    -------\n    data : dict\n        dict of arrays, with keys 'x', 'px', 'y', 'py', 't', 'pz',\n        'status', 'weight', 'z', 'species'\n\n\n    Examples\n    --------\n    Example: 1\n    init: $ACC_ROOT_DIR/tao/examples/csr_beam_tracking/tao.init\n    args:\n    ele_id: end\n    which: model\n    ix_bunch: 1\n\n    \"\"\"\n\n    # Get species\n    stats = self.bunch_params(ele_id, which=which, verbose=verbose)\n    species = stats[\"species\"]\n\n    dat = {}\n    for coordinate in [\"x\", \"px\", \"y\", \"py\", \"t\", \"pz\", \"p0c\", \"charge\", \"state\"]:\n        dat[coordinate] = self.bunch1(\n            ele_id,\n            coordinate=coordinate,\n            which=which,\n            ix_bunch=ix_bunch,\n            verbose=verbose,\n        )\n\n    # Remove normalizations\n    p0c = dat.pop(\"p0c\")\n\n    dat[\"status\"] = dat.pop(\"state\")\n    dat[\"weight\"] = dat.pop(\"charge\")\n\n    # px from Bmad is px/p0c\n    # pz from Bmad is delta = p/p0c -1.\n    # pz = sqrt( (delta+1)**2 -px**2 -py**2)*p0c\n    dat[\"pz\"] = np.sqrt((dat[\"pz\"] + 1) ** 2 - dat[\"px\"] ** 2 - dat[\"py\"] ** 2) * p0c\n    dat[\"px\"] = dat[\"px\"] * p0c\n    dat[\"py\"] = dat[\"py\"] * p0c\n\n    # z = 0 by definition\n    dat[\"z\"] = np.full(len(dat[\"x\"]), 0)\n\n    dat[\"species\"] = species.lower()\n\n    return dat\n</code></pre>"},{"location":"api/tao/#pytao.Tao.bunch_params","title":"pytao.Tao.bunch_params","text":"<pre><code>bunch_params(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Outputs bunch parameters at the exit end of a given lattice element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe bunch_params {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe bunch_params end|model  ! parameters at model lattice element named \"end\".</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init  args:    ele_id: end    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def bunch_params(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Outputs bunch parameters at the exit end of a given lattice element.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe bunch_params {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe bunch_params end|model  ! parameters at model lattice element named \"end\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/csr_beam_tracking/tao.init\n     args:\n       ele_id: end\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe bunch_params {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"bunch_params\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.cmds","title":"pytao.Tao.cmds","text":"<pre><code>cmds(cmds, suppress_lattice_calc=True, suppress_plotting=True, raises=True)\n</code></pre> <p>Runs a list of commands, optionally suppressing lattice calculations and plotting updates.</p> <p>Parameters:</p> Name Type Description Default <code>cmds</code> <code>list of str</code> <p>List of string commands.</p> required <code>suppress_lattice_calc</code> <code>bool</code> <p>Suppress lattice calc when applying the commands.</p> <code>True</code> <code>suppress_plotting</code> <p>Suppress plotting when applying commands.</p> <code>True</code> <code>raises</code> <code>bool</code> <p>Raise an exception of [ERROR or [FATAL is detected in the output.</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>Results corresponding to the commands</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def cmds(self, cmds, suppress_lattice_calc=True, suppress_plotting=True, raises=True):\n    \"\"\"\n    Runs a list of commands, optionally suppressing lattice calculations\n    and plotting updates.\n\n    Parameters\n    ----------\n    cmds : list of str\n        List of string commands.\n    suppress_lattice_calc : bool, default=True\n        Suppress lattice calc when applying the commands.\n    suppress_plotting  : bool, default=True\n        Suppress plotting when applying commands.\n    raises : bool, default=True\n        Raise an exception of [ERROR or [FATAL is detected in the output.\n\n    Returns\n    -------\n    list\n        Results corresponding to the commands\n\n    \"\"\"\n    # Get globals to detect plotting\n    g = self.tao_global()\n    ploton, laton = g[\"plot_on\"], g[\"lattice_calc_on\"]\n\n    if suppress_plotting and ploton:\n        self.cmd(\"set global plot_on = F\")\n    if suppress_lattice_calc and laton:\n        self.cmd(\"set global lattice_calc_on = F\")\n\n    # Actually apply commands\n    results = []\n    for cmd in cmds:\n        res = self.cmd(cmd, raises=raises)\n        results.append(res)\n\n    if suppress_plotting and ploton:\n        self.cmd(\"set global plot_on = T\")\n    if suppress_lattice_calc and laton:\n        self.cmd(\"set global lattice_calc_on = T\")\n\n    return results\n</code></pre>"},{"location":"api/tao/#pytao.Tao.constraints","title":"pytao.Tao.constraints","text":"<pre><code>constraints(who, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output optimization data and variable parameters that contribute to the merit function.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <p>Returns:</p> Type Description <code>list of dicts</code> <p>The keys depend on \"data\" or \"var\"</p> Notes <p>Command syntax:   pipe constraints {who}</p> <p>Where:   {who} is one of: \"data\" or \"var\"</p> <p>Data constraints output is:   data name   constraint type   evaluation element name   start element name   end/reference element name   measured value   ref value (only relavent if global%opt_with_ref = T)   model value   base value (only relavent if global%opt_with_base = T)   weight   merit value   location where merit is evaluated (if there is a range) Var constraints output is:   var name   Associated varible attribute   meas value   ref value (only relavent if global%opt_with_ref = T)   model value   base value (only relavent if global%opt_with_base = T)   weight   merit value   dmerit/dvar</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    who: data</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who:var</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def constraints(self, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization data and variable parameters that contribute to the merit function.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    list of dicts\n        The keys depend on \"data\" or \"var\"\n\n    Notes\n    -----\n    Command syntax:\n      pipe constraints {who}\n\n    Where:\n      {who} is one of: \"data\" or \"var\"\n\n    Data constraints output is:\n      data name\n      constraint type\n      evaluation element name\n      start element name\n      end/reference element name\n      measured value\n      ref value (only relavent if global%opt_with_ref = T)\n      model value\n      base value (only relavent if global%opt_with_base = T)\n      weight\n      merit value\n      location where merit is evaluated (if there is a range)\n    Var constraints output is:\n      var name\n      Associated varible attribute\n      meas value\n      ref value (only relavent if global%opt_with_ref = T)\n      model value\n      base value (only relavent if global%opt_with_base = T)\n      weight\n      merit value\n      dmerit/dvar\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       who: data\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who:var\n\n    \"\"\"\n    cmd = f\"pipe constraints {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"constraints\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.da_aperture","title":"pytao.Tao.da_aperture","text":"<pre><code>da_aperture(*, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output dynamic aperture data</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe da_aperture {ix_uni}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def da_aperture(self, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output dynamic aperture data\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe da_aperture {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    \"\"\"\n    cmd = f\"pipe da_aperture {ix_uni}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"da_aperture\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.da_params","title":"pytao.Tao.da_params","text":"<pre><code>da_params(*, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output dynamic aperture input parameters</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe da_params {ix_uni}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def da_params(self, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output dynamic aperture input parameters\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe da_params {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    \"\"\"\n    cmd = f\"pipe da_params {ix_uni}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"da_params\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data","title":"pytao.Tao.data","text":"<pre><code>data(d2_name, d1_name, *, ix_uni='', dat_index='1', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output Individual datum parameters.</p> <p>Parameters:</p> Name Type Description Default <code>d2_name</code> required <code>d1_name</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <code>dat_index</code> <code>default=1</code> <code>'1'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {d2_name} is the name of the d2_data structure the datum is in.   {d1_datum} is the name of the d1_data structure the datum is in.   {dat_index} is the index of the datum.</p> <p>Use the \"pipe data-d1\" command to get detailed info on a specific d1 array.</p> <p>Example:   pipe data 1@orbit.x[10]</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni:    d2_name: twiss    d1_name: end    dat_index: 1</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: twiss    d1_name: end    dat_index: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data(\n    self,\n    d2_name,\n    d1_name,\n    *,\n    ix_uni=\"\",\n    dat_index=\"1\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output Individual datum parameters.\n\n    Parameters\n    ----------\n    d2_name\n    d1_name\n    ix_uni : optional\n    dat_index : default=1\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure the datum is in.\n      {d1_datum} is the name of the d1_data structure the datum is in.\n      {dat_index} is the index of the datum.\n\n    Use the \"pipe data-d1\" command to get detailed info on a specific d1 array.\n\n    Example:\n      pipe data 1@orbit.x[10]\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni:\n       d2_name: twiss\n       d1_name: end\n       dat_index: 1\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: twiss\n       d1_name: end\n       dat_index: 1\n\n    \"\"\"\n    cmd = f\"pipe data {ix_uni}@{d2_name}.{d1_name}[{dat_index}]\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"data\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d1_array","title":"pytao.Tao.data_d1_array","text":"<pre><code>data_d1_array(d2_datum, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of d1 arrays for a given data_d2.</p> <p>Parameters:</p> Name Type Description Default <code>d2_datum</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>list of dicts</code> Notes <p>Command syntax:   pipe data_d1_array {d2_datum}</p> <p>{d2_datum} should be of the form   {ix_uni}@{d2_datum_name}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni: 1    d2_datum: twiss</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d1_array(self, d2_datum, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of d1 arrays for a given data_d2.\n\n    Parameters\n    ----------\n    d2_datum\n    ix_uni : optional\n\n    Returns\n    -------\n    list of dicts\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d1_array {d2_datum}\n\n    {d2_datum} should be of the form\n      {ix_uni}@{d2_datum_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_datum: twiss\n\n    \"\"\"\n    cmd = f\"pipe data_d1_array {d2_datum}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d1_array\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d2","title":"pytao.Tao.data_d2","text":"<pre><code>data_d2(d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output information on a d2_datum.</p> <p>Parameters:</p> Name Type Description Default <code>d2_name</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe data_d2 {ix_uni}@{d2_name}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {d2_name} is the name of the d2_data structure.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: twiss</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2(self, d2_name, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output information on a d2_datum.\n\n    Parameters\n    ----------\n    d2_name\n    ix_uni : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d2 {ix_uni}@{d2_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: twiss\n\n    \"\"\"\n    cmd = f\"pipe data_d2 {ix_uni}@{d2_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d2\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d2_array","title":"pytao.Tao.data_d2_array","text":"<pre><code>data_d2_array(ix_uni, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output data d2 info for a given universe.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> required <p>Returns:</p> Type Description <code>list of str</code> Notes <p>Command syntax:   pipe data_d2_array {ix_uni}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.</p> <p>Example:   pipe data_d2_array 1</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni : 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_array(self, ix_uni, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output data d2 info for a given universe.\n\n    Parameters\n    ----------\n    ix_uni\n\n    Returns\n    -------\n    list of str\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d2_array {ix_uni}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n\n    Example:\n      pipe data_d2_array 1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni : 1\n\n    \"\"\"\n    cmd = f\"pipe data_d2_array {ix_uni}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d2_array\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d2_create","title":"pytao.Tao.data_d2_create","text":"<pre><code>data_d2_create(d2_name, n_d1_data, d_data_arrays_name_min_max, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Create a d2 data structure along with associated d1 and data arrays.</p> <p>Parameters:</p> Name Type Description Default <code>d2_name</code> required <code>n_d1_data</code> required <code>d_data_arrays_name_min_max</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {d2_name} is the name of the d2_data structure to create.   {n_d1_data} is the number of associated d1 data structures.   {d_data_arrays_name_min_max} has the form     {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}   where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.</p> <p>Example:   pipe data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47 This example creates a d2 data structure called \"orbit\" with two d1 structures called \"x\" and \"y\".</p> <p>The \"x\" d1 structure has an associated data array with indexes in the range [0, 45]. The \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].</p> <p>Use the \"set data\" command to set created datum parameters.</p> <p>Note: When setting multiple data parameters,       temporarily toggle s%global%lattice_calc_on to False   (\"set global lattice_calc_on = F\") to prevent Tao trying to       evaluate the partially created datum and generating unwanted error messages.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: orbit    n_d1_data: 2    d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_create(\n    self,\n    d2_name,\n    n_d1_data,\n    d_data_arrays_name_min_max,\n    *,\n    ix_uni=\"\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Create a d2 data structure along with associated d1 and data arrays.\n\n    Parameters\n    ----------\n    d2_name\n    n_d1_data\n    d_data_arrays_name_min_max\n    ix_uni : optional\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure to create.\n      {n_d1_data} is the number of associated d1 data structures.\n      {d_data_arrays_name_min_max} has the form\n        {name1}^^{lower_bound1}^^{upper_bound1}^^....^^{nameN}^^{lower_boundN}^^{upper_boundN}\n      where {name} is the data array name and {lower_bound} and {upper_bound} are the bounds of the array.\n\n    Example:\n      pipe data_d2_create 2@orbit^^2^^x^^0^^45^^y^^1^^47\n    This example creates a d2 data structure called \"orbit\" with\n    two d1 structures called \"x\" and \"y\".\n\n    The \"x\" d1 structure has an associated data array with indexes in the range [0, 45].\n    The \"y\" d1 structure has an associated data arrray with indexes in the range [1, 47].\n\n    Use the \"set data\" command to set created datum parameters.\n\n    Note: When setting multiple data parameters,\n          temporarily toggle s%global%lattice_calc_on to False\n      (\"set global lattice_calc_on = F\") to prevent Tao trying to\n          evaluate the partially created datum and generating unwanted error messages.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: orbit\n       n_d1_data: 2\n       d_data_arrays_name_min_max: x^^0^^45^^y^^1^^47\n\n    \"\"\"\n    cmd = f\"pipe data_d2_create {ix_uni}@{d2_name}^^{n_d1_data}^^{d_data_arrays_name_min_max}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d2_create\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d2_destroy","title":"pytao.Tao.data_d2_destroy","text":"<pre><code>data_d2_destroy(d2_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Destroy a d2 data structure along with associated d1 and data arrays.</p> <p>Parameters:</p> Name Type Description Default <code>d2_name</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe data_d2_destroy {ix_uni}@{d2_name}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {d2_name} is the name of the d2_data structure to destroy.</p> <p>Example:   pipe data_d2_destroy 2@orbit This destroys the orbit d2_data structure in universe 2.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    d2_name: orbit</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d2_destroy(self, d2_name, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Destroy a d2 data structure along with associated d1 and data arrays.\n\n    Parameters\n    ----------\n    d2_name\n    ix_uni : optional\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d2_destroy {ix_uni}@{d2_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the d2_data structure to destroy.\n\n    Example:\n      pipe data_d2_destroy 2@orbit\n    This destroys the orbit d2_data structure in universe 2.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       d2_name: orbit\n\n    \"\"\"\n    cmd = f\"pipe data_d2_destroy {ix_uni}@{d2_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d2_destroy\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_d_array","title":"pytao.Tao.data_d_array","text":"<pre><code>data_d_array(d2_name, d1_name, *, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of datums for a given d1_data structure.</p> <p>Parameters:</p> Name Type Description Default <code>d2_name</code> required <code>d1_name</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Name Type Description <code>datums</code> <code>list of dicts</code> <p>Each dict has keys: 'ix_d1', 'data_type', 'merit_type', 'ele_ref_name', 'ele_start_name', 'ele_name', 'meas_value', 'model_value', 'design_value', 'useit_opt', 'useit_plot', 'good_user', 'weight', 'exists'</p> Notes <p>Command syntax:   pipe data_d_array {ix_uni}@{d2_name}.{d1_name}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {d2_name} is the name of the containing d2_data structure.   {d1_name} is the name of the d1_data structure containing the array of datums.</p> <p>Example:   pipe data_d_array 1@orbit.x</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    ix_uni: 1    d2_name: twiss    d1_name: end</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_d_array(\n    self, d2_name, d1_name, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output list of datums for a given d1_data structure.\n\n    Parameters\n    ----------\n    d2_name\n    d1_name\n    ix_uni : optional\n\n    Returns\n    -------\n    datums: list of dicts\n        Each dict has keys:\n        'ix_d1', 'data_type', 'merit_type',\n        'ele_ref_name', 'ele_start_name', 'ele_name',\n        'meas_value', 'model_value', 'design_value',\n        'useit_opt', 'useit_plot', 'good_user',\n        'weight', 'exists'\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_d_array {ix_uni}@{d2_name}.{d1_name}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {d2_name} is the name of the containing d2_data structure.\n      {d1_name} is the name of the d1_data structure containing the array of datums.\n\n    Example:\n      pipe data_d_array 1@orbit.x\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       ix_uni: 1\n       d2_name: twiss\n       d1_name: end\n\n    \"\"\"\n    cmd = f\"pipe data_d_array {ix_uni}@{d2_name}.{d1_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_d_array\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_parameter","title":"pytao.Tao.data_parameter","text":"<pre><code>data_parameter(data_array, parameter, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output an array of values for a particular datum parameter for a given array of datums,</p> <p>Parameters:</p> Name Type Description Default <code>data_array</code> required <code>parameter</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe data_parameter {data_array} {parameter}</p> <p>{parameter} may be any tao_data_struct parameter. Example:   pipe data_parameter orbit.x model_value</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    data_array: twiss.end    parameter: model_value</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_parameter(\n    self, data_array, parameter, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output an array of values for a particular datum parameter for a given array of datums,\n\n    Parameters\n    ----------\n    data_array\n    parameter\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_parameter {data_array} {parameter}\n\n    {parameter} may be any tao_data_struct parameter.\n    Example:\n      pipe data_parameter orbit.x model_value\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       data_array: twiss.end\n       parameter: model_value\n\n    \"\"\"\n    cmd = f\"pipe data_parameter {data_array} {parameter}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_parameter\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.data_set_design_value","title":"pytao.Tao.data_set_design_value","text":"<pre><code>data_set_design_value(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Set the design (and base &amp; model) values for all datums.</p> <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe data_set_design_value</p> <p>Example:   pipe data_set_design_value</p> <p>Note: Use the \"data_d2_create\" and \"datum_create\" first to create datums.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def data_set_design_value(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Set the design (and base &amp; model) values for all datums.\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe data_set_design_value\n\n    Example:\n      pipe data_set_design_value\n\n    Note: Use the \"data_d2_create\" and \"datum_create\" first to create datums.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n\n    \"\"\"\n    cmd = \"pipe data_set_design_value\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"data_set_design_value\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.datum_create","title":"pytao.Tao.datum_create","text":"<pre><code>datum_create(datum_name, data_type, *, ele_ref_name='', ele_start_name='', ele_name='', merit_type='', meas='0', good_meas='F', ref='0', good_ref='F', weight='0', good_user='T', data_source='lat', eval_point='END', s_offset='0', ix_bunch='0', invalid_value='0', spin_axis_n0_1='', spin_axis_n0_2='', spin_axis_n0_3='', spin_axis_l_1='', spin_axis_l_2='', spin_axis_l_3='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Create a datum.</p> <p>Parameters:</p> Name Type Description Default <code>datum_name</code> required <code>data_type</code> required <code>ele_ref_name</code> <code>optional</code> <code>''</code> <code>ele_start_name</code> <code>optional</code> <code>''</code> <code>ele_name</code> <code>optional</code> <code>''</code> <code>merit_type</code> <code>optional</code> <code>''</code> <code>meas</code> <code>default=0</code> <code>'0'</code> <code>good_meas</code> <code>default=F</code> <code>'F'</code> <code>ref</code> <code>default=0</code> <code>'0'</code> <code>good_ref</code> <code>default=F</code> <code>'F'</code> <code>weight</code> <code>default=0</code> <code>'0'</code> <code>good_user</code> <code>default=T</code> <code>'T'</code> <code>data_source</code> <code>default=lat</code> <code>'lat'</code> <code>eval_point</code> <code>default=END</code> <code>'END'</code> <code>s_offset</code> <code>default=0</code> <code>'0'</code> <code>ix_bunch</code> <code>default=0</code> <code>'0'</code> <code>invalid_value</code> <code>default=0</code> <code>'0'</code> <code>spin_axis</code> required <code>spin_axis</code> required <code>spin_axis</code> required <code>spin_axis</code> required <code>spin_axis</code> required <code>spin_axis</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^                       {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^                       {good_ref}^^{weight}^^{good_user}^^{data_source}^^                       {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^                       {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^                       {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}</p> <p>Note: The 3 values for spin_axis%n0, as a group, are optional.       Also the 3 values for spin_axis%l are, as a group, optional. Note: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays. Note: After creating all your datums, use the \"data_set_design_value\" routine to       set the design (and model) values.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    datum_name: twiss.end[6]    data_type: beta.y    ele_ref_name:    ele_start_name:    ele_name: P1    merit_type: target    meas: 0    good_meas: T    ref: 0    good_ref: T    weight: 0.3    good_user: T    data_source: lat    eval_point: END    s_offset: 0    ix_bunch: 1    invalid_value: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def datum_create(\n    self,\n    datum_name,\n    data_type,\n    *,\n    ele_ref_name=\"\",\n    ele_start_name=\"\",\n    ele_name=\"\",\n    merit_type=\"\",\n    meas=\"0\",\n    good_meas=\"F\",\n    ref=\"0\",\n    good_ref=\"F\",\n    weight=\"0\",\n    good_user=\"T\",\n    data_source=\"lat\",\n    eval_point=\"END\",\n    s_offset=\"0\",\n    ix_bunch=\"0\",\n    invalid_value=\"0\",\n    spin_axis_n0_1=\"\",\n    spin_axis_n0_2=\"\",\n    spin_axis_n0_3=\"\",\n    spin_axis_l_1=\"\",\n    spin_axis_l_2=\"\",\n    spin_axis_l_3=\"\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Create a datum.\n\n    Parameters\n    ----------\n    datum_name          ! EG: orb.x[3]\n    data_type           ! EG: orbit.x\n    ele_ref_name : optional\n    ele_start_name : optional\n    ele_name : optional\n    merit_type : optional\n    meas : default=0\n    good_meas : default=F\n    ref : default=0\n    good_ref : default=F\n    weight : default=0\n    good_user : default=T\n    data_source : default=lat\n    eval_point : default=END\n    s_offset : default=0\n    ix_bunch : default=0\n    invalid_value : default=0\n    spin_axis%n0(1) : optional\n    spin_axis%n0(2) : optional\n    spin_axis%n0(3) : optional\n    spin_axis%l(1) : optional\n    spin_axis%l(2) : optional\n    spin_axis%l(3) : optional\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^\n                          {ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^\n                          {good_ref}^^{weight}^^{good_user}^^{data_source}^^\n                          {eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^\n                          {spin_axis%n0(1)}^^{spin_axis%n0(2)}^^{spin_axis%n0(3)}^^\n                          {spin_axis%l(1)}^^{spin_axis%l(2)}^^{spin_axis%l(3)}\n\n    Note: The 3 values for spin_axis%n0, as a group, are optional.\n          Also the 3 values for spin_axis%l are, as a group, optional.\n    Note: Use the \"data_d2_create\" first to create a d2 structure with associated d1 arrays.\n    Note: After creating all your datums, use the \"data_set_design_value\" routine to\n          set the design (and model) values.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       datum_name: twiss.end[6]\n       data_type: beta.y\n       ele_ref_name:\n       ele_start_name:\n       ele_name: P1\n       merit_type: target\n       meas: 0\n       good_meas: T\n       ref: 0\n       good_ref: T\n       weight: 0.3\n       good_user: T\n       data_source: lat\n       eval_point: END\n       s_offset: 0\n       ix_bunch: 1\n       invalid_value: 0\n\n    \"\"\"\n    cmd = f\"pipe datum_create {datum_name}^^{data_type}^^{ele_ref_name}^^{ele_start_name}^^{ele_name}^^{merit_type}^^{meas}^^{good_meas}^^{ref}^^{good_ref}^^{weight}^^{good_user}^^{data_source}^^{eval_point}^^{s_offset}^^{ix_bunch}^^{invalid_value}^^{spin_axis_n0_1}^^{spin_axis_n0_2}^^{spin_axis_n0_3}^^{spin_axis_l_1}^^{spin_axis_l_2}^^{spin_axis_l_3}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"datum_create\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.datum_has_ele","title":"pytao.Tao.datum_has_ele","text":"<pre><code>datum_has_ele(datum_type, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output whether a datum type has an associated lattice element</p> <p>Parameters:</p> Name Type Description Default <code>datum_type</code> required <p>Returns:</p> Type Description <code>str or None</code> <p>\"no\", \"yes\", \"maybe\", \"provisional\"</p> Notes <p>Command syntax:   pipe datum_has_ele {datum_type}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    datum_type: twiss.end</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def datum_has_ele(self, datum_type, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output whether a datum type has an associated lattice element\n\n    Parameters\n    ----------\n    datum_type\n\n    Returns\n    -------\n    str or None\n        \"no\", \"yes\", \"maybe\", \"provisional\"\n\n    Notes\n    -----\n    Command syntax:\n      pipe datum_has_ele {datum_type}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       datum_type: twiss.end\n\n    \"\"\"\n    cmd = f\"pipe datum_has_ele {datum_type}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"datum_has_ele\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.derivative","title":"pytao.Tao.derivative","text":"<pre><code>derivative(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output optimization derivatives</p> <p>Returns:</p> Name Type Description <code>out</code> <code>dict</code> <p>Dictionary with keys corresponding to universe indexes (int), with dModel_dVar as the value:     np.ndarray with shape (n_data, n_var)</p> Notes <p>Command syntax:   pipe derivative</p> <p>Note: To save time, this command will not recalculate derivatives. Use the \"derivative\" command beforehand to recalcuate if needed.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def derivative(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization derivatives\n\n    Returns\n    -------\n    out : dict\n        Dictionary with keys corresponding to universe indexes (int),\n        with dModel_dVar as the value:\n            np.ndarray with shape (n_data, n_var)\n\n    Notes\n    -----\n    Command syntax:\n      pipe derivative\n\n    Note: To save time, this command will not recalculate derivatives.\n    Use the \"derivative\" command beforehand to recalcuate if needed.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n\n    \"\"\"\n    cmd = \"pipe derivative\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"derivative\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_ac_kicker","title":"pytao.Tao.ele_ac_kicker","text":"<pre><code>ele_ac_kicker(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element ac_kicker parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:ac_kicker {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:ac_kicker 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_ac_kicker(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element ac_kicker parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:ac_kicker {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:ac_kicker 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:ac_kicker {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_ac_kicker\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_cartesian_map","title":"pytao.Tao.ele_cartesian_map","text":"<pre><code>ele_cartesian_map(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element cartesian_map parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:cartesian_map {ele_id}|{which} {index} {who}</p> <p>Where:   {ele_id} is an element name or index   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%cartesian_map(:) array   {who} is one of: \"base\", or \"terms\"</p> <p>Example:   pipe ele:cartesian_map 3@1&gt;&gt;7|model 2 base This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_cartesian_map(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element cartesian_map parameters\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:cartesian_map {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%cartesian_map(:) array\n      {who} is one of: \"base\", or \"terms\"\n\n    Example:\n      pipe ele:cartesian_map 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: base\n\n    \"\"\"\n    cmd = f\"pipe ele:cartesian_map {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_cartesian_map\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_chamber_wall","title":"pytao.Tao.ele_chamber_wall","text":"<pre><code>ele_chamber_wall(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element beam chamber wall parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe ele:chamber_wall {ele_id}|{which} {index} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is index of the wall.   {who} is one of:     \"x\"       ! Return min/max in horizontal plane     \"y\"       ! Return min/max in vertical plane</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall3d  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: x</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_chamber_wall(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element beam chamber wall parameters\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:chamber_wall {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is index of the wall.\n      {who} is one of:\n        \"x\"       ! Return min/max in horizontal plane\n        \"y\"       ! Return min/max in vertical plane\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall3d\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: x\n\n    \"\"\"\n    cmd = f\"pipe ele:chamber_wall {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_chamber_wall\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_control_var","title":"pytao.Tao.ele_control_var","text":"<pre><code>ele_control_var(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of element control variables. Used for group, overlay and ramper type elements.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict of attributes and values</code> Notes <p>Command syntax:   pipe ele:control_var {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:control_var 3@1&gt;&gt;7|model This gives control info on element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;873   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_control_var(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output list of element control variables.\n    Used for group, overlay and ramper type elements.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    dict of attributes and values\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:control_var {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:control_var 3@1&gt;&gt;7|model\n    This gives control info on element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;873\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:control_var {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_control_var\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_cylindrical_map","title":"pytao.Tao.ele_cylindrical_map","text":"<pre><code>ele_cylindrical_map(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element cylindrical_map</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:cylindrical_map {ele_id}|{which} {index} {who}</p> <p>Where   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%cylindrical_map(:) array   {who} is one of: \"base\", or \"terms\"</p> <p>Example:   pipe ele:cylindrical_map 3@1&gt;&gt;7|model 2 base This gives map #2 of element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;5   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_cylindrical_map(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element cylindrical_map\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:cylindrical_map {ele_id}|{which} {index} {who}\n\n    Where\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%cylindrical_map(:) array\n      {who} is one of: \"base\", or \"terms\"\n\n    Example:\n      pipe ele:cylindrical_map 3@1&gt;&gt;7|model 2 base\n    This gives map #2 of element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;5\n      which: model\n      index: 1\n      who: base\n\n    \"\"\"\n    cmd = f\"pipe ele:cylindrical_map {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_cylindrical_map\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_elec_multipoles","title":"pytao.Tao.ele_elec_multipoles","text":"<pre><code>ele_elec_multipoles(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element electric multipoles</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe ele:elec_multipoles {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:elec_multipoles 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_elec_multipoles(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element electric multipoles\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:elec_multipoles {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:elec_multipoles 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:elec_multipoles {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_elec_multipoles\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_floor","title":"pytao.Tao.ele_floor","text":"<pre><code>ele_floor(ele_id, *, which='model', where='end', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element floor coordinates. The output gives four lines. \"Reference\" is without element misalignments and \"Actual\" is with misalignments. The lines with \"-W\" give the W matrix. The exception is that if ele is a multipass_lord, there will be 4*N lines where N is the number of slaves.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <code>where</code> <code>default=end</code> <code>'end'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:floor {ele_id}|{which} {where}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {where} is an optional argument which, if present, is one of     beginning  ! Upstream end     center     ! Middle of element. Surface of element for photonic reflecting elements (crystal, mirror).     end        ! Downstream end (default)</p> <p>Example:   pipe ele:floor 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model   where:</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model   where: center</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_floor(\n    self, ele_id, *, which=\"model\", where=\"end\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element floor coordinates. The output gives four lines. \"Reference\" is\n    without element misalignments and \"Actual\" is with misalignments. The lines with \"-W\"\n    give the W matrix. The exception is that if ele is a multipass_lord, there will be 4*N\n    lines where N is the number of slaves.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n    where : default=end\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:floor {ele_id}|{which} {where}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {where} is an optional argument which, if present, is one of\n        beginning  ! Upstream end\n        center     ! Middle of element. Surface of element for photonic reflecting elements (crystal, mirror).\n        end        ! Downstream end (default)\n\n    Example:\n      pipe ele:floor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      where:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      where: center\n\n    \"\"\"\n    cmd = f\"pipe ele:floor {ele_id}|{which} {where}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_floor\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_gen_attribs","title":"pytao.Tao.ele_gen_attribs","text":"<pre><code>ele_gen_attribs(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element general attributes</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:gen_attribs {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:gen_attribs 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_gen_attribs(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element general attributes\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:gen_attribs {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:gen_attribs 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:gen_attribs {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_gen_attribs\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_gen_grad_map","title":"pytao.Tao.ele_gen_grad_map","text":"<pre><code>ele_gen_grad_map(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element gen_grad_map</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict or list of dict</code> <p>\"derivs\" mode will be a list of dictionaries. Normal mode will be a single dictionary.</p> Notes <p>Command syntax:   pipe ele:gen_grad_map {ele_id}|{which} {index} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%gen_grad_map(:) array   {who} is one of: \"base\", or \"derivs\".</p> <p>Example:   pipe ele:gen_grad_map 3@1&gt;&gt;7|model 2 base This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field  args:   ele_id: 1@0&gt;&gt;9   which: model   index: 1   who: derivs</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_gen_grad_map(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element gen_grad_map\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    dict or list of dict\n        \"derivs\" mode will be a list of dictionaries.\n        Normal mode will be a single dictionary.\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:gen_grad_map {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%gen_grad_map(:) array\n      {who} is one of: \"base\", or \"derivs\".\n\n    Example:\n      pipe ele:gen_grad_map 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_em_field\n     args:\n      ele_id: 1@0&gt;&gt;9\n      which: model\n      index: 1\n      who: derivs\n\n    \"\"\"\n    cmd = f\"pipe ele:gen_grad_map {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_gen_grad_map\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_grid_field","title":"pytao.Tao.ele_grid_field","text":"<pre><code>ele_grid_field(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element grid_field</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict or list of dict</code> <p>\"points\" mode will be a list of dictionaries. Normal mode will be a single dictionary.</p> Notes <p>Command syntax:   pipe ele:grid_field {ele_id}|{which} {index} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%grid_field(:) array.   {who} is one of: \"base\", or \"points\"</p> <p>Example:   pipe ele:grid_field 3@1&gt;&gt;7|model 2 base This gives grid #2 of element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_grid  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_grid_field(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element grid_field\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    dict or list of dict\n        \"points\" mode will be a list of dictionaries.\n        Normal mode will be a single dictionary.\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:grid_field {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%grid_field(:) array.\n      {who} is one of: \"base\", or \"points\"\n\n    Example:\n      pipe ele:grid_field 3@1&gt;&gt;7|model 2 base\n    This gives grid #2 of element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_grid\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: base\n\n    \"\"\"\n    cmd = f\"pipe ele:grid_field {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_grid_field\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_head","title":"pytao.Tao.ele_head","text":"<pre><code>ele_head(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output \"head\" Element attributes</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:head {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:head 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_head(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output \"head\" Element attributes\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:head {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:head 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:head {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_head\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_lord_slave","title":"pytao.Tao.ele_lord_slave","text":"<pre><code>ele_lord_slave(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output the lord/slave tree of an element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe ele:lord_slave {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:lord_slave 3@1&gt;&gt;7|model This gives lord and slave info on element number 7 in branch 1 of universe 3. Note: The lord/slave info is independent of the setting of {which}.</p> <p>The output is a number of lines, each line giving information on an element (element index, etc.). Some lines begin with the word \"Element\". After each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\". These \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_lord_slave(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output the lord/slave tree of an element.\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:lord_slave {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:lord_slave 3@1&gt;&gt;7|model\n    This gives lord and slave info on element number 7 in branch 1 of universe 3.\n    Note: The lord/slave info is independent of the setting of {which}.\n\n    The output is a number of lines, each line giving information on an element (element index, etc.).\n    Some lines begin with the word \"Element\".\n    After each \"Element\" line, there are a number of lines (possibly zero) that begin with the word \"Slave or \"Lord\".\n    These \"Slave\" and \"Lord\" lines are the slaves and lords of the \"Element\" element.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:lord_slave {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_lord_slave\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_mat6","title":"pytao.Tao.ele_mat6","text":"<pre><code>ele_mat6(ele_id, *, which='model', who='mat6', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element mat6</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <code>who</code> <code>default=mat6</code> <code>'mat6'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:mat6 {ele_id}|{which} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {who} is one of: \"mat6\", \"vec0\", or \"err\"</p> <p>Example:   pipe ele:mat6 3@1&gt;&gt;7|model mat6 This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model   who: mat6</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_mat6(\n    self, ele_id, *, which=\"model\", who=\"mat6\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element mat6\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n    who : default=mat6\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:mat6 {ele_id}|{which} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} is one of: \"mat6\", \"vec0\", or \"err\"\n\n    Example:\n      pipe ele:mat6 3@1&gt;&gt;7|model mat6\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: mat6\n\n    \"\"\"\n    cmd = f\"pipe ele:mat6 {ele_id}|{which} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_mat6\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_methods","title":"pytao.Tao.ele_methods","text":"<pre><code>ele_methods(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element methods</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:methods {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:methods 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_methods(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element methods\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:methods {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:methods 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:methods {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_methods\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_multipoles","title":"pytao.Tao.ele_multipoles","text":"<pre><code>ele_multipoles(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element multipoles</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe ele:multipoles {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:multipoles 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_multipoles(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element multipoles\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:multipoles {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:multipoles 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:multipoles {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_multipoles\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_orbit","title":"pytao.Tao.ele_orbit","text":"<pre><code>ele_orbit(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element orbit</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:orbit {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:orbit 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_orbit(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element orbit\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:orbit {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:orbit 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:orbit {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_orbit\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_param","title":"pytao.Tao.ele_param","text":"<pre><code>ele_param(ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lattice element parameter</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:param {ele_id}|{which} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {who} values are the same as {who} values for \"pipe lat_list\".         Note: Here {who} must be a single parameter and not a list.</p> <p>Example:   pipe ele:param 3@1&gt;&gt;7|model e_tot This gives E_tot of element number 7 in branch 1 of universe 3.</p> <p>Note: On output the {variable} component will always be \"F\" (since this command cannot tell if a parameter is allowed to vary).</p> <p>Also see: \"pipe lat_list\".</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_photon  args:   ele_id: 1@0&gt;&gt;1   which: model   who: orbit.vec.1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_param(\n    self, ele_id, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output lattice element parameter\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:param {ele_id}|{which} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} values are the same as {who} values for \"pipe lat_list\".\n            Note: Here {who} must be a single parameter and not a list.\n\n    Example:\n      pipe ele:param 3@1&gt;&gt;7|model e_tot\n    This gives E_tot of element number 7 in branch 1 of universe 3.\n\n    Note: On output the {variable} component will always be \"F\" (since this\n    command cannot tell if a parameter is allowed to vary).\n\n    Also see: \"pipe lat_list\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_photon\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: orbit.vec.1\n\n    \"\"\"\n    cmd = f\"pipe ele:param {ele_id}|{which} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_param\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_photon","title":"pytao.Tao.ele_photon","text":"<pre><code>ele_photon(ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element photon parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:photon {ele_id}|{which} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {who} is one of: \"base\", \"material\", or \"curvature\"</p> <p>Example:   pipe ele:photon 3@1&gt;&gt;7|model base This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_photon  args:   ele_id: 1@0&gt;&gt;1   which: model   who: base</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_photon(\n    self, ele_id, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element photon parameters\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:photon {ele_id}|{which} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {who} is one of: \"base\", \"material\", or \"curvature\"\n\n    Example:\n      pipe ele:photon 3@1&gt;&gt;7|model base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_photon\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: base\n\n    \"\"\"\n    cmd = f\"pipe ele:photon {ele_id}|{which} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_photon\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_spin_taylor","title":"pytao.Tao.ele_spin_taylor","text":"<pre><code>ele_spin_taylor(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element spin_taylor parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe ele:spin_taylor {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:spin_taylor 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_spin  args:   ele_id: 1@0&gt;&gt;2   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_spin_taylor(\n    self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element spin_taylor parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:spin_taylor {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:spin_taylor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_spin\n     args:\n      ele_id: 1@0&gt;&gt;2\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:spin_taylor {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_spin_taylor\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_taylor","title":"pytao.Tao.ele_taylor","text":"<pre><code>ele_taylor(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element taylor map</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe ele:taylor {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:taylor 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_taylor  args:   ele_id: 1@0&gt;&gt;34   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_taylor(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element taylor map\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:taylor {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:taylor 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_taylor\n     args:\n      ele_id: 1@0&gt;&gt;34\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:taylor {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_taylor\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_twiss","title":"pytao.Tao.ele_twiss","text":"<pre><code>ele_twiss(ele_id, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element Twiss parameters</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:twiss {ele_id}|{which}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"</p> <p>Example:   pipe ele:twiss 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:   ele_id: 1@0&gt;&gt;1   which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_twiss(self, ele_id, *, which=\"model\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output element Twiss parameters\n\n    Parameters\n    ----------\n    ele_id\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:twiss {ele_id}|{which}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n    Example:\n      pipe ele:twiss 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n\n    \"\"\"\n    cmd = f\"pipe ele:twiss {ele_id}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_twiss\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_wake","title":"pytao.Tao.ele_wake","text":"<pre><code>ele_wake(ele_id, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element wake.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ele:wake {ele_id}|{which} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {Who} is one of:       \"sr_long\"        \"sr_long_table\"       \"sr_trans\"       \"sr_trans_table\"       \"lr_mode_table\"  \"base\"</p> <p>Example:   pipe ele:wake 3@1&gt;&gt;7|model This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wake  args:   ele_id: 1@0&gt;&gt;1   which: model   who: sr_long</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_wake(\n    self, ele_id, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element wake.\n\n    Parameters\n    ----------\n    ele_id\n    who\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:wake {ele_id}|{which} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {Who} is one of:\n          \"sr_long\"        \"sr_long_table\"\n          \"sr_trans\"       \"sr_trans_table\"\n          \"lr_mode_table\"  \"base\"\n\n    Example:\n      pipe ele:wake 3@1&gt;&gt;7|model\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wake\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      who: sr_long\n\n    \"\"\"\n    cmd = f\"pipe ele:wake {ele_id}|{which} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_wake\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ele_wall3d","title":"pytao.Tao.ele_wall3d","text":"<pre><code>ele_wall3d(ele_id, index, who, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output element wall3d parameters.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>index</code> required <code>who</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe ele:wall3d {ele_id}|{which} {index} {who}</p> <p>Where:   {ele_id} is an element name or index.   {which} is one of: \"model\", \"base\" or \"design\"   {index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\").   {who} is one of: \"base\", or \"table\". Example:   pipe ele:wall3d 3@1&gt;&gt;7|model 2 base This gives element number 7 in branch 1 of universe 3.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall3d  args:   ele_id: 1@0&gt;&gt;1   which: model   index: 1   who: table</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ele_wall3d(\n    self, ele_id, index, who, *, which=\"model\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output element wall3d parameters.\n\n    Parameters\n    ----------\n    ele_id\n    index\n    who\n    which : default=model\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe ele:wall3d {ele_id}|{which} {index} {who}\n\n    Where:\n      {ele_id} is an element name or index.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {index} is the index number in the ele%wall3d(:) array (size obtained from \"ele:head\").\n      {who} is one of: \"base\", or \"table\".\n    Example:\n      pipe ele:wall3d 3@1&gt;&gt;7|model 2 base\n    This gives element number 7 in branch 1 of universe 3.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_wall3d\n     args:\n      ele_id: 1@0&gt;&gt;1\n      which: model\n      index: 1\n      who: table\n\n    \"\"\"\n    cmd = f\"pipe ele:wall3d {ele_id}|{which} {index} {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ele_wall3d\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.em_field","title":"pytao.Tao.em_field","text":"<pre><code>em_field(ele_id, x, y, z, t_or_z, *, which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output EM field at a given point generated by a given element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> required <code>x</code> required <code>y</code> required <code>z</code> required <code>t_or_z</code> required <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe em_field {ele_id}|{which} {x} {y} {z} {t_or_z}</p> <p>Where:   {which} is one of: \"model\", \"base\" or \"design\"   {x}, {y}  -- Transverse coords.   {z}       -- Longitudinal coord with respect to entrance end of element.   {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ele_id: 1@0&gt;&gt;22    which: model    x: 0    y: 0    z: 0    t_or_z: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def em_field(\n    self,\n    ele_id,\n    x,\n    y,\n    z,\n    t_or_z,\n    *,\n    which=\"model\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output EM field at a given point generated by a given element.\n\n    Parameters\n    ----------\n    ele_id\n    x\n    y\n    z\n    t_or_z\n    which : default=model\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe em_field {ele_id}|{which} {x} {y} {z} {t_or_z}\n\n    Where:\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {x}, {y}  -- Transverse coords.\n      {z}       -- Longitudinal coord with respect to entrance end of element.\n      {t_or_z}  -- time or phase space z depending if lattice is setup for absolute time tracking.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ele_id: 1@0&gt;&gt;22\n       which: model\n       x: 0\n       y: 0\n       z: 0\n       t_or_z: 0\n\n    \"\"\"\n    cmd = f\"pipe em_field {ele_id}|{which} {x} {y} {z} {t_or_z}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"em_field\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.enum","title":"pytao.Tao.enum","text":"<pre><code>enum(enum_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of possible values for enumerated numbers.</p> <p>Parameters:</p> Name Type Description Default <code>enum_name</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe enum {enum_name}</p> <p>Example:   pipe enum tracking_method</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    enum_name: tracking_method</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def enum(self, enum_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of possible values for enumerated numbers.\n\n    Parameters\n    ----------\n    enum_name\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe enum {enum_name}\n\n    Example:\n      pipe enum tracking_method\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       enum_name: tracking_method\n\n    \"\"\"\n    cmd = f\"pipe enum {enum_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"enum\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.evaluate","title":"pytao.Tao.evaluate","text":"<pre><code>evaluate(expression, *, flags='-array_out', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output the value of an expression. The result may be a vector.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> required <code>flags</code> <code>default=-array_out</code> <p>If -array_out, the output will be available in the tao_c_interface_com%c_real.</p> <code>'-array_out'</code> <p>Returns:</p> Type Description <code>string_list</code> <p>if '-array_out' not in flags</p> <code>real_array</code> <p>if '-array_out' in flags</p> Notes <p>Command syntax:   pipe evaluate {flags} {expression}</p> <p>Where:   Optional {flags} are:       -array_out : If present, the output will be available in the tao_c_interface_com%c_real.   {expression} is expression to be evaluated.</p> <p>Example:   pipe evaluate 3+data::cbar.11[1:10]|model</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    expression: data::cbar.11[1:10]|model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def evaluate(\n    self, expression, *, flags=\"-array_out\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output the value of an expression. The result may be a vector.\n\n    Parameters\n    ----------\n    expression\n    flags : default=-array_out\n        If -array_out, the output will be available in the tao_c_interface_com%c_real.\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      pipe evaluate {flags} {expression}\n\n    Where:\n      Optional {flags} are:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {expression} is expression to be evaluated.\n\n    Example:\n      pipe evaluate 3+data::cbar.11[1:10]|model\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       expression: data::cbar.11[1:10]|model\n\n    \"\"\"\n    cmd = f\"pipe evaluate {flags} {expression}\"\n    if verbose:\n        print(cmd)\n    if \"-array_out\" not in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"evaluate\", cmd_type=\"string_list\"\n        )\n    if \"-array_out\" in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"evaluate\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.floor_orbit","title":"pytao.Tao.floor_orbit","text":"<pre><code>floor_orbit(graph, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output (x, y) coordinates for drawing the particle orbit on a floor plan.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe floor_orbit {graph}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_floor_orbit  args:    graph: r33.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def floor_orbit(self, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x, y) coordinates for drawing the particle orbit on a floor plan.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe floor_orbit {graph}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_floor_orbit\n     args:\n       graph: r33.g\n\n    \"\"\"\n    cmd = f\"pipe floor_orbit {graph}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"floor_orbit\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.floor_plan","title":"pytao.Tao.floor_plan","text":"<pre><code>floor_plan(graph, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output (x,y) points and other information that can be used for drawing a floor_plan.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe floor_plan {graph}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    graph: r13.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def floor_plan(self, graph, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output (x,y) points and other information that can be used for drawing a floor_plan.\n\n    Parameters\n    ----------\n    graph\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe floor_plan {graph}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       graph: r13.g\n\n    \"\"\"\n    cmd = f\"pipe floor_plan {graph}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"floor_plan\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.global_opti_de","title":"pytao.Tao.global_opti_de","text":"<pre><code>global_opti_de(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output DE optimization parameters.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe global:opti_de</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def global_opti_de(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output DE optimization parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe global:opti_de\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe global:opti_de\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"global_opti_de\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.global_optimization","title":"pytao.Tao.global_optimization","text":"<pre><code>global_optimization(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output optimization parameters. Also see global:opti_de.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe global:optimization</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def global_optimization(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output optimization parameters.\n    Also see global:opti_de.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe global:optimization\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe global:optimization\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"global_optimization\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.help","title":"pytao.Tao.help","text":"<pre><code>help(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of \"help xxx\" topics</p> <p>Returns:</p> Type Description <code>str</code> Notes <p>Command syntax:   pipe help</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def help(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of \"help xxx\" topics\n\n    Returns\n    -------\n    str\n\n    Notes\n    -----\n    Command syntax:\n      pipe help\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe help\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"help\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.init","title":"pytao.Tao.init","text":"<pre><code>init(cmd='', *, plot='tao', beam_file=None, beam_init_position_file=None, building_wall_file=None, command='', data_file=None, debug=False, disable_smooth_line_calc=False, external_plotting=False, geometry='', hook_init_file=None, init_file=None, lattice_file=None, log_startup=False, no_stopping=False, noinit=False, noplot=False, nostartup=False, no_rad_int=False, plot_file=None, prompt_color='', reverse=False, rf_on=False, quiet=False, slice_lattice='', start_branch_at='', startup_file=None, symbol_import=False, var_file=None)\n</code></pre> <p>(Re-)Initialize Tao with the given command.</p> <p>Parameters:</p> Name Type Description Default <code>init</code> <code>str</code> <p>Initialization string for Tao.  Same as the tao command-line, including \"-init\" and such.  Shell variables in <code>init</code> strings will be expanded by Tao.  For example, an <code>init</code> string containing <code>$HOME</code> would be replaced by your home directory.</p> required <code>so_lib</code> <code>str</code> <p>Path to the Tao shared library.  Auto-detected if not specified.</p> required <code>plot</code> <code>(str, bool)</code> <p>Use pytao's plotting mechanism with matplotlib or bokeh, if available. If <code>True</code>, pytao will pick an appropriate plotting backend. If <code>False</code> or \"tao\", Tao plotting will be used. (Default) If \"mpl\", the pytao matplotlib plotting backend will be selected. If \"bokeh\", the pytao Bokeh plotting backend will be selected.</p> <code>'tao'</code> <code>beam_file</code> <code>str or Path</code> <p>File containing the tao_beam_init namelist.</p> <code>None</code> <code>beam_init_position_file</code> <code>Path or str</code> <p>File containing initial particle positions.</p> <code>None</code> <code>building_wall_file</code> <code>str or Path</code> <p>Define the building tunnel wall</p> <code>None</code> <code>command</code> <code>str</code> <p>Commands to run after startup file commands</p> <code>''</code> <code>data_file</code> <code>str or Path</code> <p>Define data for plotting and optimization</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Debug mode for Wizards</p> <code>False</code> <code>disable_smooth_line_calc</code> <code>bool</code> <p>Disable the smooth line calc used in plotting</p> <code>False</code> <code>external_plotting</code> <code>bool</code> <p>Tells Tao that plotting is done externally to Tao.</p> <code>False</code> <code>geometry</code> <code>\"wxh\" or (width, height) tuple</code> <p>Plot window geometry (pixels)</p> <code>''</code> <code>hook_init_file</code> <code> pathlib.Path or str</code> <p>Init file for hook routines (Default = tao_hook.init)</p> <code>None</code> <code>init_file</code> <code>str or Path</code> <p>Tao init file</p> <code>None</code> <code>lattice_file</code> <code>str or Path</code> <p>Bmad lattice file</p> <code>None</code> <code>log_startup</code> <code>bool</code> <p>Write startup debugging info</p> <code>False</code> <code>no_stopping</code> <code>bool</code> <p>For debugging : Prevents Tao from exiting on errors</p> <code>False</code> <code>noinit</code> <code>bool</code> <p>Do not use Tao init file.</p> <code>False</code> <code>noplot</code> <code>bool</code> <p>Do not open a plotting window</p> <code>False</code> <code>nostartup</code> <code>bool</code> <p>Do not open a startup command file</p> <code>False</code> <code>no_rad_int</code> <code>bool</code> <p>Do not do any radiation integrals calculations.</p> <code>False</code> <code>plot_file</code> <code>str or Path</code> <p>Plotting initialization file</p> <code>None</code> <code>prompt_color</code> <code>str</code> <p>Set color of prompt string. Default is blue.</p> <code>''</code> <code>reverse</code> <code>bool</code> <p>Reverse lattice element order?</p> <code>False</code> <code>rf_on</code> <code>bool</code> <p>Use \"--rf_on\" to turn off RF (default is now RF on)</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output when running a command file?</p> <code>False</code> <code>slice_lattice</code> <code>str</code> <p>Discards elements from lattice that are not in the list</p> <code>''</code> <code>start_branch_at</code> <code>str</code> <p>Start lattice branch at element.</p> <code>''</code> <code>startup_file</code> <code>str or Path</code> <p>Commands to run after parsing Tao init file</p> <code>None</code> <code>symbol_import</code> <code>bool</code> <p>Import symbols defined in lattice files(s)?</p> <code>False</code> <code>var_file</code> <code>str or Path</code> <p>Define variables for plotting and optimization</p> <code>None</code> <p>Returns:</p> Type Description <code>list of str</code> <p>Tao's initialization output.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>@override\ndef init(\n    self,\n    cmd: str = \"\",\n    *,\n    plot: Union[str, bool] = \"tao\",\n    beam_file: Optional[AnyPath] = None,\n    beam_init_position_file: Optional[AnyPath] = None,\n    building_wall_file: Optional[AnyPath] = None,\n    command: str = \"\",\n    data_file: Optional[AnyPath] = None,\n    debug: bool = False,\n    disable_smooth_line_calc: bool = False,\n    external_plotting: bool = False,\n    geometry: Union[str, Tuple[int, int]] = \"\",\n    hook_init_file: Optional[AnyPath] = None,\n    init_file: Optional[AnyPath] = None,\n    lattice_file: Optional[AnyPath] = None,\n    log_startup: bool = False,\n    no_stopping: bool = False,\n    noinit: bool = False,\n    noplot: bool = False,\n    nostartup: bool = False,\n    no_rad_int: bool = False,\n    plot_file: Optional[AnyPath] = None,\n    prompt_color: str = \"\",\n    reverse: bool = False,\n    rf_on: bool = False,\n    quiet: bool = False,\n    slice_lattice: str = \"\",\n    start_branch_at: str = \"\",\n    startup_file: Optional[AnyPath] = None,\n    symbol_import: bool = False,\n    var_file: Optional[AnyPath] = None,\n) -&gt; List[str]:\n    \"\"\"\n    (Re-)Initialize Tao with the given command.\n\n    Parameters\n    ----------\n    init : str, optional\n        Initialization string for Tao.  Same as the tao command-line, including\n        \"-init\" and such.  Shell variables in `init` strings will be expanded\n        by Tao.  For example, an `init` string containing `$HOME` would be\n        replaced by your home directory.\n    so_lib : str, optional\n        Path to the Tao shared library.  Auto-detected if not specified.\n    plot : str, bool, optional\n        Use pytao's plotting mechanism with matplotlib or bokeh, if available.\n        If `True`, pytao will pick an appropriate plotting backend.\n        If `False` or \"tao\", Tao plotting will be used. (Default)\n        If \"mpl\", the pytao matplotlib plotting backend will be selected.\n        If \"bokeh\", the pytao Bokeh plotting backend will be selected.\n\n    beam_file : str or pathlib.Path, default=None\n        File containing the tao_beam_init namelist.\n    beam_init_position_file : pathlib.Path or str, default=None\n        File containing initial particle positions.\n    building_wall_file : str or pathlib.Path, default=None\n        Define the building tunnel wall\n    command : str, optional\n        Commands to run after startup file commands\n    data_file : str or pathlib.Path, default=None\n        Define data for plotting and optimization\n    debug : bool, default=False\n        Debug mode for Wizards\n    disable_smooth_line_calc : bool, default=False\n        Disable the smooth line calc used in plotting\n    external_plotting : bool, default=False\n        Tells Tao that plotting is done externally to Tao.\n    geometry : \"wxh\" or (width, height) tuple, optional\n        Plot window geometry (pixels)\n    hook_init_file :  pathlib.Path or str, default=None\n        Init file for hook routines (Default = tao_hook.init)\n    init_file : str or pathlib.Path, default=None\n        Tao init file\n    lattice_file : str or pathlib.Path, default=None\n        Bmad lattice file\n    log_startup : bool, default=False\n        Write startup debugging info\n    no_stopping : bool, default=False\n        For debugging : Prevents Tao from exiting on errors\n    noinit : bool, default=False\n        Do not use Tao init file.\n    noplot : bool, default=False\n        Do not open a plotting window\n    nostartup : bool, default=False\n        Do not open a startup command file\n    no_rad_int : bool, default=False\n        Do not do any radiation integrals calculations.\n    plot_file : str or pathlib.Path, default=None\n        Plotting initialization file\n    prompt_color : str, optional\n        Set color of prompt string. Default is blue.\n    reverse : bool, default=False\n        Reverse lattice element order?\n    rf_on : bool, default=False\n        Use \"--rf_on\" to turn off RF (default is now RF on)\n    quiet : bool, default=False\n        Suppress terminal output when running a command file?\n    slice_lattice : str, optional\n        Discards elements from lattice that are not in the list\n    start_branch_at : str, optional\n        Start lattice branch at element.\n    startup_file : str or pathlib.Path, default=None\n        Commands to run after parsing Tao init file\n    symbol_import : bool, default=False\n        Import symbols defined in lattice files(s)?\n    var_file : str or pathlib.Path, default=None\n        Define variables for plotting and optimization\n\n    Returns\n    -------\n    list of str\n        Tao's initialization output.\n    \"\"\"\n    if plot in {\"mpl\", \"bokeh\"}:\n        self.plot_backend_name = plot\n    else:\n        self.plot_backend_name = None\n\n    use_pytao_plotting = plot in {\"mpl\", \"bokeh\", True}\n\n    self.init_settings = TaoStartup(\n        init=cmd,\n        plot=plot,\n        beam_file=beam_file,\n        beam_init_position_file=beam_init_position_file,\n        building_wall_file=building_wall_file,\n        command=command,\n        data_file=data_file,\n        debug=debug,\n        disable_smooth_line_calc=disable_smooth_line_calc,\n        external_plotting=use_pytao_plotting or external_plotting,\n        geometry=geometry,\n        hook_init_file=hook_init_file,\n        init_file=init_file,\n        lattice_file=lattice_file,\n        log_startup=log_startup,\n        no_stopping=no_stopping,\n        noinit=noinit,\n        noplot=use_pytao_plotting or noplot,\n        nostartup=nostartup,\n        no_rad_int=no_rad_int,\n        plot_file=plot_file,\n        prompt_color=prompt_color,\n        reverse=reverse,\n        rf_on=rf_on,\n        quiet=quiet,\n        slice_lattice=slice_lattice,\n        start_branch_at=start_branch_at,\n        startup_file=startup_file,\n        symbol_import=symbol_import,\n        var_file=var_file,\n    )\n\n    if not self.init_settings.can_initialize:\n        raise TaoInitializationError(\n            f\"Tao will not be able to initialize with the following settings:\"\n            f\"\\n\"\n            f\"\\ninit={self.init_settings.tao_init!r}\"\n            f\"\\n\"\n            f\"\\nIn order to initialize a Tao object, you must specify at least one of these:\"\n            f\"\\n * `init_file` with a valid filename\"\n            f\"\\n * `lattice_file` with a valid filename\"\n            f\"\\n\"\n            f\"\\nFor example:\"\n            f\"\\n&gt;&gt;&gt; Tao(init_file='$ACC_ROOT_DIR/bmad-doc/tao_examples/erl/tao.init')\"\n            f\"\\n\"\n            f\"\\nAlternatively, you may pass the full command-line arguments:\"\n            f\"\\n&gt;&gt;&gt; Tao('-lat $ACC_ROOT_DIR/bmad-doc/tao_examples/erl/bmad.lat')\"\n        )\n\n    self._init_output = self._init(self.init_settings)\n    if not self._tao_version_checked:\n        self._tao_version_checked = True\n        self._check_tao_version()\n    return self._init_output\n</code></pre>"},{"location":"api/tao/#pytao.Tao.inum","title":"pytao.Tao.inum","text":"<pre><code>inum(who, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of possible values for an INUM parameter. For example, possible index numbers for the branches of a lattice.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <p>Returns:</p> Type Description <code>list of int</code> Notes <p>Command syntax:   pipe inum {who}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: ix_universe</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def inum(self, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of possible values for an INUM parameter.\n    For example, possible index numbers for the branches of a lattice.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    list of int\n\n    Notes\n    -----\n    Command syntax:\n      pipe inum {who}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: ix_universe\n\n    \"\"\"\n    cmd = f\"pipe inum {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"inum\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.lat_branch_list","title":"pytao.Tao.lat_branch_list","text":"<pre><code>lat_branch_list(*, ix_uni='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lattice branch list</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe lat_branch_list {ix_uni}</p> <p>Output syntax:   branch_index;branch_name;n_ele_track;n_ele_max</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_branch_list(self, *, ix_uni=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice branch list\n\n    Parameters\n    ----------\n    ix_uni : optional\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe lat_branch_list {ix_uni}\n\n    Output syntax:\n      branch_index;branch_name;n_ele_track;n_ele_max\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n\n    \"\"\"\n    cmd = f\"pipe lat_branch_list {ix_uni}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"lat_branch_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.lat_calc_done","title":"pytao.Tao.lat_calc_done","text":"<pre><code>lat_calc_done(branch_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output if a lattice recalculation has been proformed since the last   time \"pipe lat_calc_done\" was called.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> required <p>Returns:</p> Type Description <code>bool</code> Notes <p>Command syntax:   pipe lat_calc_done</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    branch_name: 1@0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_calc_done(self, branch_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output if a lattice recalculation has been proformed since the last\n      time \"pipe lat_calc_done\" was called.\n\n    Parameters\n    ----------\n    branch_name\n\n    Returns\n    -------\n    bool\n\n    Notes\n    -----\n    Command syntax:\n      pipe lat_calc_done\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       branch_name: 1@0\n\n    \"\"\"\n    cmd = \"pipe lat_calc_done\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"lat_calc_done\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.lat_ele_list","title":"pytao.Tao.lat_ele_list","text":"<pre><code>lat_ele_list(*, branch_name='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lattice element list.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>list of str of element names</code> Notes <p>Command syntax:   pipe lat_ele_list {branch_name}</p> <p>{branch_name} should have the form:   {ix_uni}@{ix_branch}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    branch_name: 1@0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_ele_list(self, *, branch_name=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lattice element list.\n\n    Parameters\n    ----------\n    branch_name : optional\n\n    Returns\n    -------\n    list of str of element names\n\n    Notes\n    -----\n    Command syntax:\n      pipe lat_ele_list {branch_name}\n\n    {branch_name} should have the form:\n      {ix_uni}@{ix_branch}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       branch_name: 1@0\n\n    \"\"\"\n    cmd = f\"pipe lat_ele_list {branch_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"lat_ele_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.lat_list","title":"pytao.Tao.lat_list","text":"<pre><code>lat_list(elements, who, *, ix_uni='', ix_branch='', which='model', flags='-array_out -track_only', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of parameters at ends of lattice elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> required <code>who</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <code>flags</code> <code>optional</code> <code>-array_out -track_only</code> <p>Returns:</p> Type Description <code>string_list</code> <p>if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key'])</p> <code>integer_array</code> <p>if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']</p> <code>real_array</code> <p>if ('-array_out' in flags) or ('real:' in who)</p> Notes <p>Command syntax:   pipe lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}</p> <p>Where:  Optional {flags} are:   -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.   -track_only : If present, lord elements will not be matched to.   -index_order : If present, order elements by element index instead of the standard s-position.   -array_out : If present, the output will be available in the tao_c_interface_com%c_real or     tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.     Note: Only a single {who} item permitted when -array_out is present.</p> <p>{which} is one of: \"model\", \"base\" or \"design\"</p> <p>{who} is a comma deliminated list of:     orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.     orbit.spin.1, orbit.spin.2, orbit.spin.3,     orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,     orbit.t, orbit.beta,     orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.     orbit.energy, orbit.pc,     ele.name, ele.key, ele.ix_ele, ele.ix_branch     ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,     ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,     ele.x.eta, ele.x.etap,     ele.y.eta, ele.y.etap,     ele.ref_time, ele.ref_time_start     ele.s, ele.l     ele.e_tot, ele.p0c     ele.mat6      ! Output: mat6(1,:), mat6(2,:), ... mat6(6,:)     ele.vec0      ! Output: vec0(1), ... vec0(6)     ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)     ele.c_mat     ! Output: c_mat11, c_mat12, c_mat21, c_mat22.     ele.gamma_c   ! Parameter associated with coupling c-matrix.</p> <p>{elements} is a string to match element names to.     Use \"*\" to match to all elements.</p> <p>Examples:   pipe lat_list -track 3@0&gt;&gt;Q|base ele.s,orbit.vec.2   pipe lat_list 3@0&gt;&gt;Q|base real:ele.s</p> <p>Also see: \"pipe ele:param\"</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0    elements: Q*    which: model    who: orbit.floor.x</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0    elements: Q*    which: design    who: ele.ix_ele</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_list(\n    self,\n    elements,\n    who,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    which=\"model\",\n    flags=\"-array_out -track_only\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output list of parameters at ends of lattice elements\n\n    Parameters\n    ----------\n    elements\n    who\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    flags : optional, default=-array_out -track_only\n\n    Returns\n    -------\n    string_list\n        if ('-array_out' not in flags) or (who in ['ele.name', 'ele.key'])\n    integer_array\n        if '-array_out' in flags and who in ['orbit.state', 'ele.ix_ele']\n    real_array\n        if ('-array_out' in flags) or ('real:' in who)\n\n    Notes\n    -----\n    Command syntax:\n      pipe lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}\n\n    Where:\n     Optional {flags} are:\n      -no_slaves : If present, multipass_slave and super_slave elements will not be matched to.\n      -track_only : If present, lord elements will not be matched to.\n      -index_order : If present, order elements by element index instead of the standard s-position.\n      -array_out : If present, the output will be available in the tao_c_interface_com%c_real or\n        tao_c_interface_com%c_integer arrays. See the code below for when %c_real vs %c_integer is used.\n        Note: Only a single {who} item permitted when -array_out is present.\n\n      {which} is one of: \"model\", \"base\" or \"design\"\n\n      {who} is a comma deliminated list of:\n        orbit.floor.x, orbit.floor.y, orbit.floor.z    ! Floor coords at particle orbit.\n        orbit.spin.1, orbit.spin.2, orbit.spin.3,\n        orbit.vec.1, orbit.vec.2, orbit.vec.3, orbit.vec.4, orbit.vec.5, orbit.vec.6,\n        orbit.t, orbit.beta,\n        orbit.state,     ! Note: state is an integer. alive$ = 1, anything else is lost.\n        orbit.energy, orbit.pc,\n        ele.name, ele.key, ele.ix_ele, ele.ix_branch\n        ele.a.beta, ele.a.alpha, ele.a.eta, ele.a.etap, ele.a.gamma, ele.a.phi,\n        ele.b.beta, ele.b.alpha, ele.b.eta, ele.b.etap, ele.b.gamma, ele.b.phi,\n        ele.x.eta, ele.x.etap,\n        ele.y.eta, ele.y.etap,\n        ele.ref_time, ele.ref_time_start\n        ele.s, ele.l\n        ele.e_tot, ele.p0c\n        ele.mat6      ! Output: mat6(1,:), mat6(2,:), ... mat6(6,:)\n        ele.vec0      ! Output: vec0(1), ... vec0(6)\n        ele.{attribute} Where {attribute} is a Bmad syntax element attribute. (EG: ele.beta_a, ele.k1, etc.)\n        ele.c_mat     ! Output: c_mat11, c_mat12, c_mat21, c_mat22.\n        ele.gamma_c   ! Parameter associated with coupling c-matrix.\n\n      {elements} is a string to match element names to.\n        Use \"*\" to match to all elements.\n\n    Examples:\n      pipe lat_list -track 3@0&gt;&gt;Q*|base ele.s,orbit.vec.2\n      pipe lat_list 3@0&gt;&gt;Q*|base real:ele.s\n\n    Also see: \"pipe ele:param\"\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n       elements: Q*\n       which: model\n       who: orbit.floor.x\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n       elements: Q*\n       which: design\n       who: ele.ix_ele\n\n    \"\"\"\n    cmd = f\"pipe lat_list {flags} {ix_uni}@{ix_branch}&gt;&gt;{elements}|{which} {who}\"\n    if verbose:\n        print(cmd)\n    if (\"-array_out\" not in flags) or (who in [\"ele.name\", \"ele.key\"]):\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"lat_list\", cmd_type=\"string_list\"\n        )\n    if \"-array_out\" in flags and who in [\"orbit.state\", \"ele.ix_ele\"]:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"lat_list\", cmd_type=\"integer_array\"\n        )\n    if (\"-array_out\" in flags) or (\"real:\" in who):\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"lat_list\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.lat_param_units","title":"pytao.Tao.lat_param_units","text":"<pre><code>lat_param_units(param_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output units of a parameter associated with a lattice or lattice element.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> required <p>Returns:</p> Type Description <code>str</code> Notes <p>Command syntax:   pipe lat_param_units {param_name}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    param_name: L</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def lat_param_units(self, param_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output units of a parameter associated with a lattice or lattice element.\n\n    Parameters\n    ----------\n    param_name\n\n    Returns\n    -------\n    str\n\n    Notes\n    -----\n    Command syntax:\n      pipe lat_param_units {param_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       param_name: L\n\n    \"\"\"\n    cmd = f\"pipe lat_param_units {param_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"lat_param_units\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.matrix","title":"pytao.Tao.matrix","text":"<pre><code>matrix(ele1_id, ele2_id, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output matrix value from the exit end of one element to the exit end of the other.</p> <p>Parameters:</p> Name Type Description Default <code>ele1_id</code> required <code>ele2_id</code> required <p>Returns:</p> Type Description <code>dict with keys:</code> <p>'mat6' : np.array of shape (6,6) 'vec6' : np.array of shape(6)</p> Notes <p>Command syntax:   pipe matrix {ele1_id} {ele2_id}</p> <p>Where:   {ele1_id} is the start element.   {ele2_id} is the end element. If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed. Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.</p> <p>Example:   pipe matrix 2@1&gt;&gt;q01w|design q02w</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ele1_id: 1@0&gt;&gt;q01w|design    ele2_id: q02w</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def matrix(self, ele1_id, ele2_id, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output matrix value from the exit end of one element to the exit end of the other.\n\n    Parameters\n    ----------\n    ele1_id\n    ele2_id\n\n    Returns\n    -------\n    dict with keys:\n        'mat6' : np.array of shape (6,6)\n        'vec6' : np.array of shape(6)\n\n    Notes\n    -----\n    Command syntax:\n      pipe matrix {ele1_id} {ele2_id}\n\n    Where:\n      {ele1_id} is the start element.\n      {ele2_id} is the end element.\n    If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\n    Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n\n    Example:\n      pipe matrix 2@1&gt;&gt;q01w|design q02w\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ele1_id: 1@0&gt;&gt;q01w|design\n       ele2_id: q02w\n\n    \"\"\"\n    cmd = f\"pipe matrix {ele1_id} {ele2_id}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"matrix\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.merit","title":"pytao.Tao.merit","text":"<pre><code>merit(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output merit value.</p> <p>Returns:</p> Name Type Description <code>merit</code> <code>float</code> <p>Value of the merit function</p> Notes <p>Command syntax:   pipe merit</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def merit(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output merit value.\n\n    Returns\n    -------\n    merit: float\n        Value of the merit function\n\n    Notes\n    -----\n    Command syntax:\n      pipe merit\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe merit\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"merit\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.orbit_at_s","title":"pytao.Tao.orbit_at_s","text":"<pre><code>orbit_at_s(*, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output twiss at given s position.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ele</code> <code>optional</code> <code>''</code> <code>s_offset</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ele} is an element name or index. Default at the Beginning element at start of branch 0.   {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.      If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will   {which} is one of: \"model\", \"base\" or \"design\".</p> <p>Example:   pipe orbit_at_s Q10-&gt;0.4|model   ! Orbit at 0.4 meters from Q10 element exit end in model lattice.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ele: 10    s_offset: 0.7    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def orbit_at_s(\n    self,\n    *,\n    ix_uni=\"\",\n    ele=\"\",\n    s_offset=\"\",\n    which=\"model\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output twiss at given s position.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ele : optional\n    s_offset : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n      {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n         If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will\n      {which} is one of: \"model\", \"base\" or \"design\".\n\n    Example:\n      pipe orbit_at_s Q10-&gt;0.4|model   ! Orbit at 0.4 meters from Q10 element exit end in model lattice.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ele: 10\n       s_offset: 0.7\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe orbit_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"orbit_at_s\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.place_buffer","title":"pytao.Tao.place_buffer","text":"<pre><code>place_buffer(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output the place command buffer and reset the buffer. The contents of the buffer are the place commands that the user has issued. See the Tao manual for more details.</p> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe place_buffer</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def place_buffer(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the place command buffer and reset the buffer.\n    The contents of the buffer are the place commands that the user has issued.\n    See the Tao manual for more details.\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe place_buffer\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe place_buffer\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"place_buffer\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot","title":"pytao.Tao.plot","text":"<pre><code>plot(template=None, *, region_name=None, include_layout=True, width=None, height=None, layout_height=None, share_x=None, backend=None, grid=None, **kwargs)\n</code></pre> <p>Make a plot with the provided backend.</p> <p>Plot a graph, or all placed graphs.</p> <p>To plot a specific graph, specify <code>template</code> (optionally <code>region_name</code>). The default is to plot all placed graphs.</p> <p>For full details on available parameters, see the specific backend's graph manager. For example:</p> <p>In [1]: tao.bokeh.plot? In [2]: tao.matplotlib.plot?</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str or list[str]</code> <p>Graph template name or names.</p> <code>None</code> <code>region_name</code> <code>str</code> <p>Graph region name.  Chosen automatically if not specified.</p> <code>None</code> <code>include_layout</code> <code>bool</code> <p>Include a layout plot at the bottom, if not already placed and if appropriate (i.e., another plot uses longitudinal coordinates on the x-axis).</p> <code>True</code> <code>width</code> <code>int</code> <p>Width of each plot.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of each plot.</p> <code>None</code> <code>layout_height</code> <code>int</code> <p>Height of the layout plot.</p> <code>None</code> <code>share_x</code> <code>bool or None</code> <p>Share x-axes where sensible (<code>None</code>) or force sharing x-axes (True) for all plots.</p> <code>None</code> <code>save</code> <code>Path or str</code> <p>Save the plot to the given filename.</p> required <code>xlim</code> <code>(float, float)</code> <p>X axis limits.</p> required <code>ylim</code> <code>(float, float)</code> <p>Y axis limits.</p> required <code>grid</code> <code>(nrows, ncols)</code> <p>If multiple graph names are specified, the plots will be placed in a grid according to this parameter.  The default is to have stacked plots if this parameter is unspecified.</p> <code>None</code> <code>backend</code> <code>('bokeh', 'mpl')</code> <p>The backend to use.  Auto-detects Jupyter and availability of bokeh to select a backend.</p> <code>\"bokeh\"</code> <p>Returns:</p> Type Description <code>None</code> <p>To gain access to the resulting plot objects, use the backend's <code>plot</code> method directly.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot(\n    self,\n    template: Optional[Union[str, List[str]]] = None,\n    *,\n    region_name: Optional[str] = None,\n    include_layout: bool = True,\n    width: Optional[int] = None,\n    height: Optional[int] = None,\n    layout_height: Optional[int] = None,\n    share_x: Optional[bool] = None,\n    backend: Optional[str] = None,\n    grid: Optional[Tuple[int, int]] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Make a plot with the provided backend.\n\n    Plot a graph, or all placed graphs.\n\n    To plot a specific graph, specify `template` (optionally `region_name`).\n    The default is to plot all placed graphs.\n\n    For full details on available parameters, see the specific backend's\n    graph manager. For example:\n\n    In [1]: tao.bokeh.plot?\n    In [2]: tao.matplotlib.plot?\n\n    Parameters\n    ----------\n    template : str or list[str]\n        Graph template name or names.\n    region_name : str, optional\n        Graph region name.  Chosen automatically if not specified.\n    include_layout : bool, optional\n        Include a layout plot at the bottom, if not already placed and if\n        appropriate (i.e., another plot uses longitudinal coordinates on\n        the x-axis).\n    width : int, optional\n        Width of each plot.\n    height : int, optional\n        Height of each plot.\n    layout_height : int, optional\n        Height of the layout plot.\n    share_x : bool or None, default=None\n        Share x-axes where sensible (`None`) or force sharing x-axes (True)\n        for all plots.\n    save : pathlib.Path or str, optional\n        Save the plot to the given filename.\n    xlim : (float, float), optional\n        X axis limits.\n    ylim : (float, float), optional\n        Y axis limits.\n    grid : (nrows, ncols), optional\n        If multiple graph names are specified, the plots will be placed\n        in a grid according to this parameter.  The default is to have\n        stacked plots if this parameter is unspecified.\n    backend : {\"bokeh\", \"mpl\"}, optional\n        The backend to use.  Auto-detects Jupyter and availability of bokeh\n        to select a backend.\n\n    Returns\n    -------\n    None\n        To gain access to the resulting plot objects, use the backend's\n        `plot` method directly.\n    \"\"\"\n    manager = self._get_user_specified_backend(backend)\n\n    if width is not None:\n        kwargs[\"width\"] = width\n    if height is not None:\n        kwargs[\"height\"] = height\n    if layout_height is not None:\n        kwargs[\"layout_height\"] = layout_height\n    if share_x is not None:\n        kwargs[\"share_x\"] = share_x\n\n    if not template:\n        self.last_plot = manager.plot_all(\n            include_layout=include_layout,\n            **kwargs,\n        )\n    elif not isinstance(template, str):\n        templates = list(template)\n        grid = grid or (len(templates), 1)\n        self.last_plot = manager.plot_grid(\n            templates=templates,\n            grid=grid,\n            include_layout=include_layout,\n            **kwargs,\n        )\n    else:\n        self.last_plot = manager.plot(\n            region_name=region_name,\n            template=template,\n            include_layout=include_layout,\n            **kwargs,\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot1","title":"pytao.Tao.plot1","text":"<pre><code>plot1(name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output info on a given plot.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe plot1 {name}</p> <p>{name} should be the region name if the plot is associated with a region. Output syntax is parameter list form. See documentation at the beginning of this file.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    name: beta</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot1(self, name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output info on a given plot.\n\n    Parameters\n    ----------\n    name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot1 {name}\n\n    {name} should be the region name if the plot is associated with a region.\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       name: beta\n\n    \"\"\"\n    cmd = f\"pipe plot1 {name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot1\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_curve","title":"pytao.Tao.plot_curve","text":"<pre><code>plot_curve(curve_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output curve information for a plot.</p> <p>Parameters:</p> Name Type Description Default <code>curve_name</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe plot_curve {curve_name}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    curve_name: r13.g.a</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_curve(self, curve_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output curve information for a plot.\n\n    Parameters\n    ----------\n    curve_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_curve {curve_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       curve_name: r13.g.a\n\n    \"\"\"\n    cmd = f\"pipe plot_curve {curve_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_curve\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_curve_manage","title":"pytao.Tao.plot_curve_manage","text":"<pre><code>plot_curve_manage(graph_name, curve_index, curve_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Template plot curve creation/destruction</p> <p>Parameters:</p> Name Type Description Default <code>graph_name</code> required <code>curve_index</code> required <code>curve_name</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}</p> <p>If {curve_index} corresponds to an existing curve then this curve is deleted. In this case the {curve_name} is ignored and does not have to be present. If {curve_index} does not not correspond to an existing curve, {curve_index} must be one greater than the number of curves.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    graph_name: beta.g    curve_index: 1    curve_name: r13.g.a</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_curve_manage(\n    self, graph_name, curve_index, curve_name, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Template plot curve creation/destruction\n\n    Parameters\n    ----------\n    graph_name\n    curve_index\n    curve_name\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}\n\n    If {curve_index} corresponds to an existing curve then this curve is deleted.\n    In this case the {curve_name} is ignored and does not have to be present.\n    If {curve_index} does not not correspond to an existing curve, {curve_index}\n    must be one greater than the number of curves.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       graph_name: beta.g\n       curve_index: 1\n       curve_name: r13.g.a\n\n    \"\"\"\n    cmd = f\"pipe plot_curve_manage {graph_name}^^{curve_index}^^{curve_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_curve_manage\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_field","title":"pytao.Tao.plot_field","text":"<pre><code>plot_field(ele_id, *, colormap=None, radius=0.015, num_points=100, backend=None, **kwargs)\n</code></pre> <p>Plot field information for a given element.</p> <p>Parameters:</p> Name Type Description Default <code>ele_id</code> <code>str</code> <p>Element ID.</p> required <code>colormap</code> <code>str</code> <p>Colormap for the plot. Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"Magma256\".</p> <code>None</code> <code>radius</code> <code>float</code> <p>Radius.</p> <code>0.015</code> <code>num_points</code> <code>int</code> <p>Number of data points.</p> <code>100</code> <code>backend</code> <code>('bokeh', 'mpl')</code> <p>The backend to use.  Auto-detects Jupyter and availability of bokeh to select a backend.</p> <code>\"bokeh\"</code> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_field(\n    self,\n    ele_id: str,\n    *,\n    colormap: Optional[str] = None,\n    radius: float = 0.015,\n    num_points: int = 100,\n    backend: Optional[str] = None,\n    **kwargs,\n):\n    \"\"\"\n    Plot field information for a given element.\n\n    Parameters\n    ----------\n    ele_id : str\n        Element ID.\n    colormap : str, optional\n        Colormap for the plot.\n        Matplotlib defaults to \"PRGn_r\", and bokeh defaults to \"Magma256\".\n    radius : float, default=0.015\n        Radius.\n    num_points : int, default=100\n        Number of data points.\n    backend : {\"bokeh\", \"mpl\"}, optional\n        The backend to use.  Auto-detects Jupyter and availability of bokeh\n        to select a backend.\n    \"\"\"\n    manager = self._get_user_specified_backend(backend)\n    self.last_plot = manager.plot_field(\n        ele_id,\n        colormap=colormap,\n        radius=radius,\n        num_points=num_points,\n        **kwargs,\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_graph","title":"pytao.Tao.plot_graph","text":"<pre><code>plot_graph(graph_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output graph info.</p> <p>Parameters:</p> Name Type Description Default <code>graph_name</code> required <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe plot_graph {graph_name}</p> <p>{graph_name} is in the form:   {p_name}.{g_name} where   {p_name} is the plot region name if from a region or the plot name if a template plot.   This name is obtained from the pipe plot_list command.   {g_name} is the graph name obtained from the pipe plot1 command.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    graph_name: beta.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_graph(self, graph_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output graph info.\n\n    Parameters\n    ----------\n    graph_name\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_graph {graph_name}\n\n    {graph_name} is in the form:\n      {p_name}.{g_name}\n    where\n      {p_name} is the plot region name if from a region or the plot name if a template plot.\n      This name is obtained from the pipe plot_list command.\n      {g_name} is the graph name obtained from the pipe plot1 command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       graph_name: beta.g\n\n    \"\"\"\n    cmd = f\"pipe plot_graph {graph_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_graph\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_graph_manage","title":"pytao.Tao.plot_graph_manage","text":"<pre><code>plot_graph_manage(plot_name, graph_index, graph_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Template plot graph creation/destruction</p> <p>Parameters:</p> Name Type Description Default <code>plot_name</code> required <code>graph_index</code> required <code>graph_name</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}</p> <p>If {graph_index} corresponds to an existing graph then this graph is deleted. In this case the {graph_name} is ignored and does not have to be present. If {graph_index} does not not correspond to an existing graph, {graph_index} must be one greater than the number of graphs.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    plot_name: beta    graph_index: 1    graph_name: beta.g</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_graph_manage(\n    self, plot_name, graph_index, graph_name, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Template plot graph creation/destruction\n\n    Parameters\n    ----------\n    plot_name\n    graph_index\n    graph_name\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}\n\n    If {graph_index} corresponds to an existing graph then this graph is deleted.\n    In this case the {graph_name} is ignored and does not have to be present.\n    If {graph_index} does not not correspond to an existing graph, {graph_index}\n    must be one greater than the number of graphs.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       plot_name: beta\n       graph_index: 1\n       graph_name: beta.g\n\n    \"\"\"\n    cmd = f\"pipe plot_graph_manage {plot_name}^^{graph_index}^^{graph_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_graph_manage\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_histogram","title":"pytao.Tao.plot_histogram","text":"<pre><code>plot_histogram(curve_name, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output plot histogram info.</p> <p>Parameters:</p> Name Type Description Default <code>curve_name</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe plot_histogram {curve_name}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    curve_name: r33.g.x</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_histogram(self, curve_name, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output plot histogram info.\n\n    Parameters\n    ----------\n    curve_name\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_histogram {curve_name}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       curve_name: r33.g.x\n\n    \"\"\"\n    cmd = f\"pipe plot_histogram {curve_name}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_histogram\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_lat_layout","title":"pytao.Tao.plot_lat_layout","text":"<pre><code>plot_lat_layout(ix_uni, ix_branch, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output plot Lat_layout info</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>1</code> required <code>ix_branch</code> <code>0</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe plot_lat_layout {ix_uni}@{ix_branch}</p> <p>Note: The returned list of element positions is not ordered in increasing       longitudinal position.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_lat_layout(\n    self, ix_uni: 1, ix_branch: 0, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output plot Lat_layout info\n\n    Parameters\n    ----------\n    ix_uni: 1\n    ix_branch: 0\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_lat_layout {ix_uni}@{ix_branch}\n\n    Note: The returned list of element positions is not ordered in increasing\n          longitudinal position.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n\n    \"\"\"\n    cmd = f\"pipe plot_lat_layout {ix_uni}@{ix_branch}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_lat_layout\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_line","title":"pytao.Tao.plot_line","text":"<pre><code>plot_line(region_name, graph_name, curve_name, *, x_or_y='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output points used to construct the \"line\" associated with a plot curve.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> required <code>graph_name</code> required <code>curve_name</code> required <code>x_or_y</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>string_list</code> <p>if x_or_y == ''</p> <code>real_array</code> <p>if x_or_y != ''</p> Notes <p>Command syntax:   pipe plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}</p> <p>Optional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y component put into the real array buffer. Note: The plot must come from a region, and not a template, since no template plots       have associated line data. Examples:   pipe plot_line r13.g.a   ! String array output.   pipe plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.   pipe plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting  args:    region_name: beta    graph_name: g    curve_name: a    x_or_y:</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting  args:    region_name: beta    graph_name: g    curve_name: a    x_or_y: y</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_line(\n    self,\n    region_name,\n    graph_name,\n    curve_name,\n    *,\n    x_or_y=\"\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output points used to construct the \"line\" associated with a plot curve.\n\n    Parameters\n    ----------\n    region_name\n    graph_name\n    curve_name\n    x_or_y : optional\n\n    Returns\n    -------\n    string_list\n        if x_or_y == ''\n    real_array\n        if x_or_y != ''\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}\n\n    Optional {x-or-y} may be set to \"x\" or \"y\" to get the smooth line points x or y\n    component put into the real array buffer.\n    Note: The plot must come from a region, and not a template, since no template plots\n          have associated line data.\n    Examples:\n      pipe plot_line r13.g.a   ! String array output.\n      pipe plot_line r13.g.a x ! x-component of line points loaded into the real array buffer.\n      pipe plot_line r13.g.a y ! y-component of line points loaded into the real array buffer.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: beta\n       graph_name: g\n       curve_name: a\n       x_or_y:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: beta\n       graph_name: g\n       curve_name: a\n       x_or_y: y\n\n    \"\"\"\n    cmd = f\"pipe plot_line {region_name}.{graph_name}.{curve_name} {x_or_y}\"\n    if verbose:\n        print(cmd)\n    if x_or_y == \"\":\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"plot_line\", cmd_type=\"string_list\"\n        )\n    if x_or_y != \"\":\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"plot_line\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_list","title":"pytao.Tao.plot_list","text":"<pre><code>plot_list(r_or_g, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of plot templates or plot regions.</p> <p>Parameters:</p> Name Type Description Default <code>r_or_g</code> required <p>Returns:</p> Type Description <code>if r_or_g == 't'</code> <p>dict with template_name:index</p> <code>if r_or_g == 'r'</code> <p>list of dicts with keys:     region     ix     plot_name     visible     x1, x2, y1, y1</p> Notes <p>Command syntax:   pipe plot_list {r_or_g}</p> <p>where \"{r/g}\" is:   \"r\"      ! list regions of the form ix;region_name;plot_name;visible;x1;x2;y1;y2   \"t\"      ! list template plots of the form ix;name</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    r_or_g: r</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_list(self, r_or_g, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of plot templates or plot regions.\n\n    Parameters\n    ----------\n    r_or_g\n\n    Returns\n    -------\n    if r_or_g == 't'\n        dict with template_name:index\n    if r_or_g == 'r'\n        list of dicts with keys:\n            region\n            ix\n            plot_name\n            visible\n            x1, x2, y1, y1\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_list {r_or_g}\n\n    where \"{r/g}\" is:\n      \"r\"      ! list regions of the form ix;region_name;plot_name;visible;x1;x2;y1;y2\n      \"t\"      ! list template plots of the form ix;name\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       r_or_g: r\n\n    \"\"\"\n    cmd = f\"pipe plot_list {r_or_g}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_page","title":"pytao.Tao.plot_page","text":"<pre><code>plot_page()\n</code></pre> <p>Get plot page parameters.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_page(self):\n    \"\"\"Get plot page parameters.\"\"\"\n    cmd = \"show plot_page\"\n    return _pytao_parsers.parse_show_plot_page(self.cmd(cmd), cmd=cmd)\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_symbol","title":"pytao.Tao.plot_symbol","text":"<pre><code>plot_symbol(region_name, graph_name, curve_name, x_or_y, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output locations to draw symbols for a plot curve.</p> <p>Parameters:</p> Name Type Description Default <code>region_name</code> required <code>graph_name</code> required <code>curve_name</code> required <code>x_or_y</code> required <p>Returns:</p> Type Description <code>string_list</code> <p>if x_or_y == ''</p> <code>real_array</code> <p>if x_or_y != ''</p> Notes <p>Command syntax:   pipe plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}</p> <p>Optional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y positions put into the real array buffer. Note: The plot must come from a region, and not a template,       since no template plots have associated symbol data. Examples:   pipe plot_symbol r13.g.a       ! String array output.   pipe plot_symbol r13.g.a x     ! x-component of the symbol positions                                      loaded into the real array buffer.   pipe plot_symbol r13.g.a y     ! y-component of the symbol positions                                      loaded into the real array buffer.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting  args:    region_name: r13    graph_name: g    curve_name: a    x_or_y:</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting  args:    region_name: r13    graph_name: g    curve_name: a    x_or_y: y</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_symbol(\n    self,\n    region_name,\n    graph_name,\n    curve_name,\n    x_or_y,\n    *,\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output locations to draw symbols for a plot curve.\n\n    Parameters\n    ----------\n    region_name\n    graph_name\n    curve_name\n    x_or_y\n\n    Returns\n    -------\n    string_list\n        if x_or_y == ''\n    real_array\n        if x_or_y != ''\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}\n\n    Optional {x_or_y} may be set to \"x\" or \"y\" to get the symbol x or y\n    positions put into the real array buffer.\n    Note: The plot must come from a region, and not a template,\n          since no template plots have associated symbol data.\n    Examples:\n      pipe plot_symbol r13.g.a       ! String array output.\n      pipe plot_symbol r13.g.a x     ! x-component of the symbol positions\n                                         loaded into the real array buffer.\n      pipe plot_symbol r13.g.a y     ! y-component of the symbol positions\n                                         loaded into the real array buffer.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: r13\n       graph_name: g\n       curve_name: a\n       x_or_y:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_plot_line -external_plotting\n     args:\n       region_name: r13\n       graph_name: g\n       curve_name: a\n       x_or_y: y\n\n    \"\"\"\n    cmd = f\"pipe plot_symbol {region_name}.{graph_name}.{curve_name} {x_or_y}\"\n    if verbose:\n        print(cmd)\n    if x_or_y == \"\":\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"plot_symbol\", cmd_type=\"string_list\"\n        )\n    if x_or_y != \"\":\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"plot_symbol\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_template_manage","title":"pytao.Tao.plot_template_manage","text":"<pre><code>plot_template_manage(template_location, template_name, *, n_graph='-1', graph_names='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Template plot creation or destruction.</p> <p>Parameters:</p> Name Type Description Default <code>template_location</code> required <code>template_name</code> required <code>n_graph</code> <code>default=-1</code> <code>'-1'</code> <code>graph_names</code> <code>default=</code> <code>''</code> <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe plot_template_manage {template_location}^^{template_name}^^                          {n_graph}^^{graph_names}</p> <p>Where:   {template_location} is the location to place or delete a template plot. Use \"@Tnnn\" syntax for the location.   {template_name} is the name of the template plot. If deleting a plot this name is immaterial.   {n_graph} is the number of associated graphs. If set to -1 then any existing template plot is deleted.   {graph_names} are the names of the graphs.  graph_names should be in the form:      graph1_name^^graph2_name^^...^^graphN_name   for N=n_graph names</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    template_location: @T1    template_name: beta    n_graph: 2    graph_names: g1^^g2</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_template_manage(\n    self,\n    template_location,\n    template_name,\n    *,\n    n_graph=\"-1\",\n    graph_names=\"\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Template plot creation or destruction.\n\n    Parameters\n    ----------\n    template_location\n    template_name\n    n_graph : default=-1\n    graph_names : default=\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_template_manage {template_location}^^{template_name}^^\n                             {n_graph}^^{graph_names}\n\n    Where:\n      {template_location} is the location to place or delete a template plot. Use \"@Tnnn\" syntax for the location.\n      {template_name} is the name of the template plot. If deleting a plot this name is immaterial.\n      {n_graph} is the number of associated graphs. If set to -1 then any existing template plot is deleted.\n      {graph_names} are the names of the graphs.  graph_names should be in the form:\n         graph1_name^^graph2_name^^...^^graphN_name\n      for N=n_graph names\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       template_location: @T1\n       template_name: beta\n       n_graph: 2\n       graph_names: g1^^g2\n\n    \"\"\"\n    cmd = f\"pipe plot_template_manage {template_location}^^{template_name}^^{n_graph}^^{graph_names}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_template_manage\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.plot_transfer","title":"pytao.Tao.plot_transfer","text":"<pre><code>plot_transfer(from_plot, to_plot, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).</p> <p>Parameters:</p> Name Type Description Default <code>from_plot</code> required <code>to_plot</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe plot_transfer {from_plot} {to_plot}</p> <p>To avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}. If {to_plot} is not present and {from_plot} is a template plot, the \"to plots\"  are the equivalent region plots with the same name. And vice versa  if {from_plot} is a region plot.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    from_plot: r13    to_plot: r23</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def plot_transfer(self, from_plot, to_plot, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output transfer plot parameters from the \"from plot\" to the \"to plot\" (or plots).\n\n    Parameters\n    ----------\n    from_plot\n    to_plot\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe plot_transfer {from_plot} {to_plot}\n\n    To avoid confusion, use \"@Tnnn\" and \"@Rnnn\" syntax for {from_plot}.\n    If {to_plot} is not present and {from_plot} is a template plot, the \"to plots\"\n     are the equivalent region plots with the same name. And vice versa\n     if {from_plot} is a region plot.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       from_plot: r13\n       to_plot: r23\n\n    \"\"\"\n    cmd = f\"pipe plot_transfer {from_plot} {to_plot}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"plot_transfer\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ptc_com","title":"pytao.Tao.ptc_com","text":"<pre><code>ptc_com(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output Ptc_com structure components.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ptc_com</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ptc_com(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Ptc_com structure components.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ptc_com\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe ptc_com\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ptc_com\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.ring_general","title":"pytao.Tao.ring_general","text":"<pre><code>ring_general(*, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lattice branch with closed geometry info (emittances, etc.)</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe ring_general {ix_uni}@{ix_branch}|{which}</p> <p>where {which} is one of:   model   base   design Example:   pipe ring_general 1@0|model</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:     ix_uni: 1     ix_branch: 0     which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def ring_general(\n    self,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    which=\"model\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output lattice branch with closed geometry info (emittances, etc.)\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe ring_general {ix_uni}@{ix_branch}|{which}\n\n    where {which} is one of:\n      model\n      base\n      design\n    Example:\n      pipe ring_general 1@0|model\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n        ix_uni: 1\n        ix_branch: 0\n        which: model\n\n    \"\"\"\n    cmd = f\"pipe ring_general {ix_uni}@{ix_branch}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"ring_general\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_list","title":"pytao.Tao.shape_list","text":"<pre><code>shape_list(who, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output lat_layout or floor_plan shapes list</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe shape_list {who}</p> <p>{who} is one of:   lat_layout   floor_plan</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: floor_plan</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_list(self, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output lat_layout or floor_plan shapes list\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_list {who}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: floor_plan\n\n    \"\"\"\n    cmd = f\"pipe shape_list {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"shape_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_manage","title":"pytao.Tao.shape_manage","text":"<pre><code>shape_manage(who, index, add_or_delete, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Element shape creation or destruction</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <code>index</code> required <code>add_or_delete</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe shape_manage {who} {index} {add_or_delete}</p> <p>{who} is one of:   lat_layout   floor_plan {add_or_delete} is one of:   add     -- Add a shape at {index}.              Shapes with higher index get moved up one to make room.   delete  -- Delete shape at {index}.              Shapes with higher index get moved down one to fill the gap.</p> <p>Example:   pipe shape_manage floor_plan 2 add Note: After adding a shape use \"pipe shape_set\" to set shape parameters. This is important since an added shape is in a ill-defined state.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: floor_plan    index: 1    add_or_delete: add</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_manage(\n    self, who, index, add_or_delete, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Element shape creation or destruction\n\n    Parameters\n    ----------\n    who\n    index\n    add_or_delete\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_manage {who} {index} {add_or_delete}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n    {add_or_delete} is one of:\n      add     -- Add a shape at {index}.\n                 Shapes with higher index get moved up one to make room.\n      delete  -- Delete shape at {index}.\n                 Shapes with higher index get moved down one to fill the gap.\n\n    Example:\n      pipe shape_manage floor_plan 2 add\n    Note: After adding a shape use \"pipe shape_set\" to set shape parameters.\n    This is important since an added shape is in a ill-defined state.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: floor_plan\n       index: 1\n       add_or_delete: add\n\n    \"\"\"\n    cmd = f\"pipe shape_manage {who} {index} {add_or_delete}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"shape_manage\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_pattern_list","title":"pytao.Tao.shape_pattern_list","text":"<pre><code>shape_pattern_list(*, ix_pattern='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of shape patterns or shape pattern points</p> <p>Parameters:</p> Name Type Description Default <code>ix_pattern</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe shape_pattern_list {ix_pattern}</p> <p>If optional {ix_pattern} index is omitted then list all the patterns. If {ix_pattern} is present, list points of given pattern.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape  args:    ix_pattern:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_list(self, *, ix_pattern=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of shape patterns or shape pattern points\n\n    Parameters\n    ----------\n    ix_pattern : optional\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_pattern_list {ix_pattern}\n\n    If optional {ix_pattern} index is omitted then list all the patterns.\n    If {ix_pattern} is present, list points of given pattern.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape\n     args:\n       ix_pattern:\n\n    \"\"\"\n    cmd = f\"pipe shape_pattern_list {ix_pattern}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"shape_pattern_list\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_pattern_manage","title":"pytao.Tao.shape_pattern_manage","text":"<pre><code>shape_pattern_manage(ix_pattern, pat_name, pat_line_width, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Add or remove shape pattern</p> <p>Parameters:</p> Name Type Description Default <code>ix_pattern</code> required <code>pat_name</code> required <code>pat_line_width</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}</p> <p>Where:   {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up                                       if adding a pattern and down if deleting.   {pat_name}        -- Pattern name.   {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section                                             will be deleted.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape  args:    ix_pattern : 1    pat_name : new_pat    pat_line_width : 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_manage(\n    self, ix_pattern, pat_name, pat_line_width, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Add or remove shape pattern\n\n    Parameters\n    ----------\n    ix_pattern\n    pat_name\n    pat_line_width\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}\n\n    Where:\n      {ix_pattern}      -- Pattern index. Patterns with higher indexes will be moved up\n                                          if adding a pattern and down if deleting.\n      {pat_name}        -- Pattern name.\n      {pat_line_width}  -- Line width. Integer. If set to \"delete\" then section\n                                                will be deleted.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape\n     args:\n       ix_pattern : 1\n       pat_name : new_pat\n       pat_line_width : 1\n\n    \"\"\"\n    cmd = f\"pipe shape_pattern_manage {ix_pattern}^^{pat_name}^^{pat_line_width}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"shape_pattern_manage\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_pattern_point_manage","title":"pytao.Tao.shape_pattern_point_manage","text":"<pre><code>shape_pattern_point_manage(ix_pattern, ix_point, s, x, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Add or remove shape pattern point</p> <p>Parameters:</p> Name Type Description Default <code>ix_pattern</code> required <code>ix_point</code> required <code>s</code> required <code>x</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}</p> <p>Where:   {ix_pattern}      -- Pattern index.   {ix_point}        -- Point index. Points of higher indexes will be moved up                                     if adding a point and down if deleting.   {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape  args:    ix_pattern: 1    ix_point: 1    s: 0    x: 0</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_pattern_point_manage(\n    self, ix_pattern, ix_point, s, x, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Add or remove shape pattern point\n\n    Parameters\n    ----------\n    ix_pattern\n    ix_point\n    s\n    x\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}\n\n    Where:\n      {ix_pattern}      -- Pattern index.\n      {ix_point}        -- Point index. Points of higher indexes will be moved up\n                                        if adding a point and down if deleting.\n      {s}, {x}          -- Point location. If {s} is \"delete\" then delete the point.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_shape\n     args:\n       ix_pattern: 1\n       ix_point: 1\n       s: 0\n       x: 0\n\n    \"\"\"\n    cmd = f\"pipe shape_pattern_point_manage {ix_pattern}^^{ix_point}^^{s}^^{x}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"shape_pattern_point_manage\", cmd_type=\"None\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.shape_set","title":"pytao.Tao.shape_set","text":"<pre><code>shape_set(who, shape_index, ele_name, shape, color, shape_size, type_label, shape_draw, multi_shape, line_width, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Set lat_layout or floor_plan shape parameters.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <code>shape_index</code> required <code>ele_name</code> required <code>shape</code> required <code>color</code> required <code>shape_size</code> required <code>type_label</code> required <code>shape_draw</code> required <code>multi_shape</code> required <code>line_width</code> required <p>Returns:</p> Type Description <code>None</code> Notes <p>Command syntax:   pipe shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^                    {shape_size}^^{type_label}^^{shape_draw}^^                    {multi_shape}^^{line_width}</p> <p>{who} is one of:   lat_layout   floor_plan</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: floor_plan    shape_index: 1    ele_name: Q1    shape: circle    color:    shape_size:    type_label:    shape_draw:    multi_shape:    line_width:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def shape_set(\n    self,\n    who,\n    shape_index,\n    ele_name,\n    shape,\n    color,\n    shape_size,\n    type_label,\n    shape_draw,\n    multi_shape,\n    line_width,\n    *,\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Set lat_layout or floor_plan shape parameters.\n\n    Parameters\n    ----------\n    who\n    shape_index\n    ele_name\n    shape\n    color\n    shape_size\n    type_label\n    shape_draw\n    multi_shape\n    line_width\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Command syntax:\n      pipe shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^\n                       {shape_size}^^{type_label}^^{shape_draw}^^\n                       {multi_shape}^^{line_width}\n\n    {who} is one of:\n      lat_layout\n      floor_plan\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: floor_plan\n       shape_index: 1\n       ele_name: Q1\n       shape: circle\n       color:\n       shape_size:\n       type_label:\n       shape_draw:\n       multi_shape:\n       line_width:\n\n    \"\"\"\n    cmd = f\"pipe shape_set {who}^^{shape_index}^^{ele_name}^^{shape}^^{color}^^{shape_size}^^{type_label}^^{shape_draw}^^{multi_shape}^^{line_width}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"shape_set\", cmd_type=\"None\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.show","title":"pytao.Tao.show","text":"<pre><code>show(line, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output the output from a show command.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> required <p>Returns:</p> Type Description <code>list of str</code> <p>This is raw list of strings from tao, as parsing is not currently supported.</p> Notes <p>Command syntax:   pipe show {line}</p> <p>{line} is the string to pass through to the show command. Example:   pipe show lattice -pipe</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    line: -pipe</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def show(self, line, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output the output from a show command.\n\n    Parameters\n    ----------\n    line\n\n    Returns\n    -------\n    list of str\n        This is raw list of strings from tao, as parsing is not currently\n        supported.\n\n    Notes\n    -----\n    Command syntax:\n      pipe show {line}\n\n    {line} is the string to pass through to the show command.\n    Example:\n      pipe show lattice -pipe\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       line: -pipe\n\n    \"\"\"\n    cmd = f\"pipe show {line}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"show\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.space_charge_com","title":"pytao.Tao.space_charge_com","text":"<pre><code>space_charge_com(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output space_charge_com structure parameters.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe space_charge_com</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def space_charge_com(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output space_charge_com structure parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe space_charge_com\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe space_charge_com\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"space_charge_com\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.species_to_int","title":"pytao.Tao.species_to_int","text":"<pre><code>species_to_int(species_str, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Convert species name to corresponding integer</p> <p>Parameters:</p> Name Type Description Default <code>species_str</code> required <p>Returns:</p> Type Description <code>int</code> Notes <p>Command syntax:   pipe species_to_int {species_str}</p> <p>Example:   pipe species_to_int CO2++</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    species_str: electron</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def species_to_int(self, species_str, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Convert species name to corresponding integer\n\n    Parameters\n    ----------\n    species_str\n\n    Returns\n    -------\n    int\n\n    Notes\n    -----\n    Command syntax:\n      pipe species_to_int {species_str}\n\n    Example:\n      pipe species_to_int CO2++\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       species_str: electron\n\n    \"\"\"\n    cmd = f\"pipe species_to_int {species_str}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"species_to_int\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.species_to_str","title":"pytao.Tao.species_to_str","text":"<pre><code>species_to_str(species_int, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Convert species integer id to corresponding</p> <p>Parameters:</p> Name Type Description Default <code>species_int</code> required <p>Returns:</p> Type Description <code>str</code> Notes <p>Command syntax:   pipe species_to_str {species_int}</p> <p>Example:   pipe species_to_str -1     ! Returns 'Electron'</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    species_int: -1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def species_to_str(self, species_int, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Convert species integer id to corresponding\n\n    Parameters\n    ----------\n    species_int\n\n    Returns\n    -------\n    str\n\n    Notes\n    -----\n    Command syntax:\n      pipe species_to_str {species_int}\n\n    Example:\n      pipe species_to_str -1     ! Returns 'Electron'\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       species_int: -1\n\n    \"\"\"\n    cmd = f\"pipe species_to_str {species_int}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"species_to_str\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.spin_invariant","title":"pytao.Tao.spin_invariant","text":"<pre><code>spin_invariant(who, *, ix_uni='', ix_branch='', which='model', flags='-array_out', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output closed orbit spin axes n0, l0, or m0 at the ends of all lattice elements in a branch. n0, l0, and m0 are solutions of the T-BMT equation. n0 is periodic while l0 and m0 are not. At the beginning of the branch, the orientation of the l0 or m0 axes in the plane perpendicular to the n0 axis is chosen a bit arbitrarily. See the Bmad manual for more details.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <code>flags</code> <code>default=-array_out</code> <code>'-array_out'</code> <p>Returns:</p> Type Description <code>string_list</code> <p>if '-array_out' not in flags</p> <code>real_array</code> <p>if '-array_out' in flags</p> Notes <p>Command syntax:   pipe spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}</p> <p>Where:   {flags} are optional switches:       -array_out : If present, the output will be available in the tao_c_interface_com%c_real.   {who} is one of: l0, n0, or m0   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a branch index. Defaults to s%global%default_branch.   {which} is one of:     model     base     design</p> <p>Example:   pipe spin_invariant 1@0|model</p> <p>Note: This command is under development. If you want to use please contact David Sagan.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: l0    ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_invariant(\n    self,\n    who,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    which=\"model\",\n    flags=\"-array_out\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output closed orbit spin axes n0, l0, or m0 at the ends of all lattice elements in a branch.\n    n0, l0, and m0 are solutions of the T-BMT equation.\n    n0 is periodic while l0 and m0 are not. At the beginning of the branch, the orientation of the\n    l0 or m0 axes in the plane perpendicular to the n0 axis is chosen a bit arbitrarily.\n    See the Bmad manual for more details.\n\n    Parameters\n    ----------\n    who\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    flags : default=-array_out\n\n    Returns\n    -------\n    string_list\n        if '-array_out' not in flags\n    real_array\n        if '-array_out' in flags\n\n    Notes\n    -----\n    Command syntax:\n      pipe spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}\n\n    Where:\n      {flags} are optional switches:\n          -array_out : If present, the output will be available in the tao_c_interface_com%c_real.\n      {who} is one of: l0, n0, or m0\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {which} is one of:\n        model\n        base\n        design\n\n    Example:\n      pipe spin_invariant 1@0|model\n\n    Note: This command is under development. If you want to use please contact David Sagan.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: l0\n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe spin_invariant {flags} {who} {ix_uni}@{ix_branch}|{which}\"\n    if verbose:\n        print(cmd)\n    if \"-array_out\" not in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"spin_invariant\", cmd_type=\"string_list\"\n        )\n    if \"-array_out\" in flags:\n        return self.__execute(\n            cmd, as_dict, raises, method_name=\"spin_invariant\", cmd_type=\"real_array\"\n        )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.spin_polarization","title":"pytao.Tao.spin_polarization","text":"<pre><code>spin_polarization(*, ix_uni='', ix_branch='', which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output spin polarization information</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe spin_polarization {ix_uni}@{ix_branch}|{which}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a branch index. Defaults to s%global%default_branch.   {which} is one of:     model     base     design</p> <p>Example:   pipe spin_polarization 1@0|model</p> <p>Note: This command is under development. If you want to use please contact David Sagan.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_polarization(\n    self,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    which=\"model\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output spin polarization information\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe spin_polarization {ix_uni}@{ix_branch}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a branch index. Defaults to s%global%default_branch.\n      {which} is one of:\n        model\n        base\n        design\n\n    Example:\n      pipe spin_polarization 1@0|model\n\n    Note: This command is under development. If you want to use please contact David Sagan.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe spin_polarization {ix_uni}@{ix_branch}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"spin_polarization\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.spin_resonance","title":"pytao.Tao.spin_resonance","text":"<pre><code>spin_resonance(*, ix_uni='', ix_branch='', which='model', ref_ele='0', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output spin resonance information</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ix_branch</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <code>ref_ele</code> <code>default=0</code> <p>Reference element to calculate at.</p> <code>'0'</code> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.   {which} is one of: \"model\", \"base\" or \"design\"   {ref_ele} is an element name or index. This will return a string_list with the following fields:   spin_tune                   -- Spin tune   dq_X_sum, dq_X_diff         -- Tune sum Q_spin+Q_mode and tune difference Q_spin-Q_mode for modes X = a, b, and c.   xi_res_X_sum, xi_res_X_diff -- The linear spin/orbit sum and difference resonance strengths for X = a, b, and c modes.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ix_branch: 0    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def spin_resonance(\n    self,\n    *,\n    ix_uni=\"\",\n    ix_branch=\"\",\n    which=\"model\",\n    ref_ele=\"0\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output spin resonance information\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ix_branch : optional\n    which : default=model\n    ref_ele : default=0\n        Reference element to calculate at.\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index. Defaults to s%global%default_branch.\n      {which} is one of: \"model\", \"base\" or \"design\"\n      {ref_ele} is an element name or index.\n    This will return a string_list with the following fields:\n      spin_tune                   -- Spin tune\n      dq_X_sum, dq_X_diff         -- Tune sum Q_spin+Q_mode and tune difference Q_spin-Q_mode for modes X = a, b, and c.\n      xi_res_X_sum, xi_res_X_diff -- The linear spin/orbit sum and difference resonance strengths for X = a, b, and c modes.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ix_branch: 0\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe spin_resonance {ix_uni}@{ix_branch}|{which} {ref_ele}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"spin_resonance\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.super_universe","title":"pytao.Tao.super_universe","text":"<pre><code>super_universe(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output super_Universe parameters.</p> <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe super_universe</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def super_universe(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output super_Universe parameters.\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe super_universe\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe super_universe\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"super_universe\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.tao_global","title":"pytao.Tao.tao_global","text":"<pre><code>tao_global(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output global parameters.</p> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe global</p> <p>Output syntax is parameter list form. See documentation at the beginning of this file.</p> <p>Note: The follow is intentionally left out:   optimizer_allow_user_abort   quiet   single_step   prompt_color   prompt_string</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def tao_global(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output global parameters.\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe global\n\n    Output syntax is parameter list form. See documentation at the beginning of this file.\n\n    Note: The follow is intentionally left out:\n      optimizer_allow_user_abort\n      quiet\n      single_step\n      prompt_color\n      prompt_string\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe global\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"tao_global\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.taylor_map","title":"pytao.Tao.taylor_map","text":"<pre><code>taylor_map(ele1_id, ele2_id, *, order='1', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output Taylor map between two points.</p> <p>Parameters:</p> Name Type Description Default <code>ele1_id</code> required <code>ele2_id</code> required <code>order</code> <code>default=1</code> <code>'1'</code> <p>Returns:</p> Type Description <code>dict of dict of taylor terms:</code> <p>{2: { (3,0,0,0,0,0)}: 4.56, ...     corresponding to: px_out = 4.56 * x_in^3</p> Notes <p>Command syntax:   pipe taylor_map {ele1_id} {ele2_id} {order}</p> <p>Where:   {ele1_id} is the start element.   {ele2_id} is the end element.   {order} is the map order. Default is order set in the lattice file. {order} cannot be larger than         what is set by the lattice file. If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed. Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification. Example:   pipe taylor_map 2@1&gt;&gt;q01w|design q02w  2</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ele1_id: 1@0&gt;&gt;q01w|design    ele2_id: q02w    order: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def taylor_map(\n    self, ele1_id, ele2_id, *, order=\"1\", verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output Taylor map between two points.\n\n    Parameters\n    ----------\n    ele1_id\n    ele2_id\n    order : default=1\n\n    Returns\n    -------\n    dict of dict of taylor terms:\n        {2: { (3,0,0,0,0,0)}: 4.56, ...\n            corresponding to: px_out = 4.56 * x_in^3\n\n    Notes\n    -----\n    Command syntax:\n      pipe taylor_map {ele1_id} {ele2_id} {order}\n\n    Where:\n      {ele1_id} is the start element.\n      {ele2_id} is the end element.\n      {order} is the map order. Default is order set in the lattice file. {order} cannot be larger than\n            what is set by the lattice file.\n    If {ele2_id} = {ele1_id}, the 1-turn transfer map is computed.\n    Note: {ele2_id} should just be an element name or index without universe, branch, or model/base/design specification.\n    Example:\n      pipe taylor_map 2@1&gt;&gt;q01w|design q02w  2\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ele1_id: 1@0&gt;&gt;q01w|design\n       ele2_id: q02w\n       order: 1\n\n    \"\"\"\n    cmd = f\"pipe taylor_map {ele1_id} {ele2_id} {order}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"taylor_map\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.twiss_at_s","title":"pytao.Tao.twiss_at_s","text":"<pre><code>twiss_at_s(*, ix_uni='', ele='', s_offset='', which='model', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output twiss parameters at given s position.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>optional</code> <code>''</code> <code>ele</code> <code>optional</code> <code>''</code> <code>s_offset</code> <code>optional</code> <code>''</code> <code>which</code> <code>default=model</code> <code>'model'</code> <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ele} is an element name or index. Default at the Beginning element at start of branch 0.   {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.      If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will   {which} is one of: \"model\", \"base\" or \"design\".</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1    ele: 10    s_offset: 0.7    which: model</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def twiss_at_s(\n    self,\n    *,\n    ix_uni=\"\",\n    ele=\"\",\n    s_offset=\"\",\n    which=\"model\",\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Output twiss parameters at given s position.\n\n    Parameters\n    ----------\n    ix_uni : optional\n    ele : optional\n    s_offset : optional\n    which : default=model\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ele} is an element name or index. Default at the Beginning element at start of branch 0.\n      {s_offset} is the offset of the evaluation point from the downstream end of ele. Default is 0.\n         If {s_offset} is present, the preceeding \"-&gt;\" sign must be present. EG: Something like \"23|model\" will\n      {which} is one of: \"model\", \"base\" or \"design\".\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n       ele: 10\n       s_offset: 0.7\n       which: model\n\n    \"\"\"\n    cmd = f\"pipe twiss_at_s {ix_uni}@{ele}-&gt;{s_offset}|{which}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"twiss_at_s\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.universe","title":"pytao.Tao.universe","text":"<pre><code>universe(ix_uni, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output universe info.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe universe {ix_uni}</p> <p>Use \"pipe global\" to get the number of universes.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    ix_uni: 1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def universe(self, ix_uni, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output universe info.\n\n    Parameters\n    ----------\n    ix_uni\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe universe {ix_uni}\n\n    Use \"pipe global\" to get the number of universes.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       ix_uni: 1\n\n    \"\"\"\n    cmd = f\"pipe universe {ix_uni}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"universe\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.update_plot_shapes","title":"pytao.Tao.update_plot_shapes","text":"<pre><code>update_plot_shapes(ele_name=None, *, layout=False, floor=False, shape_index=None, shape=None, color=None, shape_size=None, type_label=None, shape_draw=None, multi_shape=None, line_width=None)\n</code></pre> <p>Update shape plotting settings for layouts/floor plans.</p> <ul> <li>Must set either (or both of) <code>layout</code> / <code>floor</code> to <code>True</code>.</li> <li>Only the specified parameters will be updated for each shape. That is,   if you only specify <code>color</code> then the color of every matching shape   will be updated and the other settings (such as <code>line_width</code>) will   remain the same.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>ele_name</code> <code>str</code> <p>Update the shape only for this element name. If <code>ele_name</code> and <code>shape_index</code> are unspecified, these settings apply to all shapes.</p> <code>None</code> <code>shape_index</code> <code>int</code> <p>The numerical index of the shape to change. If <code>ele_name</code> and <code>shape_index</code> are unspecified, these settings apply to all shapes.</p> <code>None</code> <code>layout</code> <code>bool</code> <p>Apply the settings to lattice layout shapes.</p> <code>False</code> <code>floor</code> <code>bool</code> <p>Apply the settings to floor plan shapes.</p> <code>False</code> <code>shape</code> <code>str</code> <p>The shape to use. Choose from one of the following: * \"box\" * \"xbox\" * \"bow_tie\" * \"rbow_tie\" * \"circle\" * \"diamond\" * \"x\", * \"r_triangle\" * \"l_triangle\" * \"u_triangle\" * \"d_triangle\"</p> <code>None</code> <code>color</code> <code>str</code> <p>Color for the shape. Choose from one of the following: * \"Not_Set\" * \"White\" * \"Black\" * \"Red\" * \"Green\" * \"Blue\" * \"Cyan\" * \"Magenta\" * \"Yellow\" * \"Orange\" * \"Yellow_Green\" * \"Light_Green\" * \"Navy_Blue\" * \"Purple\" * \"Reddish_Purple\" * \"Dark_Grey\" * \"Light_Grey\" * \"Transparent\"</p> <code>None</code> <code>shape_size</code> <code>float</code> <p>Shape size.</p> <code>None</code> <code>type_label</code> <code>\"s\", \"name\", or \"none\"</code> <p>Show this label for each shape. <code>None</code> indicates no shape.</p> <code>None</code> <code>shape_draw</code> <code>bool</code> <p>Draw the shape.</p> <code>None</code> <code>multi_shape</code> <code>bool</code> <p>If it can be part of a multi-shape.</p> <code>None</code> <code>line_width</code> <code>int</code> <p>Width of lines used to draw the shape.</p> <code>None</code> <p>Returns:</p> Type Description <code>list of ShapeListInfo</code> Source code in <code>pytao/interface_commands.py</code> <pre><code>def update_plot_shapes(\n    self,\n    ele_name: Optional[str] = None,\n    *,\n    layout: bool = False,\n    floor: bool = False,\n    shape_index: Optional[int] = None,\n    shape: Optional[str] = None,\n    color: Optional[str] = None,\n    shape_size: Optional[float] = None,\n    type_label: Optional[Literal[\"s\", \"name\", \"none\"]] = None,\n    shape_draw: Optional[bool] = None,\n    multi_shape: Optional[bool] = None,\n    line_width: Optional[int] = None,\n) -&gt; List[ShapeListInfo]:\n    \"\"\"\n    Update shape plotting settings for layouts/floor plans.\n\n    * Must set either (or both of) `layout` / `floor` to `True`.\n    * Only the specified parameters will be updated for each shape. That is,\n      if you only specify `color` then the color of every matching shape\n      will be updated and the other settings (such as `line_width`) will\n      remain the same.\n\n    Parameters\n    ----------\n    ele_name : str, optional\n        Update the shape only for this element name.\n        If `ele_name` and `shape_index` are unspecified, these settings\n        apply to all shapes.\n    shape_index : int, optional\n        The numerical index of the shape to change.\n        If `ele_name` and `shape_index` are unspecified, these settings\n        apply to all shapes.\n    layout : bool, default=False\n        Apply the settings to lattice layout shapes.\n    floor : bool, default=False\n        Apply the settings to floor plan shapes.\n    shape : str, optional\n        The shape to use. Choose from one of the following:\n        * \"box\"\n        * \"xbox\"\n        * \"bow_tie\"\n        * \"rbow_tie\"\n        * \"circle\"\n        * \"diamond\"\n        * \"x\",\n        * \"r_triangle\"\n        * \"l_triangle\"\n        * \"u_triangle\"\n        * \"d_triangle\"\n    color : str, optional\n        Color for the shape. Choose from one of the following:\n        * \"Not_Set\"\n        * \"White\"\n        * \"Black\"\n        * \"Red\"\n        * \"Green\"\n        * \"Blue\"\n        * \"Cyan\"\n        * \"Magenta\"\n        * \"Yellow\"\n        * \"Orange\"\n        * \"Yellow_Green\"\n        * \"Light_Green\"\n        * \"Navy_Blue\"\n        * \"Purple\"\n        * \"Reddish_Purple\"\n        * \"Dark_Grey\"\n        * \"Light_Grey\"\n        * \"Transparent\"\n    shape_size : float, optional\n        Shape size.\n    type_label : \"s\", \"name\", or \"none\", optional\n        Show this label for each shape. `None` indicates no shape.\n    shape_draw : bool, optional\n        Draw the shape.\n    multi_shape : bool, optional\n        If it can be part of a multi-shape.\n    line_width : int, optional\n        Width of lines used to draw the shape.\n\n    Returns\n    -------\n    list of ShapeListInfo\n    \"\"\"\n\n    who_list = []\n    if layout:\n        who_list.append(\"lat_layout\")\n    if floor:\n        who_list.append(\"floor_plan\")\n    if not who_list:\n        raise ValueError(\"Must specify either `layout` or `floor` plots\")\n\n    res = []\n    for who in who_list:\n        shape_list_info = typing.cast(List[ShapeListInfo], self.shape_list(who))\n        res.extend(shape_list_info)\n        for info in shape_list_info:\n            should_set = any(\n                (\n                    (ele_name is None and shape_index is None),\n                    (ele_name == info[\"ele_name\"]),\n                    (ele_name and info[\"ele_name\"].startswith(ele_name)),\n                    (shape_index == info[\"shape_index\"]),\n                )\n            )\n            if not should_set:\n                continue\n\n            if type_label is not None:\n                info[\"type_label\"] = type_label\n            if shape is not None:\n                info[\"shape\"] = shape\n            if color is not None:\n                info[\"color\"] = color\n            if shape_size is not None:\n                info[\"shape_size\"] = shape_size\n            if shape_draw is not None:\n                info[\"shape_draw\"] = shape_draw\n            if multi_shape is not None:\n                info[\"multi_shape\"] = multi_shape\n            if line_width is not None:\n                info[\"line_width\"] = line_width\n\n            self.shape_set(who=who, **info)\n\n    return res\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var","title":"pytao.Tao.var","text":"<pre><code>var(var, *, slaves='', verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output parameters of a given variable.</p> <p>Parameters:</p> Name Type Description Default <code>var</code> required <code>slaves</code> <code>optional</code> <code>''</code> <p>Returns:</p> Type Description <code>dict, or list of dict</code> <p>\"slaves\" mode will be a list of dicts. Normal mode will be a dict.</p> Notes <p>Command syntax:   pipe var {var} {slaves}</p> <p>Note: use \"pipe var_general\" to get a list of variables.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    var: quad[1]    slaves:</p> <p>Example: 2  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    var: quad[1]    slaves: slaves</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var(self, var, *, slaves=\"\", verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output parameters of a given variable.\n\n    Parameters\n    ----------\n    var\n    slaves : optional\n\n    Returns\n    -------\n    dict, or list of dict\n        \"slaves\" mode will be a list of dicts.\n        Normal mode will be a dict.\n\n    Notes\n    -----\n    Command syntax:\n      pipe var {var} {slaves}\n\n    Note: use \"pipe var_general\" to get a list of variables.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       var: quad[1]\n       slaves:\n\n    Example: 2\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       var: quad[1]\n       slaves: slaves\n\n    \"\"\"\n    cmd = f\"python var {var} {slaves}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"var\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_create","title":"pytao.Tao.var_create","text":"<pre><code>var_create(var_name, ele_name, attribute, universes, weight, step, low_lim, high_lim, merit_type, good_user, key_bound, key_delta, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Create a single variable</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> required <code>ele_name</code> required <code>attribute</code> required <code>universes</code> required <code>weight</code> required <code>step</code> required <code>low_lim</code> required <code>high_lim</code> required <code>merit_type</code> required <code>good_user</code> required <code>key_bound</code> required <code>key_delta</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^                     {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^                     {good_user}^^{key_bound}^^{key_delta}</p> <p>{var_name} is something like \"kick[5]\". Before using var_create, setup the appropriate v1_var array using the \"pipe var_v1_create\" command.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching  args:    var_name: quad[1]    ele_name: Q1    attribute: L    universes: 1    weight: 0.001    step: 0.001    low_lim: -10    high_lim: 10    merit_type:    good_user: T    key_bound: T    key_delta: 0.01</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_create(\n    self,\n    var_name,\n    ele_name,\n    attribute,\n    universes,\n    weight,\n    step,\n    low_lim,\n    high_lim,\n    merit_type,\n    good_user,\n    key_bound,\n    key_delta,\n    *,\n    verbose=False,\n    as_dict=True,\n    raises=True,\n):\n    \"\"\"\n\n    Create a single variable\n\n    Parameters\n    ----------\n    var_name\n    ele_name\n    attribute\n    universes\n    weight\n    step\n    low_lim\n    high_lim\n    merit_type\n    good_user\n    key_bound\n    key_delta\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^\n                        {weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^\n                        {good_user}^^{key_bound}^^{key_delta}\n\n    {var_name} is something like \"kick[5]\".\n    Before using var_create, setup the appropriate v1_var array using\n    the \"pipe var_v1_create\" command.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/tao.init_optics_matching\n     args:\n       var_name: quad[1]\n       ele_name: Q1\n       attribute: L\n       universes: 1\n       weight: 0.001\n       step: 0.001\n       low_lim: -10\n       high_lim: 10\n       merit_type:\n       good_user: T\n       key_bound: T\n       key_delta: 0.01\n\n    \"\"\"\n    cmd = f\"pipe var_create {var_name}^^{ele_name}^^{attribute}^^{universes}^^{weight}^^{step}^^{low_lim}^^{high_lim}^^{merit_type}^^{good_user}^^{key_bound}^^{key_delta}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_create\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_general","title":"pytao.Tao.var_general","text":"<pre><code>var_general(*, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of all variable v1 arrays</p> <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe var_general</p> <p>Output syntax:   {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_general(self, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of all variable v1 arrays\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_general\n\n    Output syntax:\n      {v1_var name};{v1_var%v lower bound};{v1_var%v upper bound}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n\n    \"\"\"\n    cmd = \"pipe var_general\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_general\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_v1_array","title":"pytao.Tao.var_v1_array","text":"<pre><code>var_v1_array(v1_var, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of variables in a given variable v1 array</p> <p>Parameters:</p> Name Type Description Default <code>v1_var</code> required <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe var_v1_array {v1_var}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    v1_var: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_array(self, v1_var, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of variables in a given variable v1 array\n\n    Parameters\n    ----------\n    v1_var\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_v1_array {v1_var}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       v1_var: quad_k1\n\n    \"\"\"\n    cmd = f\"pipe var_v1_array {v1_var}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_v1_array\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_v1_create","title":"pytao.Tao.var_v1_create","text":"<pre><code>var_v1_create(v1_name, n_var_min, n_var_max, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Create a v1 variable structure along with associated var array.</p> <p>Parameters:</p> Name Type Description Default <code>v1_name</code> required <code>n_var_min</code> required <code>n_var_max</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe var_v1_create {v1_name} {n_var_min} {n_var_max}</p> <p>{n_var_min} and {n_var_max} are the lower and upper bounds of the var Example:   pipe var_v1_create quad_k1 0 45 This example creates a v1 var structure called \"quad_k1\" with an associated variable array that has the range [0, 45].</p> <p>Use the \"set variable\" command to set a created variable parameters. In particular, to slave a lattice parameter to a variable use the command:   set {v1_name}|ele_name = {lat_param} where {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}] Examples:   set quad_k1[2]|ele_name = 2@q01w[k1]   set quad_k1[2]|ele_name = 2@0&gt;&gt;10[k1] Note: When setting multiple variable parameters,       temporarily toggle s%global%lattice_calc_on to False   (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the partially created variable and generating unwanted error messages.</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    v1_name: quad_k1    n_var_min: 0    n_var_max: 45</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_create(\n    self, v1_name, n_var_min, n_var_max, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Create a v1 variable structure along with associated var array.\n\n    Parameters\n    ----------\n    v1_name\n    n_var_min\n    n_var_max\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_v1_create {v1_name} {n_var_min} {n_var_max}\n\n    {n_var_min} and {n_var_max} are the lower and upper bounds of the var\n    Example:\n      pipe var_v1_create quad_k1 0 45\n    This example creates a v1 var structure called \"quad_k1\" with an associated\n    variable array that has the range [0, 45].\n\n    Use the \"set variable\" command to set a created variable parameters.\n    In particular, to slave a lattice parameter to a variable use the command:\n      set {v1_name}|ele_name = {lat_param}\n    where {lat_param} is of the form {ix_uni}@{ele_name_or_location}{param_name}]\n    Examples:\n      set quad_k1[2]|ele_name = 2@q01w[k1]\n      set quad_k1[2]|ele_name = 2@0&gt;&gt;10[k1]\n    Note: When setting multiple variable parameters,\n          temporarily toggle s%global%lattice_calc_on to False\n      (\"set global lattice_calc_on = F\") to prevent Tao trying to evaluate the\n    partially created variable and generating unwanted error messages.\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       v1_name: quad_k1\n       n_var_min: 0\n       n_var_max: 45\n\n    \"\"\"\n    cmd = f\"pipe var_v1_create {v1_name} {n_var_min} {n_var_max}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_v1_create\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_v1_destroy","title":"pytao.Tao.var_v1_destroy","text":"<pre><code>var_v1_destroy(v1_datum, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Destroy a v1 var structure along with associated var sub-array.</p> <p>Parameters:</p> Name Type Description Default <code>v1_datum</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe var_v1_destroy {v1_datum}</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    v1_datum: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v1_destroy(self, v1_datum, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Destroy a v1 var structure along with associated var sub-array.\n\n    Parameters\n    ----------\n    v1_datum\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_v1_destroy {v1_datum}\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       v1_datum: quad_k1\n\n    \"\"\"\n    cmd = f\"pipe var_v1_destroy {v1_datum}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_v1_destroy\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.var_v_array","title":"pytao.Tao.var_v_array","text":"<pre><code>var_v_array(v1_var, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output list of variables for a given data_v1.</p> <p>Parameters:</p> Name Type Description Default <code>v1_var</code> required <p>Returns:</p> Type Description <code>list of dict</code> Notes <p>Command syntax:   pipe var_v_array {v1_var}</p> <p>Example:   pipe var_v_array quad_k1</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    v1_var: quad_k1</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def var_v_array(self, v1_var, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output list of variables for a given data_v1.\n\n    Parameters\n    ----------\n    v1_var\n\n    Returns\n    -------\n    list of dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe var_v_array {v1_var}\n\n    Example:\n      pipe var_v_array quad_k1\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       v1_var: quad_k1\n\n    \"\"\"\n    cmd = f\"pipe var_v_array {v1_var}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"var_v_array\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.version","title":"pytao.Tao.version","text":"<pre><code>version()\n</code></pre> <p>Get the date-coded version.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def version(self) -&gt; Optional[datetime.datetime]:\n    \"\"\"Get the date-coded version.\"\"\"\n    cmd = \"show version\"\n    return _pytao_parsers.parse_show_version(self.cmd(cmd), cmd=cmd)\n</code></pre>"},{"location":"api/tao/#pytao.Tao.wall3d_radius","title":"pytao.Tao.wall3d_radius","text":"<pre><code>wall3d_radius(ix_uni, ix_branch, s_position, angle, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output vaccum chamber wall radius for given s-position and angle in (x,y) plane. The radius is with respect to the local wall origin which may not be the (x,y) = (0,0) origin.</p> <p>Parameters:</p> Name Type Description Default <code>ix_uni</code> <code>''</code> required <code>ix_branch</code> <code>''</code> required <code>s_position</code> required <code>angle</code> required <p>Returns:</p> Type Description <code>dict</code> Notes <p>Command syntax:   pipe wall3d_radius {ix_uni}@{ix_branch} {s_position} {angle}</p> <p>Where:   {ix_uni} is a universe index. Defaults to s%global%default_universe.   {ix_branch} is a lattice branch index.   {s_position} is the s-position to evaluate at.   {angle} is the angle to evaluate at.</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def wall3d_radius(\n    self, ix_uni, ix_branch, s_position, angle, *, verbose=False, as_dict=True, raises=True\n):\n    \"\"\"\n\n    Output vaccum chamber wall radius for given s-position and angle in (x,y) plane.\n    The radius is with respect to the local wall origin which may not be the (x,y) = (0,0) origin.\n\n    Parameters\n    ----------\n    ix_uni : \"\"\n    ix_branch : \"\"\n    s_position\n    angle\n\n    Returns\n    -------\n    dict\n\n    Notes\n    -----\n    Command syntax:\n      pipe wall3d_radius {ix_uni}@{ix_branch} {s_position} {angle}\n\n    Where:\n      {ix_uni} is a universe index. Defaults to s%global%default_universe.\n      {ix_branch} is a lattice branch index.\n      {s_position} is the s-position to evaluate at.\n      {angle} is the angle to evaluate at.\n\n    \"\"\"\n    cmd = f\"pipe wall3d_radius {ix_uni}@{ix_branch} {s_position} {angle}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(\n        cmd, as_dict, raises, method_name=\"wall3d_radius\", cmd_type=\"string_list\"\n    )\n</code></pre>"},{"location":"api/tao/#pytao.Tao.wave","title":"pytao.Tao.wave","text":"<pre><code>wave(who, *, verbose=False, as_dict=True, raises=True)\n</code></pre> <p>Output Wave analysis info.</p> <p>Parameters:</p> Name Type Description Default <code>who</code> required <p>Returns:</p> Type Description <code>string_list</code> Notes <p>Command syntax:   pipe wave {who}</p> <p>Where {who} is one of:   params   loc_header   locations   plot1, plot2, plot3</p> <p>Examples:</p> <p>Example: 1  init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init  args:    who: params</p> Source code in <code>pytao/interface_commands.py</code> <pre><code>def wave(self, who, *, verbose=False, as_dict=True, raises=True):\n    \"\"\"\n\n    Output Wave analysis info.\n\n    Parameters\n    ----------\n    who\n\n    Returns\n    -------\n    string_list\n\n    Notes\n    -----\n    Command syntax:\n      pipe wave {who}\n\n    Where {who} is one of:\n      params\n      loc_header\n      locations\n      plot1, plot2, plot3\n\n    Examples\n    --------\n    Example: 1\n     init: -init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init\n     args:\n       who: params\n\n    \"\"\"\n    cmd = f\"pipe wave {who}\"\n    if verbose:\n        print(cmd)\n    return self.__execute(cmd, as_dict, raises, method_name=\"wave\", cmd_type=\"string_list\")\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced usage","text":"In\u00a0[1]: Copied! <pre># Useful for debugging\n# %load_ext autoreload\n# %autoreload 2\n\n# Nicer plots\n%config InlineBackend.figure_format = 'retina'\n</pre> # Useful for debugging # %load_ext autoreload # %autoreload 2  # Nicer plots %config InlineBackend.figure_format = 'retina' In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[3]: Copied! <pre>from pytao import Tao, TaoModel, util, run_tao\nfrom pytao.tao_ctypes.evaluate import evaluate_tao\nimport os\n</pre> from pytao import Tao, TaoModel, util, run_tao from pytao.tao_ctypes.evaluate import evaluate_tao import os In\u00a0[4]: Copied! <pre>INPUT_FILE = os.path.expandvars(\n    \"$ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init\"\n)\nassert os.path.exists(os.path.expandvars(INPUT_FILE))\n</pre> INPUT_FILE = os.path.expandvars(     \"$ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init\" ) assert os.path.exists(os.path.expandvars(INPUT_FILE)) In\u00a0[5]: Copied! <pre>M = run_tao(input_file=INPUT_FILE, ploton=False)\nM\n</pre> M = run_tao(input_file=INPUT_FILE, ploton=False) M Out[5]: <pre>&lt;pytao.tao_ctypes.core.TaoModel at 0x7fd454cda4b0&gt;</pre> In\u00a0[6]: Copied! <pre>res = evaluate_tao(\n    settings={\"space_charge_com:ds_track_step\": 0.001},\n    input_file=INPUT_FILE,\n    run_commands=[\"set global track_type=beam\"],\n    expressions=[\"lat::orbit.x[FF.PIP02A]\", \"beam::norm_emit.x[end]\"],\n    ploton=False,\n    archive_csr_wake=True,\n    beam_archive_path=\".\",\n)\nres\n</pre> res = evaluate_tao(     settings={\"space_charge_com:ds_track_step\": 0.001},     input_file=INPUT_FILE,     run_commands=[\"set global track_type=beam\"],     expressions=[\"lat::orbit.x[FF.PIP02A]\", \"beam::norm_emit.x[end]\"],     ploton=False,     archive_csr_wake=True,     beam_archive_path=\".\", ) res Out[6]: <pre>{'lat::orbit.x[FF.PIP02A]': '  0.00000000000000E+00',\n 'beam::norm_emit.x[end]': '  9.99826669212015E-07',\n 'beam_archive': '/home/runner/work/pytao/pytao/docs/examples/bmad_beam_c3f3c51ed0accf5e6aba8b76f3feab13.h5'}</pre> In\u00a0[7]: Copied! <pre>from pmd_beamphysics import ParticleGroup, particle_paths\nfrom h5py import File\n\nafile = res[\"beam_archive\"]\nh5 = File(afile, \"r\")\nppaths = particle_paths(h5)\nppaths\n</pre> from pmd_beamphysics import ParticleGroup, particle_paths from h5py import File  afile = res[\"beam_archive\"] h5 = File(afile, \"r\") ppaths = particle_paths(h5) ppaths Out[7]: <pre>['/data/00001/particles/',\n '/data/00002/particles/',\n '/data/00003/particles/',\n '/data/00004/particles/']</pre> <p>Note that csr_wake is in here</p> In\u00a0[8]: Copied! <pre>list(h5)\n</pre> list(h5) Out[8]: <pre>['csr_wake', 'data', 'expressions', 'input', 'settings']</pre> In\u00a0[9]: Copied! <pre>P = ParticleGroup(h5[ppaths[-1]])\nP.plot(\"delta_t\", \"delta_pz\", bins=200)\n</pre> P = ParticleGroup(h5[ppaths[-1]]) P.plot(\"delta_t\", \"delta_pz\", bins=200) In\u00a0[10]: Copied! <pre>os.remove(afile)\n</pre> os.remove(afile) In\u00a0[11]: Copied! <pre>M.evaluate(\"lat::orbit.x[end]\")\n</pre> M.evaluate(\"lat::orbit.x[end]\") Out[11]: <pre>'  0.00000000000000E+00'</pre> In\u00a0[12]: Copied! <pre>from pytao.misc.csr import read_csr_wake_data_h5, process_csr_wake_data\nimport numpy as np\n</pre> from pytao.misc.csr import read_csr_wake_data_h5, process_csr_wake_data import numpy as np <p>csr_wake is stored in the HDF5 file</p> In\u00a0[13]: Copied! <pre>cdat = read_csr_wake_data_h5(h5)\n</pre> cdat = read_csr_wake_data_h5(h5) <p>This is the actual data</p> In\u00a0[14]: Copied! <pre>dat = cdat[\"3:FF.BEN01\"][\"data\"]\ndat.shape\n</pre> dat = cdat[\"3:FF.BEN01\"][\"data\"] dat.shape Out[14]: <pre>(134, 40, 5)</pre> <p>This will process into a more useful form for data analysis.</p> In\u00a0[15]: Copied! <pre>pdat = process_csr_wake_data(cdat)\n\npdat[\"s_position\"]\n</pre> pdat = process_csr_wake_data(cdat)  pdat[\"s_position\"] Out[15]: <pre>array([0.   , 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008,\n       0.009, 0.01 , 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017,\n       0.018, 0.019, 0.02 , 0.021, 0.022, 0.023, 0.024, 0.025, 0.026,\n       0.027, 0.028, 0.029, 0.03 , 0.031, 0.032, 0.033, 0.034, 0.035,\n       0.036, 0.037, 0.038, 0.039, 0.04 , 0.041, 0.042, 0.043, 0.044,\n       0.045, 0.046, 0.047, 0.048, 0.049, 0.05 , 0.051, 0.052, 0.053,\n       0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.06 , 0.06 , 0.061,\n       0.062, 0.063, 0.064, 0.065, 0.066, 0.067, 0.068, 0.069, 0.07 ,\n       0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079,\n       0.08 , 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088,\n       0.089, 0.09 , 0.091, 0.092, 0.093, 0.094, 0.095, 0.096, 0.097,\n       0.098, 0.099, 0.1  , 0.101, 0.102, 0.103, 0.104, 0.105, 0.106,\n       0.107, 0.108, 0.109, 0.11 , 0.111, 0.112, 0.113, 0.114, 0.115,\n       0.116, 0.117, 0.118, 0.119, 0.12 , 0.121, 0.122, 0.123, 0.124,\n       0.125, 0.126, 0.127, 0.128, 0.129, 0.13 , 0.131, 0.132, 0.133,\n       0.134, 0.135, 0.136, 0.137, 0.138, 0.139, 0.14 , 0.141, 0.142,\n       0.143, 0.144, 0.145, 0.146, 0.147, 0.148, 0.149, 0.15 , 0.151,\n       0.152, 0.153, 0.154, 0.155, 0.156, 0.157, 0.158, 0.159, 0.16 ,\n       0.161, 0.162, 0.163, 0.164, 0.165, 0.166, 0.167, 0.168, 0.169,\n       0.17 , 0.171, 0.172, 0.173, 0.174, 0.175, 0.176, 0.177, 0.178,\n       0.179, 0.18 , 0.181, 0.182, 0.183, 0.184, 0.185, 0.186, 0.187,\n       0.188, 0.189, 0.19 , 0.191, 0.192, 0.193, 0.193, 0.194, 0.195,\n       0.196, 0.197, 0.198, 0.199, 0.2  , 0.201, 0.202, 0.203, 0.204,\n       0.205, 0.206, 0.207, 0.208, 0.209, 0.21 , 0.211, 0.212, 0.213,\n       0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.22 , 0.221, 0.222,\n       0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.23 , 0.231,\n       0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.24 ,\n       0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249,\n       0.25 , 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258,\n       0.259, 0.26 , 0.261, 0.262, 0.263, 0.263, 0.264, 0.265, 0.266,\n       0.267, 0.268, 0.269, 0.27 , 0.271, 0.272, 0.273, 0.274, 0.275,\n       0.276, 0.277, 0.278, 0.279, 0.28 , 0.281, 0.282, 0.283, 0.284,\n       0.285, 0.286, 0.287, 0.288, 0.289, 0.29 , 0.291, 0.292, 0.293,\n       0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.3  , 0.301, 0.302,\n       0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.31 , 0.311,\n       0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.32 ,\n       0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329,\n       0.33 , 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338,\n       0.339, 0.34 , 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347,\n       0.348, 0.349, 0.35 , 0.351, 0.352, 0.353, 0.354, 0.355, 0.356,\n       0.357, 0.358, 0.359, 0.36 , 0.361, 0.362, 0.363, 0.364, 0.365,\n       0.366, 0.367, 0.368, 0.369, 0.37 , 0.371, 0.372, 0.373, 0.374,\n       0.375, 0.376, 0.377, 0.378, 0.379, 0.38 , 0.381, 0.382, 0.383,\n       0.384, 0.385, 0.385, 0.386, 0.387, 0.388, 0.389, 0.39 , 0.391,\n       0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.4  ,\n       0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409,\n       0.41 , 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418,\n       0.419, 0.42 , 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427,\n       0.428, 0.429, 0.43 , 0.431, 0.432, 0.433, 0.434, 0.435, 0.436,\n       0.437, 0.438, 0.439, 0.44 , 0.441, 0.442, 0.443, 0.444, 0.445])</pre> In\u00a0[16]: Copied! <pre>from pytao.misc.csr_plot import plot_csr_wake, plot_csr_stats\nfrom pytao.misc.csr import csr_wake_stats_at_step\n</pre> from pytao.misc.csr_plot import plot_csr_wake, plot_csr_stats from pytao.misc.csr import csr_wake_stats_at_step In\u00a0[17]: Copied! <pre>from ipywidgets import interact\n\n\ndef plot1(step=0):\n    plot_csr_wake(pdat, step=step)\n\n\nnstep = len(pdat[\"z\"])\ninteract(plot1, step=(0, nstep - 1, 1));\n</pre> from ipywidgets import interact   def plot1(step=0):     plot_csr_wake(pdat, step=step)   nstep = len(pdat[\"z\"]) interact(plot1, step=(0, nstep - 1, 1)); <p>Check the s-position for each step</p> In\u00a0[18]: Copied! <pre>plt.plot(pdat[\"s_position\"], marker=\".\");\n</pre> plt.plot(pdat[\"s_position\"], marker=\".\"); <p>Another convenience plot</p> In\u00a0[19]: Copied! <pre>plot_csr_stats(pdat)\n</pre> plot_csr_stats(pdat) <pre>(450, 4)\n</pre> <p>Cleanup</p> In\u00a0[20]: Copied! <pre>os.remove(\"wake.dat\")\n</pre> os.remove(\"wake.dat\")"},{"location":"examples/advanced/#advanced-usage","title":"Advanced usage\u00b6","text":""},{"location":"examples/advanced/#inititialize-tao","title":"Inititialize Tao\u00b6","text":""},{"location":"examples/advanced/#run_tao","title":"run_tao\u00b6","text":""},{"location":"examples/advanced/#evaluate_tao","title":"evaluate_tao\u00b6","text":""},{"location":"examples/advanced/#evaluate-examples","title":"evaluate examples\u00b6","text":""},{"location":"examples/advanced/#csr_wake-diagnostic-file","title":"csr_wake diagnostic file\u00b6","text":""},{"location":"examples/basic/","title":"PyTao Basics","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>tao = Tao(\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/cesr/tao.init -noplot\")\n</pre> tao = Tao(\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/cesr/tao.init -noplot\") In\u00a0[3]: Copied! <pre>tao.cmd(\"show lat 1:10\")\n</pre> tao.cmd(\"show lat 1:10\") Out[3]: <pre>['# Values shown are for the Downstream End of each Element (Girder at ref point):',\n '# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track',\n '#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State',\n '      1  IP_L0         Marker                0.000   0.000    0.95   0.000  -0.00  -0.017    0.02   0.000   0.00   0.001  Alive',\n '      2  CLEO_SOL#3    Solenoid              0.622   0.622    1.34   0.093  -0.02   1.470   21.81   0.244   0.00   0.041  Alive',\n '      3  DET_00W       Marker                0.622   0.000    1.34   0.093  -0.02   1.470   21.81   0.244   0.00   0.041  Alive',\n '      4  CLEO_SOL#4    Solenoid              0.638   0.016    1.36   0.094  -0.02   1.507   22.92   0.244   0.00   0.043  Alive',\n '      5  Q00W\\\\CLEO_SOL Sol_Quad              1.755   1.117    7.73   0.160  -0.09   5.505   88.01   0.247  -0.01   0.486  Alive',\n '      6  Q00W#1        Quadrupole            2.163   0.408   15.96   0.166  -0.13   8.151   76.38   0.248  -0.01   0.717  Alive',\n '      7  D003          Drift                 2.493   0.331   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.931  Alive',\n '      8  DET_01W       Marker                2.493   0.000   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.931  Alive',\n '      9  D004          Drift                 2.924   0.431   45.79   0.171  -0.22  14.030   42.12   0.250  -0.02   1.209  Alive',\n '     10  Q01W          Quadrupole            3.874   0.950   66.94   0.173  -0.26  16.851   28.95   0.255  -0.02   1.213  Alive',\n '# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track',\n '#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State',\n '# Values shown are for the Downstream End of each Element (Girder at ref point):']</pre> <p>Send a list of commands. This returns the corresponding list of outputs:</p> In\u00a0[4]: Copied! <pre>tao.cmds([\"set lattice model=design\", \"set ele Q00W x_offset = 1e-6\"])\n</pre> tao.cmds([\"set lattice model=design\", \"set ele Q00W x_offset = 1e-6\"]) Out[4]: <pre>[[], []]</pre> <p>This is an alternative way to send commands to Tao directly in the jupyter notebook, using the %%tao magic. Multiple lines can be executed.</p> In\u00a0[5]: Copied! <pre>%%tao\nsho lat 1:10\nsho ele 4\n</pre> %%tao sho lat 1:10 sho ele 4 <pre>-----------------\nTao&gt; sho lat 1:10\n# Values shown are for the Downstream End of each Element (Girder at ref point):\n# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n      1  IP_L0         Marker                0.000   0.000    0.95   0.000  -0.00  -0.018    0.02   0.000   0.00   0.001  Alive\n      2  CLEO_SOL#3    Solenoid              0.622   0.622    1.34   0.093  -0.02   1.469   21.81   0.244   0.00   0.042  Alive\n      3  DET_00W       Marker                0.622   0.000    1.34   0.093  -0.02   1.469   21.81   0.244   0.00   0.042  Alive\n      4  CLEO_SOL#4    Solenoid              0.638   0.016    1.36   0.094  -0.02   1.507   22.92   0.244   0.00   0.044  Alive\n      5  Q00W\\CLEO_SOL Sol_Quad              1.755   1.117    7.73   0.160  -0.09   5.505   88.01   0.247  -0.01   0.487  Alive\n      6  Q00W#1        Quadrupole            2.163   0.408   15.96   0.166  -0.13   8.151   76.38   0.248  -0.01   0.719  Alive\n      7  D003          Drift                 2.493   0.331   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.932  Alive\n      8  DET_01W       Marker                2.493   0.000   27.02   0.169  -0.17  10.705   60.25   0.249  -0.02   0.932  Alive\n      9  D004          Drift                 2.924   0.431   45.79   0.171  -0.22  14.030   42.12   0.250  -0.02   1.210  Alive\n     10  Q01W          Quadrupole            3.874   0.950   66.94   0.173  -0.26  16.851   28.95   0.255  -0.02   1.213  Alive\n# Index  name          key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                                a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n# Values shown are for the Downstream End of each Element (Girder at ref point):\n--------------\nTao&gt; sho ele 4\nElement # 4\nElement Name: CLEO_SOL#4\nKey: Solenoid\nS_start, S:      0.622301,      0.637956\nRef_time_start, Ref_time:  2.075773E-09,  2.127992E-09\n\nAttribute values [Only non-zero values shown]:\n    1  L                           =  1.5655000E-02 m        31  L_SOFT_EDGE                 =  0.0000000E+00 m\n    5  KS                          = -8.5023386E-02 1/m      49  BS_FIELD                    =  1.5000000E+00 T\n   10  FRINGE_TYPE                 =  None (1)               11  FRINGE_AT                   =  No_End (4)\n   13  SPIN_FRINGE_ON              =  T (1)\n   17  STATIC_LINEAR_MAP           =  F (0)\n   47  PTC_CANONICAL_COORDS        =  T (1)\n   53  P0C                         =  5.2890000E+09 eV           BETA                        =  1.0000000E+00\n   54  E_TOT                       =  5.2890000E+09 eV           GAMMA                       =  1.0350315E+04\n   64  REF_TIME_START              =  2.0757727E-09 sec      50  DELTA_REF_TIME              =  5.2219459E-11 sec\n   67  DS_STEP                     =  2.0000000E-01 m        66  NUM_STEPS                   = 1\n\n       TRACKING_METHOD              =  Bmad_Standard             APERTURE_AT                =  No_Aperture\n       MAT6_CALC_METHOD             =  Auto                      APERTURE_TYPE              =  Rectangular\n       SPIN_TRACKING_METHOD         =  Tracking                  OFFSET_MOVES_APERTURE      =  F\n       PTC_INTEGRATION_TYPE         =  Matrix_Kick               SYMPLECTIFY                =  F\n       CSR_METHOD                   =  Off                       FIELD_MASTER               =  F\n       SPACE_CHARGE_METHOD          =  Off                       LONGITUDINAL ORIENTATION   =       1\n       FIELD_CALC                   =  Refer_to_Lords.           REF_SPECIES                =  Electron\n\nSlave_status: Super_Slave\nAssociated Super_Lord(s):\n   Index   Name                             Type\n     872   CLEO_SOL                         Solenoid\n\nLord_status:  Not_a_Lord\n\nTwiss at end of element:\n                          A              B            Cbar                        C_mat\n  Beta (m)         1.36491295    22.91993494  |  -0.11412808   0.00652694     -0.08500116   0.03650637\n  Alpha           -0.65684269   -35.88090507  |  -0.16215590   0.00350748     -0.09239803   0.03194118\n  Gamma (1/m)      1.04874257    56.21479084  |   Gamma_c =   0.99967091       Mode_Flip = F\n  Phi (rad)        0.59356744     1.53299607            X              Y              Z\n  Eta (m)         -0.02444701     0.00048948    -0.02453413     0.00007931     0.00000000\n  Etap            -0.03262121    -0.00146703    -0.03270256    -0.00198053     1.00000000\n  dEta/ds         -0.03501130    -0.00147091    -0.03509156    -0.00204828     1.00000000\n  Sigma            0.00052596     0.00002030     0.00000000     0.00000000\n\nTracking: Electron,   State: Alive\n         Position[mm] Momentum[1E-3]        Spin   |\n  X:       1.50654353     2.38873277               | t_particle [sec]:        2.12933095E-09  E_tot: 5.28896E+09\n  Y:       0.04371849     0.06773493               | t_part-t_ref [sec]:      1.33877913E-12  PC:    5.28896E+09\n  Z:      -0.40135588    -0.00717214               | (t_ref-t_part)*Vel [m]: -4.01355883E-04  Beta:  0.999999995\n</pre> In\u00a0[6]: Copied! <pre>%%tao\nhelp python\n</pre> %%tao help python <pre>----------------\nTao&gt; help python\n\"Python\" is the old name for the \"pipe\" command. For backwards compatibility,\nthe old name is still accepted.\n\n</pre> <p>This data is returned as specially formatted lists</p> In\u00a0[7]: Copied! <pre>tao.cmd(\"python orbit_at_s end\")\n</pre> tao.cmd(\"python orbit_at_s end\") Out[7]: <pre>['x;REAL;F; -1.77254138867641E-05',\n 'px;REAL;F;  2.39054981358023E-03',\n 'y;REAL;F;  9.76400538044794E-07',\n 'py;REAL;F;  2.93567715474154E-06',\n 'z;REAL;F; -3.99533038482285E-04',\n 'pz;REAL;F; -7.17213865140138E-06',\n 'spin;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00;  0.00000000000000E+00',\n 'field;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00',\n 'phase;REAL_ARR;F;  0.00000000000000E+00;  0.00000000000000E+00',\n 's;REAL;F;  7.68426421416168E+02',\n 't;REAL;F;  2.56319600137482E-06',\n 'charge;REAL;F;  0.00000000000000E+00',\n 'dt_ref;REAL;F;  0.00000000000000E+00',\n 'p0c;REAL;F;  5.28899997531481E+09',\n 'beta;REAL;F;  9.99999995332663E-01',\n 'ix_ele;INT;F;868',\n 'state;STR;F;Alive',\n 'direction;INT;F;1',\n 'species;SPECIES;F;Electron',\n 'location;STR;F;Downstream_End']</pre> <p>Some commands have 'array_out' options. For example, this seems to return nothing:</p> In\u00a0[8]: Copied! <pre>tao.cmd(\"python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x\")\n</pre> tao.cmd(\"python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x\") Out[8]: <pre>[]</pre> <p>But calling <code>.cmd_real</code> on the same command will get the data from an internal pointer:</p> In\u00a0[9]: Copied! <pre>tao.cmd_real(\"python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x\")\n</pre> tao.cmd_real(\"python lat_list -array_out 1@0&gt;&gt;Q*|model orbit.floor.x\") Out[9]: <pre>array([ 0.00000000e+00,  5.50519658e-03,  8.15062520e-03,  1.68506858e-02,\n        1.30498325e-02, -1.28475441e-01, -6.17368446e-01, -1.63573127e+00,\n       -3.15361610e+00, -4.96008216e+00, -8.44394575e+00, -1.25353213e+01,\n       -1.53643077e+01, -1.93160719e+01, -2.35334256e+01, -2.86596036e+01,\n       -3.40012341e+01, -4.11157702e+01, -4.73379418e+01, -5.39309791e+01,\n       -6.08761235e+01, -6.66395259e+01, -7.38887343e+01, -8.14004767e+01,\n       -8.91380421e+01, -9.70602503e+01, -1.07067453e+02, -1.15219118e+02,\n       -1.23415239e+02, -1.31835984e+02, -1.39984608e+02, -1.48267474e+02,\n       -1.57243533e+02, -1.65204340e+02, -1.72728163e+02, -1.80184446e+02,\n       -1.85357654e+02, -1.92035945e+02, -2.00803297e+02, -2.06870811e+02,\n       -2.12665465e+02, -2.18176442e+02, -2.23048894e+02, -2.27424214e+02,\n       -2.31268351e+02, -2.34552350e+02, -2.35722776e+02, -2.38140768e+02,\n       -2.39786174e+02, -2.41460795e+02, -2.42244506e+02, -2.42601932e+02,\n       -2.42642705e+02, -2.42650645e+02, -2.42653709e+02, -2.42654860e+02,\n       -2.42659283e+02, -2.42665715e+02, -2.42598206e+02, -2.42184674e+02,\n       -2.41366882e+02, -2.39606403e+02, -2.37970183e+02, -2.35481963e+02,\n       -2.34317756e+02, -2.30993039e+02, -2.27125231e+02, -2.22727551e+02,\n       -2.17816004e+02, -2.12280141e+02, -2.06437555e+02, -2.00332917e+02,\n       -1.91531576e+02, -1.84820355e+02, -1.79653411e+02, -1.72176809e+02,\n       -1.64644374e+02, -1.56674250e+02, -1.47685973e+02, -1.39396225e+02,\n       -1.31238484e+02, -1.22815238e+02, -1.14621366e+02, -1.06478606e+02,\n       -9.64783788e+01, -8.85696847e+01, -8.08418091e+01, -7.33402427e+01,\n       -6.61118703e+01, -6.03400294e+01, -5.34245487e+01, -4.68515948e+01,\n       -4.06754335e+01, -3.36162850e+01, -2.82979320e+01, -2.32077253e+01,\n       -1.88775830e+01, -1.50782620e+01, -1.22578107e+01, -8.16225874e+00,\n       -4.68317227e+00, -2.92445680e+00, -1.48689125e+00, -5.48022494e-01,\n       -1.20827640e-01, -1.39453465e-02, -1.41528754e-02,  1.91718062e-06,\n       -5.55949922e-03, -1.54020758e-03])</pre> In\u00a0[10]: Copied! <pre>tao.orbit_at_s(s_offset=1.2)\n</pre> tao.orbit_at_s(s_offset=1.2) Out[10]: <pre>{'x': 0.00310868994973798,\n 'px': 0.00344601640995951,\n 'y': 0.0001832117523991,\n 'py': 0.00024895232511811,\n 'z': -0.000403684038664595,\n 'pz': -7.17213865037154e-06,\n 'spin': array([0., 0., 0.]),\n 'field': array([0., 0.]),\n 'phase': array([0., 0.]),\n 's': 1.2,\n 't': 4.00411570607714e-09,\n 'charge': 0.0,\n 'dt_ref': 0.0,\n 'p0c': 5288999975.31481,\n 'beta': 0.999999995332663,\n 'ix_ele': 5,\n 'state': 'Alive',\n 'direction': 1,\n 'species': 'Electron',\n 'location': 'Inside'}</pre> <p>Some commands return arrays:</p> In\u00a0[11]: Copied! <pre>tao.evaluate(\"data::cbar.11[1:10]|model\")\n</pre> tao.evaluate(\"data::cbar.11[1:10]|model\") Out[11]: <pre>array([ 2.81129919e-03, -1.06243941e-03,  1.37712949e-04,  3.08052132e-04,\n       -3.66410982e-04, -3.42737812e-04, -9.80307124e-06,  1.28290108e-03,\n        2.66261121e-03,  2.68374458e-03])</pre> In\u00a0[12]: Copied! <pre>s = tao.lat_list(\"*\", \"ele.s\", verbose=True)\ns[0:5]\n</pre> s = tao.lat_list(\"*\", \"ele.s\", verbose=True) s[0:5] <pre>pipe lat_list -array_out -track_only @&gt;&gt;*|model ele.s\n</pre> Out[12]: <pre>array([0.      , 0.      , 0.622301, 0.622301, 0.637956])</pre> <p>These particulars keys will return integers:</p> In\u00a0[13]: Copied! <pre>state = tao.lat_list(\"*\", \"orbit.state\")\nix = tao.lat_list(\"*\", \"ele.ix_ele\")\nstate.dtype, ix.dtype\n</pre> state = tao.lat_list(\"*\", \"orbit.state\") ix = tao.lat_list(\"*\", \"ele.ix_ele\") state.dtype, ix.dtype Out[13]: <pre>(dtype('&lt;i4'), dtype('&lt;i4'))</pre> <p>And this one will return a list of strings:</p> In\u00a0[14]: Copied! <pre>names = tao.lat_list(\"*\", \"ele.name\")\nnames[0:5]\n</pre> names = tao.lat_list(\"*\", \"ele.name\") names[0:5] Out[14]: <pre>['BEGINNING', 'IP_L0', 'CLEO_SOL#3', 'DET_00W', 'CLEO_SOL#4']</pre> In\u00a0[15]: Copied! <pre>%config InlineBackend.figure_format = 'retina'\nimport matplotlib.pyplot as plt\nimport numpy as np\n</pre> %config InlineBackend.figure_format = 'retina' import matplotlib.pyplot as plt import numpy as np <p>Simple plot of this data</p> In\u00a0[16]: Copied! <pre>plt.plot(tao.lat_list(\"*\", \"ele.s\"), tao.lat_list(\"*\", \"orbit.vec.1\"), marker=\".\");\n</pre> plt.plot(tao.lat_list(\"*\", \"ele.s\"), tao.lat_list(\"*\", \"orbit.vec.1\"), marker=\".\"); <p>Be careful with the flags. The defaults are:</p> In\u00a0[17]: Copied! <pre>plt.plot(tao.lat_list(\"*\", \"ele.s\", flags=\"-array_out -track_only\"));\n</pre> plt.plot(tao.lat_list(\"*\", \"ele.s\", flags=\"-array_out -track_only\")); <p><code>-index_order</code> will return</p> In\u00a0[18]: Copied! <pre>plt.plot(tao.lat_list(\"*\", \"ele.s\", flags=\"-array_out -index_order\"));\n</pre> plt.plot(tao.lat_list(\"*\", \"ele.s\", flags=\"-array_out -index_order\")); In\u00a0[19]: Copied! <pre>from pytao import interface_commands\n\nall_cmds = [name for name in dir(Tao) if not name.startswith(\"_\")]\nfor cmd in all_cmds:\n    print(cmd)\n</pre> from pytao import interface_commands  all_cmds = [name for name in dir(Tao) if not name.startswith(\"_\")] for cmd in all_cmds:     print(cmd) <pre>beam\nbeam_init\nbmad_com\nbokeh\nbranch1\nbuilding_wall_graph\nbuilding_wall_list\nbuilding_wall_point\nbuilding_wall_section\nbunch1\nbunch_comb\nbunch_data\nbunch_params\ncmd\ncmd_integer\ncmd_real\ncmds\nconstraints\nda_aperture\nda_params\ndata\ndata_d1_array\ndata_d2\ndata_d2_array\ndata_d2_create\ndata_d2_destroy\ndata_d_array\ndata_parameter\ndata_set_design_value\ndatum_create\ndatum_has_ele\nderivative\nele_ac_kicker\nele_cartesian_map\nele_chamber_wall\nele_control_var\nele_cylindrical_map\nele_elec_multipoles\nele_floor\nele_gen_attribs\nele_gen_grad_map\nele_grid_field\nele_head\nele_lord_slave\nele_mat6\nele_methods\nele_multipoles\nele_orbit\nele_param\nele_photon\nele_spin_taylor\nele_taylor\nele_twiss\nele_wake\nele_wall3d\nem_field\nenum\nevaluate\nfloor_orbit\nfloor_plan\nget_output\nglobal_opti_de\nglobal_optimization\nhelp\ninit\ninit_output\ninum\nlast_output\nlat_branch_list\nlat_calc_done\nlat_ele_list\nlat_list\nlat_param_units\nmatplotlib\nmatrix\nmerit\norbit_at_s\nplace_buffer\nplot\nplot1\nplot_curve\nplot_curve_manage\nplot_field\nplot_graph\nplot_graph_manage\nplot_histogram\nplot_lat_layout\nplot_line\nplot_list\nplot_manager\nplot_page\nplot_symbol\nplot_template_manage\nplot_transfer\nptc_com\nregister_cell_magic\nreset_output\nring_general\nshape_list\nshape_manage\nshape_pattern_list\nshape_pattern_manage\nshape_pattern_point_manage\nshape_set\nshow\nspace_charge_com\nspecies_to_int\nspecies_to_str\nspin_invariant\nspin_polarization\nspin_resonance\nsuper_universe\ntao_global\ntaylor_map\ntwiss_at_s\nuniverse\nupdate_plot_shapes\nvar\nvar_create\nvar_general\nvar_v1_array\nvar_v1_create\nvar_v1_destroy\nvar_v_array\nversion\nwall3d_radius\nwave\n</pre> <p>There are many commands:</p> In\u00a0[20]: Copied! <pre>len(all_cmds)\n</pre> len(all_cmds) Out[20]: <pre>127</pre> <p>Each has documentation and an example associated with it:</p> In\u00a0[21]: Copied! <pre>tao.data_d2?\n</pre> tao.data_d2? In\u00a0[22]: Copied! <pre>tao2 = Tao(\n    \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot\"\n)\n</pre> tao2 = Tao(     \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot\" ) <p>but internally connects to:</p> In\u00a0[23]: Copied! <pre>tao.lat_list(\"*\", \"ele.name\")\n</pre> tao.lat_list(\"*\", \"ele.name\") Out[23]: <pre>['BEGINNING',\n 'MAR.CSR',\n 'FF.PIP00B',\n 'FF.BEN01',\n 'FF.PIP01',\n 'FF.BEN02',\n 'FF.PIP02A',\n 'MAR.END',\n 'END']</pre> In\u00a0[24]: Copied! <pre>stats = tao.bunch_params(\"end\")\nstats.keys()\n</pre> stats = tao.bunch_params(\"end\") stats.keys() Out[24]: <pre>dict_keys(['twiss_beta_x', 'twiss_alpha_x', 'twiss_gamma_x', 'twiss_phi_x', 'twiss_eta_x', 'twiss_etap_x', 'twiss_sigma_x', 'twiss_sigma_p_x', 'twiss_emit_x', 'twiss_norm_emit_x', 'twiss_beta_y', 'twiss_alpha_y', 'twiss_gamma_y', 'twiss_phi_y', 'twiss_eta_y', 'twiss_etap_y', 'twiss_sigma_y', 'twiss_sigma_p_y', 'twiss_emit_y', 'twiss_norm_emit_y', 'twiss_beta_z', 'twiss_alpha_z', 'twiss_gamma_z', 'twiss_phi_z', 'twiss_eta_z', 'twiss_etap_z', 'twiss_sigma_z', 'twiss_sigma_p_z', 'twiss_emit_z', 'twiss_norm_emit_z', 'twiss_beta_a', 'twiss_alpha_a', 'twiss_gamma_a', 'twiss_phi_a', 'twiss_eta_a', 'twiss_etap_a', 'twiss_sigma_a', 'twiss_sigma_p_a', 'twiss_emit_a', 'twiss_norm_emit_a', 'twiss_beta_b', 'twiss_alpha_b', 'twiss_gamma_b', 'twiss_phi_b', 'twiss_eta_b', 'twiss_etap_b', 'twiss_sigma_b', 'twiss_sigma_p_b', 'twiss_emit_b', 'twiss_norm_emit_b', 'twiss_beta_c', 'twiss_alpha_c', 'twiss_gamma_c', 'twiss_phi_c', 'twiss_eta_c', 'twiss_etap_c', 'twiss_sigma_c', 'twiss_sigma_p_c', 'twiss_emit_c', 'twiss_norm_emit_c', 'sigma_11', 'sigma_12', 'sigma_13', 'sigma_14', 'sigma_15', 'sigma_16', 'sigma_21', 'sigma_22', 'sigma_23', 'sigma_24', 'sigma_25', 'sigma_26', 'sigma_31', 'sigma_32', 'sigma_33', 'sigma_34', 'sigma_35', 'sigma_36', 'sigma_41', 'sigma_42', 'sigma_43', 'sigma_44', 'sigma_45', 'sigma_46', 'sigma_51', 'sigma_52', 'sigma_53', 'sigma_54', 'sigma_55', 'sigma_56', 'sigma_61', 'sigma_62', 'sigma_63', 'sigma_64', 'sigma_65', 'sigma_66', 'rel_min_1', 'rel_max_1', 'centroid_vec_1', 'rel_min_2', 'rel_max_2', 'centroid_vec_2', 'rel_min_3', 'rel_max_3', 'centroid_vec_3', 'rel_min_4', 'rel_max_4', 'centroid_vec_4', 'rel_min_5', 'rel_max_5', 'centroid_vec_5', 'rel_min_6', 'rel_max_6', 'centroid_vec_6', 'centroid_t', 'centroid_p0c', 'centroid_beta', 'ix_ele', 'direction', 'species', 'location', 's', 't', 'sigma_t', 'charge_live', 'n_particle_tot', 'n_particle_live', 'n_particle_lost_in_ele', 'beam_saved'])</pre> <p>Array data:</p> In\u00a0[25]: Copied! <pre>x = tao.bunch1(\"end\", coordinate=\"x\")\npx = tao.bunch1(\"end\", coordinate=\"px\")\nplt.scatter(x, px);\n</pre> x = tao.bunch1(\"end\", coordinate=\"x\") px = tao.bunch1(\"end\", coordinate=\"px\") plt.scatter(x, px); <p>The state will be returned as an integer array.</p> In\u00a0[26]: Copied! <pre>state = tao.bunch1(\"end\", coordinate=\"state\")\nstate.dtype\n</pre> state = tao.bunch1(\"end\", coordinate=\"state\") state.dtype Out[26]: <pre>dtype('&lt;i4')</pre> In\u00a0[27]: Copied! <pre>from pmd_beamphysics import ParticleGroup\n</pre> from pmd_beamphysics import ParticleGroup <p>This data is suitable for the <code>ParticleGroup</code> class</p> In\u00a0[28]: Copied! <pre>data = tao.bunch_data(\"end\")\ndata.keys()\n</pre> data = tao.bunch_data(\"end\") data.keys() Out[28]: <pre>dict_keys(['x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'])</pre> In\u00a0[29]: Copied! <pre>P = ParticleGroup(data=data)\n\nP.plot(\"x\", \"px\")\n</pre> P = ParticleGroup(data=data)  P.plot(\"x\", \"px\") <p>Tao's write format is already in the openPMD-beamphysics, so particles can be written and read in this way as well.</p> In\u00a0[30]: Copied! <pre>tao.cmd(\"write beam -at end test.h5\")\n</pre> tao.cmd(\"write beam -at end test.h5\") Out[30]: <pre>['[INFO] tao_write_cmd:', '    Written: test.h5']</pre> In\u00a0[31]: Copied! <pre>P2 = ParticleGroup(\"test.h5\")\nP2.plot(\"x\", \"px\")\n</pre> P2 = ParticleGroup(\"test.h5\") P2.plot(\"x\", \"px\") In\u00a0[32]: Copied! <pre># Cleanup\n!rm test.h5\n</pre> # Cleanup !rm test.h5 In\u00a0[33]: Copied! <pre>tao.lat_list(\"*\", \"ele.s\")\n</pre> tao.lat_list(\"*\", \"ele.s\") Out[33]: <pre>array([0.   , 0.   , 0.06 , 0.193, 0.263, 0.385, 0.445, 0.445, 0.445])</pre> In\u00a0[34]: Copied! <pre>try:\n    tao.var(\"foobar\")\nexcept Exception as ex:\n    print(\"Exception handled:\", ex)\n</pre> try:     tao.var(\"foobar\") except Exception as ex:     print(\"Exception handled:\", ex) <pre>Exception handled: Command: python var foobar  causes error: ERROR detected: [ERROR | 2024-DEC-19 01:21:31] tao_pipe_cmd:\n    \"pipe var foobar\": Not a valid variable name\nINVALID\n</pre> <p>This suppresses the exceptions, returning the error text:</p> In\u00a0[35]: Copied! <pre>tao.cmd(\"invalid_command\", raises=False)\n</pre> tao.cmd(\"invalid_command\", raises=False) Out[35]: <pre>['[ERROR | 2024-DEC-19 01:21:31] tao_command:',\n '    UNRECOGNIZED COMMAND: invalid_command']</pre> In\u00a0[36]: Copied! <pre>import logging\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n</pre> import logging import sys  logging.basicConfig(stream=sys.stdout, level=logging.DEBUG) In\u00a0[37]: Copied! <pre>tao.cmd(\"sho ele 2\");\n</pre> tao.cmd(\"sho ele 2\"); <pre>DEBUG:pytao.tao_ctypes.core:Tao&gt; sho ele 2\n</pre> In\u00a0[38]: Copied! <pre>!rm csr_wake.dat\n</pre> !rm csr_wake.dat <pre>rm: cannot remove 'csr_wake.dat': No such file or directory\r\n</pre>"},{"location":"examples/basic/#pytao-basics","title":"PyTao Basics\u00b6","text":""},{"location":"examples/basic/#inititialize-tao","title":"Inititialize Tao\u00b6","text":"<p><code>Tao</code> is the basic object. Anything used to initialize Tao on the command line can be used to initialize a Tao object</p>"},{"location":"examples/basic/#send-a-command","title":"Send a command\u00b6","text":"<p>Anything that you would normally type at a Tao&gt; prompt can be sent as a string. The return is a list of output strings. To send a command:</p>"},{"location":"examples/basic/#jupyter-magic-tao","title":"Jupyter magic %%tao\u00b6","text":""},{"location":"examples/basic/#interface-commands","title":"Interface commands\u00b6","text":"<p>Output above from the <code>show</code> command is designed to be human-readable. In general you should not try to parse these strings for data. For data, Tao has a special set of commands to send back data suitable for parsing in Python (or other software).</p> <p>Below are the raw commands.</p>"},{"location":"examples/basic/#tao-method-commands","title":"Tao method commands\u00b6","text":"<p>For convenience, all of these commands are available as methods of the Tao class, and automatically parse the output.</p> <p>For example, to get the orbit at an <code>s</code> position:</p>"},{"location":"examples/basic/#lat_list","title":"lat_list\u00b6","text":"<p><code>lat_list</code> can be used to efficiently extract array data. By default this returns an array of floats:</p>"},{"location":"examples/basic/#all-method-commands","title":"All method commands\u00b6","text":"<p>There are many method commands. Please explore the documentation to find the ones that will best suit your needs.</p>"},{"location":"examples/basic/#other-tao-instances","title":"Other Tao instances\u00b6","text":"<p>Unfortunately there can only be one Tao instance per process, because the internal structures are held in memory and accessed via ctypes. So this will replace the current Tao session in memory.</p> <p>This looks like a new object:</p>"},{"location":"examples/basic/#bunch-data","title":"Bunch data\u00b6","text":"<p>This example has bunch data. There are three methods:</p> <ul> <li><p><code>tao.bunch_params</code> to get a dict of statistical data</p> </li> <li><p><code>tao.bunch1</code> to get coordinate data arrays</p> </li> <li><p><code>tao.bunch_data</code> to get a dict of many coordinate arrays. These can be used to instantiate a ParticleGroup object from the openPMD-beamphysics package.</p> </li> </ul> <p>Statistical data:</p>"},{"location":"examples/basic/#particlegroup-from-openpmd-beamphysics","title":"ParticleGroup from openPMD-beamphysics\u00b6","text":"<p>openPMD-beamphysics is an external package that can be useful for further bunch analysis, plotting, and conversion.</p> <p>https://github.com/ChristopherMayes/openPMD-beamphysics</p> <p>Here is example usage to extract bunch data and instantiate as a <code>ParticleGroup</code> object.</p> <p>Note that the momentum units in openPMD-beamphysics are in eV/c, whereas Bmad's momenta are normalized by a refrence momentum.</p>"},{"location":"examples/basic/#error-handling-and-debugging","title":"Error handling and Debugging\u00b6","text":"<p>All methods have a <code>raises=True</code> option. This will raise a RuntimeError if any errors are seen from Tao.</p>"},{"location":"examples/basic/#logging","title":"Logging\u00b6","text":"<p>All input commands are recorded as debug messages using standard Python logging.</p> <p>Enable stdout to see the log messages:</p>"},{"location":"examples/basic/#cleanup","title":"Cleanup\u00b6","text":""},{"location":"examples/bunch/","title":"Bunch Commands","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[3]: Copied! <pre>tao = Tao(\n    \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot\"\n)\n</pre> tao = Tao(     \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/csr_beam_tracking/tao.init -noplot\" ) In\u00a0[4]: Copied! <pre>stats = tao.bunch_params(\"end\")\nstats\n</pre> stats = tao.bunch_params(\"end\") stats Out[4]: <pre>{'twiss_beta_x': 0.30134457126613,\n 'twiss_alpha_x': -2.15210497361386,\n 'twiss_gamma_x': 18.6880944753442,\n 'twiss_phi_x': 0.0,\n 'twiss_eta_x': -0.0481939319203434,\n 'twiss_etap_x': -0.454973392151944,\n 'twiss_sigma_x': 6.05472920750717e-05,\n 'twiss_sigma_p_x': 0.000476810212736377,\n 'twiss_emit_x': 1.21653911408494e-08,\n 'twiss_norm_emit_x': 9.99817439089443e-07,\n 'twiss_beta_y': 0.407832041608165,\n 'twiss_alpha_y': 1.94408133190086,\n 'twiss_gamma_y': 11.7191680334852,\n 'twiss_phi_y': 0.0,\n 'twiss_eta_y': -0.0457317680153808,\n 'twiss_etap_y': 0.0263984769451971,\n 'twiss_sigma_y': 7.04370887189114e-05,\n 'twiss_sigma_p_y': 0.000377580116845047,\n 'twiss_emit_y': 1.21652615808019e-08,\n 'twiss_norm_emit_y': 9.99806791146156e-07,\n 'twiss_beta_z': 95.8242541877309,\n 'twiss_alpha_z': -1.24059179274334,\n 'twiss_gamma_z': 0.0264971328787783,\n 'twiss_phi_z': 0.0,\n 'twiss_eta_z': 0.0,\n 'twiss_etap_z': 0.0,\n 'twiss_sigma_z': 0.0008994584510898,\n 'twiss_sigma_p_z': 1.49569425187929e-05,\n 'twiss_emit_z': 8.44280513419792e-09,\n 'twiss_norm_emit_z': 6.9387524907938e-07,\n 'twiss_beta_a': 0.248530085331005,\n 'twiss_alpha_a': -1.77499320489309,\n 'twiss_gamma_a': 15.4136110252092,\n 'twiss_phi_a': 0.0,\n 'twiss_eta_a': 0.00124844704286057,\n 'twiss_etap_a': 0.0111101590168622,\n 'twiss_sigma_a': 0.0,\n 'twiss_sigma_p_a': 0.0,\n 'twiss_emit_a': 1.21664545105205e-08,\n 'twiss_norm_emit_a': 9.99904832542641e-07,\n 'twiss_beta_b': 0.335544868515057,\n 'twiss_alpha_b': 1.59897669921574,\n 'twiss_gamma_b': 9.63845045654778,\n 'twiss_phi_b': 0.0,\n 'twiss_eta_b': 0.00454529158526127,\n 'twiss_etap_b': -0.0218933442291171,\n 'twiss_sigma_b': 0.0,\n 'twiss_sigma_p_b': 0.0,\n 'twiss_emit_b': 1.21741461356351e-08,\n 'twiss_norm_emit_b': 1.00053697176739e-06,\n 'twiss_beta_c': 95.7148956246458,\n 'twiss_alpha_c': -1.2389734965013,\n 'twiss_gamma_c': 0.0264430499032274,\n 'twiss_phi_c': 0.0,\n 'twiss_eta_c': 1.2389734965013,\n 'twiss_etap_c': 0.0264430499032274,\n 'twiss_sigma_c': 0.0,\n 'twiss_sigma_p_c': 0.0,\n 'twiss_emit_c': 8.43349923229653e-09,\n 'twiss_norm_emit_c': 6.931104398842e-07,\n 'sigma_11': 3.66649417909144e-09,\n 'sigma_12': 2.61861040625002e-08,\n 'sigma_13': -1.48398138750058e-13,\n 'sigma_14': -4.74391717648667e-14,\n 'sigma_15': -4.67916776621505e-10,\n 'sigma_16': -1.0781470751519e-11,\n 'sigma_21': 2.61861040625002e-08,\n 'sigma_22': 2.27394287142704e-07,\n 'sigma_23': -1.40343913296626e-12,\n 'sigma_24': 4.92122676913874e-14,\n 'sigma_25': -4.44903635737791e-09,\n 'sigma_26': -1.01782156482131e-10,\n 'sigma_31': -1.48398138750058e-13,\n 'sigma_32': -1.40343913296626e-12,\n 'sigma_33': 4.96185133335392e-09,\n 'sigma_34': -2.36505280107631e-08,\n 'sigma_35': 1.51286568416869e-13,\n 'sigma_36': -1.02306597454638e-11,\n 'sigma_41': -4.74391717648667e-14,\n 'sigma_42': 4.92122676913874e-14,\n 'sigma_43': -2.36505280107631e-08,\n 'sigma_44': 1.42566900535742e-07,\n 'sigma_45': -3.27450023923243e-13,\n 'sigma_46': 5.90560669628932e-12,\n 'sigma_51': -4.67916776621505e-10,\n 'sigma_52': -4.44903635737791e-09,\n 'sigma_53': 1.51286568416869e-13,\n 'sigma_54': -3.27450023923243e-13,\n 'sigma_55': 8.09025505236861e-07,\n 'sigma_56': 1.04740747572173e-08,\n 'sigma_61': -1.0781470751519e-11,\n 'sigma_62': -1.01782156482131e-10,\n 'sigma_63': -1.02306597454638e-11,\n 'sigma_64': 5.90560669628932e-12,\n 'sigma_65': 1.04740747572173e-08,\n 'sigma_66': 2.23710129510474e-10,\n 'rel_min_1': -0.000190703788737588,\n 'rel_max_1': 0.00017509947414712,\n 'centroid_vec_1': -1.0077897456587e-07,\n 'rel_min_2': -0.00145920753512278,\n 'rel_max_2': 0.00133407063334133,\n 'centroid_vec_2': -9.21157518145357e-07,\n 'rel_min_3': -0.000205532005074851,\n 'rel_max_3': 0.000204275481451832,\n 'centroid_vec_3': 5.35418310014607e-13,\n 'rel_min_4': -0.00119689779899842,\n 'rel_max_4': 0.00125449039844888,\n 'centroid_vec_4': -2.53681610205117e-11,\n 'rel_min_5': -0.00261715445721329,\n 'rel_max_5': 0.00278367096446691,\n 'centroid_vec_5': -7.53655670444979e-08,\n 'rel_min_6': -1.67983140050979e-05,\n 'rel_max_6': 2.80117072986177e-05,\n 'centroid_vec_6': -5.77005927578576e-06,\n 'centroid_t': 1.48447035006252e-09,\n 'centroid_p0c': 41996891.3143949,\n 'centroid_beta': 0.999925982822,\n 'ix_ele': 8,\n 'direction': 1,\n 'species': 'Electron',\n 'location': 'Downstream_End',\n 's': 0.444999999999986,\n 't': 1.48447035006252e-09,\n 'sigma_t': 3.00049253442181e-12,\n 'charge_live': 7.70000000000011e-11,\n 'n_particle_tot': 1000,\n 'n_particle_live': 1000,\n 'n_particle_lost_in_ele': 0,\n 'beam_saved': True}</pre> <p>This says that the full beam is saved at this element</p> In\u00a0[5]: Copied! <pre>stats[\"beam_saved\"]\n</pre> stats[\"beam_saved\"] Out[5]: <pre>True</pre> In\u00a0[6]: Copied! <pre>tao.bunch1(\"end\", \"x\")[0:10]\n</pre> tao.bunch1(\"end\", \"x\")[0:10] Out[6]: <pre>array([-1.69327762e-07, -4.58088151e-06,  4.46517206e-06, -1.72815751e-06,\n        9.38761727e-06,  5.93297413e-05, -6.70659004e-05,  4.15474873e-05,\n       -7.45202256e-05,  5.06597769e-05])</pre> In\u00a0[7]: Copied! <pre>tao.bunch1(\"end\", \"ix_ele\")[0:10]\n</pre> tao.bunch1(\"end\", \"ix_ele\")[0:10] Out[7]: <pre>array([8, 8, 8, 8, 8, 8, 8, 8, 8, 8], dtype=int32)</pre> In\u00a0[8]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[9]: Copied! <pre>%config InlineBackend.figure_format = 'retina' # Nicer plotting\n%matplotlib inline\n</pre> %config InlineBackend.figure_format = 'retina' # Nicer plotting %matplotlib inline In\u00a0[10]: Copied! <pre>xdat = tao.bunch1(\"end\", \"x\")\npxdat = tao.bunch1(\"end\", \"px\")\nchargedat = tao.bunch1(\"end\", \"charge\")\n\nxdata = 1000 * xdat\nydata = 1000 * pxdat\nweights = chargedat\n</pre> xdat = tao.bunch1(\"end\", \"x\") pxdat = tao.bunch1(\"end\", \"px\") chargedat = tao.bunch1(\"end\", \"charge\")  xdata = 1000 * xdat ydata = 1000 * pxdat weights = chargedat In\u00a0[11]: Copied! <pre># hist2d\n\nmycmap = plt.get_cmap(\"plasma\")  # viridis plasma inferno magma and _r versions\nmycmap.set_under(color=\"white\")  # map 0 to this color\nmyvmin = 1e-30  # something tiny\n# Bin particles\nplt.hist2d(\n    x=1000 * xdata, y=ydata, bins=2 * [40], weights=weights, cmap=mycmap, vmin=myvmin\n)\nplt.xlabel(\"x (mm)\")\nplt.ylabel(\"px (mrad)\")\nplt.show()\n</pre> # hist2d  mycmap = plt.get_cmap(\"plasma\")  # viridis plasma inferno magma and _r versions mycmap.set_under(color=\"white\")  # map 0 to this color myvmin = 1e-30  # something tiny # Bin particles plt.hist2d(     x=1000 * xdata, y=ydata, bins=2 * [40], weights=weights, cmap=mycmap, vmin=myvmin ) plt.xlabel(\"x (mm)\") plt.ylabel(\"px (mrad)\") plt.show() <p>Numpy histogram 2d, with custom color map</p> In\u00a0[12]: Copied! <pre>import matplotlib.colors as colors\n\nmycmap = plt.get_cmap(\"viridis\")  # viridis plasma inferno magma and _r versions\nmycmap.set_under(color=\"white\")  # map 0 to this color\nH, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)\n\nxmin, xmax = min(xedges), max(xedges)\nymin, ymax = min(yedges), max(yedges)\n\nimage = np.flip(H.T, axis=0)  #\nimax = np.max(image)\nnorm = colors.Normalize(vmin=1e-12 * imax, vmax=imax)\nplt.xlabel(\"x (mm)\")\nplt.ylabel(\"px (mrad)\")\nplt.imshow(\n    image, cmap=mycmap, norm=norm, extent=[xmin, xmax, ymin, ymax], aspect=\"auto\"\n);\n</pre> import matplotlib.colors as colors  mycmap = plt.get_cmap(\"viridis\")  # viridis plasma inferno magma and _r versions mycmap.set_under(color=\"white\")  # map 0 to this color H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)  xmin, xmax = min(xedges), max(xedges) ymin, ymax = min(yedges), max(yedges)  image = np.flip(H.T, axis=0)  # imax = np.max(image) norm = colors.Normalize(vmin=1e-12 * imax, vmax=imax) plt.xlabel(\"x (mm)\") plt.ylabel(\"px (mrad)\") plt.imshow(     image, cmap=mycmap, norm=norm, extent=[xmin, xmax, ymin, ymax], aspect=\"auto\" ); In\u00a0[13]: Copied! <pre>np.min(image), np.max(image)\n</pre> np.min(image), np.max(image) Out[13]: <pre>(np.float64(0.0), np.float64(8.469999999999999e-13))</pre> In\u00a0[14]: Copied! <pre>from bokeh.plotting import figure, show, output_notebook\nfrom bokeh import palettes, colors\nfrom bokeh.models import ColumnDataSource, HoverTool\n\noutput_notebook(verbose=False, hide_banner=True)\n\npal = palettes.Viridis[256]\n# white=colors.named.white\n# pal[0] = white # replace 0 with white\n</pre> from bokeh.plotting import figure, show, output_notebook from bokeh import palettes, colors from bokeh.models import ColumnDataSource, HoverTool  output_notebook(verbose=False, hide_banner=True)  pal = palettes.Viridis[256] # white=colors.named.white # pal[0] = white # replace 0 with white In\u00a0[15]: Copied! <pre>H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40)\nxmin, xmax = min(xedges), max(xedges)\nymin, ymax = min(yedges), max(yedges)\n</pre> H, xedges, yedges = np.histogram2d(xdata, ydata, weights=chargedat, bins=40) xmin, xmax = min(xedges), max(xedges) ymin, ymax = min(yedges), max(yedges) In\u00a0[16]: Copied! <pre>ds = ColumnDataSource(data=dict(image=[H.transpose()]))\np = figure(\n    x_range=[xmin, xmax],\n    y_range=[ymin, ymax],\n    title=\"Bunch at end\",\n    x_axis_label=\"x (mm)\",\n    y_axis_label=\"px (mrad)\",\n    width=500,\n    height=500,\n)\np.image(\n    image=\"image\",\n    source=ds,\n    x=xmin,\n    y=ymin,\n    dw=xmax - xmin,\n    dh=ymax - ymin,\n    palette=pal,\n)\nshow(p)\n</pre> ds = ColumnDataSource(data=dict(image=[H.transpose()])) p = figure(     x_range=[xmin, xmax],     y_range=[ymin, ymax],     title=\"Bunch at end\",     x_axis_label=\"x (mm)\",     y_axis_label=\"px (mrad)\",     width=500,     height=500, ) p.image(     image=\"image\",     source=ds,     x=xmin,     y=ymin,     dw=xmax - xmin,     dh=ymax - ymin,     palette=pal, ) show(p) In\u00a0[17]: Copied! <pre>data = tao.bunch_data(\"end\")\ndata.keys()\n</pre> data = tao.bunch_data(\"end\") data.keys() Out[17]: <pre>dict_keys(['x', 'px', 'y', 'py', 't', 'pz', 'status', 'weight', 'z', 'species'])</pre> In\u00a0[18]: Copied! <pre>from pmd_beamphysics import ParticleGroup\n\nP = ParticleGroup(data=data)\nP\n</pre> from pmd_beamphysics import ParticleGroup  P = ParticleGroup(data=data) P Out[18]: <pre>&lt;ParticleGroup with 1000 particles at 0x7f5d75b4fbc0&gt;</pre> In\u00a0[19]: Copied! <pre>P.plot(\"x\", \"px\")\n</pre> P.plot(\"x\", \"px\") In\u00a0[20]: Copied! <pre>P.twiss(\"xy\")\n</pre> P.twiss(\"xy\") Out[20]: <pre>{'alpha_x': np.float64(-2.1521049736138536),\n 'beta_x': np.float64(0.3013428324900903),\n 'gamma_x': np.float64(18.688202307379193),\n 'emit_x': np.float64(1.2177638975257874e-08),\n 'eta_x': np.float64(-0.04819365383894791),\n 'etap_x': np.float64(-0.4549733921541073),\n 'norm_emit_x': np.float64(1.0008240321607943e-06),\n 'alpha_y': np.float64(1.9440813319008754),\n 'beta_y': np.float64(0.40782968839311173),\n 'gamma_y': np.float64(11.719235654169719),\n 'emit_y': np.float64(1.2177509284772165e-08),\n 'eta_y': np.float64(-0.045731504141568825),\n 'etap_y': np.float64(0.02639847694869729),\n 'norm_emit_y': np.float64(1.0008133734973944e-06)}</pre> In\u00a0[21]: Copied! <pre>tao.bunch_comb(\"x\")\n</pre> tao.bunch_comb(\"x\") Out[21]: <pre>array([ 7.40357485e-22,  1.52112707e-14,  3.04225419e-14,  4.56338120e-14,\n        6.08450826e-14,  7.60563532e-14,  9.12676229e-14, -1.16282940e-09,\n       -1.14870454e-09, -1.12526206e-09, -1.09261268e-09, -1.05084624e-09,\n       -9.99970453e-10, -9.39813419e-10, -8.69809925e-10, -7.88320099e-10,\n       -6.91745919e-10, -5.74407015e-10, -4.27876634e-10,  1.42339073e-09,\n        1.63091681e-09,  1.83850625e-09,  2.04615922e-09,  2.25387404e-09,\n        2.46164780e-09,  2.66947691e-09,  2.87735726e-09,  9.86158250e-09,\n        9.32199246e-09,  8.20091852e-09,  6.43516375e-09,  3.96715881e-09,\n        7.44494068e-10, -3.28054979e-09, -8.15630332e-09, -1.39318757e-08,\n       -2.06607116e-08, -2.83988809e-08, -4.55143879e-08, -5.47252817e-08,\n       -6.39361217e-08, -7.31469081e-08, -8.23576435e-08, -9.15683309e-08,\n       -1.00778975e-07])</pre> <p>Make a nice plot with the beam envelope</p> In\u00a0[22]: Copied! <pre>s = tao.bunch_comb(\"s\")\nmean_x = tao.bunch_comb(\"x\")\nmax_x = mean_x + tao.bunch_comb(\"rel_max.1\")\nmin_x = mean_x + tao.bunch_comb(\"rel_min.1\")\nsigma_x = np.sqrt(tao.bunch_comb(\"sigma.11\"))\nfig, ax = plt.subplots()\n\nax.fill_between(s, min_x, max_x, alpha=0.2)\nax.plot(s, sigma_x, label=r\"$+\\sigma_x$\")\nax.plot(s, mean_x, label=r\"$&lt;x&gt;$\", marker=\".\")\nax.plot(s, -sigma_x, label=r\"$-\\sigma_x$\")\nax.set_xlabel(\"s (m)\")\nax.set_ylabel(\"beam sizes (m)\")\nplt.legend();\n</pre> s = tao.bunch_comb(\"s\") mean_x = tao.bunch_comb(\"x\") max_x = mean_x + tao.bunch_comb(\"rel_max.1\") min_x = mean_x + tao.bunch_comb(\"rel_min.1\") sigma_x = np.sqrt(tao.bunch_comb(\"sigma.11\")) fig, ax = plt.subplots()  ax.fill_between(s, min_x, max_x, alpha=0.2) ax.plot(s, sigma_x, label=r\"$+\\sigma_x$\") ax.plot(s, mean_x, label=r\"$$\", marker=\".\") ax.plot(s, -sigma_x, label=r\"$-\\sigma_x$\") ax.set_xlabel(\"s (m)\") ax.set_ylabel(\"beam sizes (m)\") plt.legend(); <p>Beam betas</p> In\u00a0[23]: Copied! <pre>plt.plot(tao.bunch_comb(\"s\"), 1000 * tao.bunch_comb(\"x.beta\"), label=\"beam beta_x\")\nplt.plot(tao.bunch_comb(\"s\"), 1000 * tao.bunch_comb(\"y.beta\"), label=\"beam beta_y\")\nplt.xlabel(\"s (m)\")\nplt.ylabel(\"beam Twiss beta (m)\")\nplt.legend();\n</pre> plt.plot(tao.bunch_comb(\"s\"), 1000 * tao.bunch_comb(\"x.beta\"), label=\"beam beta_x\") plt.plot(tao.bunch_comb(\"s\"), 1000 * tao.bunch_comb(\"y.beta\"), label=\"beam beta_y\") plt.xlabel(\"s (m)\") plt.ylabel(\"beam Twiss beta (m)\") plt.legend();"},{"location":"examples/bunch/#bunch-commands","title":"Bunch Commands\u00b6","text":""},{"location":"examples/bunch/#initialize-tao-on-the-csr-beam-tracking-example","title":"Initialize Tao on the CSR beam tracking example\u00b6","text":""},{"location":"examples/bunch/#bunch_params","title":"bunch_params\u00b6","text":"<p>Bunch statistics can be retrieved from any element as a dict.</p>"},{"location":"examples/bunch/#bunch1","title":"bunch1\u00b6","text":"<p>Array data from a bunch can be retrieved. Available coordinates are:</p> <p>x, px, y, py, z, pz, s, t, charge, p0c, state, ix_ele</p> <p>Appropriate data types are returned</p>"},{"location":"examples/bunch/#plot-in-matplotlib","title":"Plot in matplotlib\u00b6","text":"<p>This can be used to plot particles.</p>"},{"location":"examples/bunch/#plot-in-bokeh","title":"Plot in Bokeh\u00b6","text":""},{"location":"examples/bunch/#data-for-particlegroup","title":"Data for ParticleGroup\u00b6","text":"<p>The above commands have been packaged into two functions for easier use, and to easily create ParticleGroup objects</p>"},{"location":"examples/bunch/#bunch_comb","title":"bunch_comb\u00b6","text":""},{"location":"examples/fodo/","title":"FODO optics","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\n%config InlineBackend.figure_format = 'retina'\n</pre> from pytao import Tao import numpy as np import matplotlib.pyplot as plt import os  %config InlineBackend.figure_format = 'retina' In\u00a0[2]: Copied! <pre>tao = Tao(\n    \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad -noplot\"\n)\n</pre> tao = Tao(     \"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad -noplot\" ) In\u00a0[3]: Copied! <pre>def add_info(d):\n    twiss1 = tao.ele_twiss(\"q1\")\n    twiss2 = tao.ele_twiss(\"q2\")\n\n    d[\"mean_beta_a\"] = (twiss1[\"beta_a\"] + twiss2[\"beta_a\"]) / 2\n    d[\"mean_beta_b\"] = (twiss1[\"beta_b\"] + twiss2[\"beta_b\"]) / 2\n    d[\"phi_a\"] = twiss2[\"phi_a\"]\n    d[\"phi_b\"] = twiss2[\"phi_b\"]\n    return d\n</pre> def add_info(d):     twiss1 = tao.ele_twiss(\"q1\")     twiss2 = tao.ele_twiss(\"q2\")      d[\"mean_beta_a\"] = (twiss1[\"beta_a\"] + twiss2[\"beta_a\"]) / 2     d[\"mean_beta_b\"] = (twiss1[\"beta_b\"] + twiss2[\"beta_b\"]) / 2     d[\"phi_a\"] = twiss2[\"phi_a\"]     d[\"phi_b\"] = twiss2[\"phi_b\"]     return d In\u00a0[4]: Copied! <pre>%%tao\nsho lat\n</pre> %%tao sho lat <pre>------------\nTao&gt; sho lat\n# Values shown are for the Downstream End of each Element (Girder at ref point):\n# Index  name      key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                            a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n      0  BEGINNING Beginning_Ele         0.000     ---    0.67   0.000   0.00   0.000    3.22   0.000   0.00   0.000  Alive\n      1  P1        Pipe                  0.900   0.900    3.22   0.105   0.00   0.000    0.67   0.105   0.00   0.000  Alive\n      2  Q1        Quadrupole            1.000   0.100    3.22   0.110   0.00   0.000    0.67   0.129   0.00   0.000  Alive\n      3  P1        Pipe                  1.900   0.900    0.67   0.215   0.00   0.000    3.22   0.235   0.00   0.000  Alive\n      4  Q2        Quadrupole            2.000   0.100    0.67   0.239   0.00   0.000    3.22   0.239   0.00   0.000  Alive\n      5  END       Marker                2.000   0.000    0.67   0.239   0.00   0.000    3.22   0.239   0.00   0.000  Alive\nLord Elements:\n      6  O_L       Overlay               1.900     ---    0.67   0.215   0.00     ---    3.22   0.235   0.00     ---  Not_Set\n# Index  name      key                       s       l    beta   phi_a    eta   orbit    beta   phi_b    eta   orbit  Track\n#                                                            a   [2pi]      x  x [mm]       b   [2pi]      y  y [mm]  State\n# Values shown are for the Downstream End of each Element (Girder at ref point):\n</pre> In\u00a0[5]: Copied! <pre>def set_kx(k1):\n    cmds = [f\"set ele q1 k1 = {k1}\", f\"set ele q2 k1 = {-k1}\"]\n\n    d = {}\n    try:\n        tao.cmds(cmds)\n        tao.cmd(\"set global lattice_calc_on = T\")\n        d[\"good\"] = True\n        add_info(d)\n    except RuntimeError:\n        d[\"good\"] = False\n\n    return d\n\n\nx = set_kx(1.4142136e01)\nKEYS = x.keys()\nx\n</pre> def set_kx(k1):     cmds = [f\"set ele q1 k1 = {k1}\", f\"set ele q2 k1 = {-k1}\"]      d = {}     try:         tao.cmds(cmds)         tao.cmd(\"set global lattice_calc_on = T\")         d[\"good\"] = True         add_info(d)     except RuntimeError:         d[\"good\"] = False      return d   x = set_kx(1.4142136e01) KEYS = x.keys() x Out[5]: <pre>{'good': True,\n 'mean_beta_a': 1.9442223177869156,\n 'mean_beta_b': 1.9442223177869151,\n 'phi_a': 1.50388821541239,\n 'phi_b': 1.5038882154124}</pre> In\u00a0[6]: Copied! <pre># Scan k1\nn1 = 20\nqvec1 = np.linspace(1, 25, n1)\n\nRESULTS = []\n\n# tao.cmd('set global plot_on = F')\nfor k in qvec1:\n    res = set_kx(k)\n    RESULTS.append(res)\n# tao.cmd('set global plot_on = T')\n</pre> # Scan k1 n1 = 20 qvec1 = np.linspace(1, 25, n1)  RESULTS = []  # tao.cmd('set global plot_on = F') for k in qvec1:     res = set_kx(k)     RESULTS.append(res) # tao.cmd('set global plot_on = T') In\u00a0[7]: Copied! <pre># Reshape data\nDAT = {}\nfor key in KEYS:\n    print(key)\n    x = []\n    for res in RESULTS:\n        if key in res:\n            x.append(res[key])\n        else:\n            x.append(np.nan)\n    DAT[key] = np.array(x)\n</pre> # Reshape data DAT = {} for key in KEYS:     print(key)     x = []     for res in RESULTS:         if key in res:             x.append(res[key])         else:             x.append(np.nan)     DAT[key] = np.array(x) <pre>good\nmean_beta_a\nmean_beta_b\nphi_a\nphi_b\n</pre> In\u00a0[8]: Copied! <pre>DAT.keys()\n</pre> DAT.keys() Out[8]: <pre>dict_keys(['good', 'mean_beta_a', 'mean_beta_b', 'phi_a', 'phi_b'])</pre> In\u00a0[9]: Copied! <pre>for key in KEYS:\n    plt.plot(qvec1, DAT[key])\n    plt.ylabel(key)\n    plt.xlabel(r\"k1 (m$^{-2}$)\")\n    plt.show()\n</pre> for key in KEYS:     plt.plot(qvec1, DAT[key])     plt.ylabel(key)     plt.xlabel(r\"k1 (m$^{-2}$)\")     plt.show() In\u00a0[10]: Copied! <pre>%%tao\nsho dat\n</pre> %%tao sho dat <pre>------------\nTao&gt; sho dat\n\n  Name                                 Using for Optimization\n  fodo.betas[1:2]                                Using: 1:2\n  fodo.stability[1:1]                            Using: 1\n</pre> In\u00a0[11]: Copied! <pre>def set_k(k1, k2):\n    cmds = [f\"set ele q1 k1 = {k1}\", f\"set ele q2 k1 = {-k2}\"]\n\n    d = {}\n    try:\n        tao.cmds(cmds)\n        tao.cmd(\"set global lattice_calc_on = T\")\n        d[\"good\"] = True\n        add_info(d)\n    except RuntimeError:\n        d[\"good\"] = False\n\n    return d\n\n\nx = set_k(1.4142136e01, 1.4142136e01)\nKEYS = x.keys()\nx\n</pre> def set_k(k1, k2):     cmds = [f\"set ele q1 k1 = {k1}\", f\"set ele q2 k1 = {-k2}\"]      d = {}     try:         tao.cmds(cmds)         tao.cmd(\"set global lattice_calc_on = T\")         d[\"good\"] = True         add_info(d)     except RuntimeError:         d[\"good\"] = False      return d   x = set_k(1.4142136e01, 1.4142136e01) KEYS = x.keys() x Out[11]: <pre>{'good': True,\n 'mean_beta_a': 1.9442223177869156,\n 'mean_beta_b': 1.9442223177869151,\n 'phi_a': 1.50388821541239,\n 'phi_b': 1.5038882154124}</pre> In\u00a0[12]: Copied! <pre>set_k(1, 1)\n</pre> set_k(1, 1) Out[12]: <pre>{'good': True,\n 'mean_beta_a': 20.7230562019829,\n 'mean_beta_b': 20.7230562019829,\n 'phi_a': 0.0966467384116868,\n 'phi_b': 0.0966467384116869}</pre> In\u00a0[13]: Copied! <pre>n1 = 50\nn2 = 60\nqvec1 = np.linspace(1, 15, n1)\nqvec2 = np.linspace(1, 15, n2)\nK1, K2 = np.meshgrid(qvec1, qvec2, indexing=\"ij\")\n\nfK1 = K1.flatten()\nfK2 = K2.flatten()\n</pre> n1 = 50 n2 = 60 qvec1 = np.linspace(1, 15, n1) qvec2 = np.linspace(1, 15, n2) K1, K2 = np.meshgrid(qvec1, qvec2, indexing=\"ij\")  fK1 = K1.flatten() fK2 = K2.flatten() In\u00a0[14]: Copied! <pre>%%time\n# Make data\n\ntao.cmd(\"set global plot_on = F\")\n\nRESULTS = []\nfor k1, k2 in zip(fK1, fK2):\n    res = set_k(k1, k2)\n    #    print(res)\n    RESULTS.append(res)\n\n\n# tao.cmd('set global plot_on = T')\n</pre> %%time # Make data  tao.cmd(\"set global plot_on = F\")  RESULTS = [] for k1, k2 in zip(fK1, fK2):     res = set_k(k1, k2)     #    print(res)     RESULTS.append(res)   # tao.cmd('set global plot_on = T') <pre>CPU times: user 1.61 s, sys: 388 ms, total: 2 s\nWall time: 2 s\n</pre> In\u00a0[15]: Copied! <pre># Reshape data\nDAT = {}\nfor key in RESULTS[0]:\n    print(key)\n    x = []\n    for res in RESULTS:\n        if key in res:\n            x.append(res[key])\n        else:\n            x.append(np.nan)\n\n    DAT[key] = np.array(x).reshape(n1, n2)\n</pre> # Reshape data DAT = {} for key in RESULTS[0]:     print(key)     x = []     for res in RESULTS:         if key in res:             x.append(res[key])         else:             x.append(np.nan)      DAT[key] = np.array(x).reshape(n1, n2) <pre>good\nmean_beta_a\nmean_beta_b\nphi_a\nphi_b\n</pre> In\u00a0[16]: Copied! <pre>NICE = {}\nNICE[\"mean_beta_a\"] = r\"$&lt;\\beta_x&gt;$\"\nNICE[\"mean_beta_b\"] = r\"$&lt;\\beta_y&gt;$\"\n\n\ndef nice(key):\n    if key in NICE:\n        return NICE[key]\n    return key\n</pre> NICE = {} NICE[\"mean_beta_a\"] = r\"$&lt;\\beta_x&gt;$\" NICE[\"mean_beta_b\"] = r\"$&lt;\\beta_y&gt;$\"   def nice(key):     if key in NICE:         return NICE[key]     return key In\u00a0[17]: Copied! <pre># fig, ax = plt.subplots(figsize=(10,8))\n\n\ndef plot1(key):\n    plt.imshow(\n        DAT[key],\n        origin=\"lower\",\n        extent=[qvec1.min(), qvec1.max(), qvec2.min(), qvec2.max()],\n        cmap=\"jet\",\n        vmax=10,\n    )\n    plt.xlabel(\"Q1 (+)k1 (1/m$^2$)\")\n    plt.ylabel(\"Q2 (-)k1 (1/m$^2$)\")\n    plt.colorbar(label=nice(key))\n    plt.show()\n\n\nplot1(\"mean_beta_a\")\nplot1(\"mean_beta_b\")\n</pre> # fig, ax = plt.subplots(figsize=(10,8))   def plot1(key):     plt.imshow(         DAT[key],         origin=\"lower\",         extent=[qvec1.min(), qvec1.max(), qvec2.min(), qvec2.max()],         cmap=\"jet\",         vmax=10,     )     plt.xlabel(\"Q1 (+)k1 (1/m$^2$)\")     plt.ylabel(\"Q2 (-)k1 (1/m$^2$)\")     plt.colorbar(label=nice(key))     plt.show()   plot1(\"mean_beta_a\") plot1(\"mean_beta_b\") In\u00a0[18]: Copied! <pre>def optimize(beta_a, beta_b):\n    cmds = f\"\"\"\nalias setbetas\nveto var *\nset lattice model=design\nveto dat *\nuse dat fodo.betas[1,2]\nuse dat fodo.stability\nset dat fodo.betas[1]|meas={beta_a}\nset dat fodo.betas[2]|meas={beta_b}\nuse var quad\nrun\nshow var -bmad -good\n    \"\"\"\n    lines = tao.cmds(\n        cmds.split(\"\\n\"),\n        suppress_lattice_calc=False,\n        suppress_plotting=False,\n        raises=False,\n    )\n\n    # Twiss at Q1\n    T = tao.ele_twiss(\"Q1\")\n    return T\n\n\noptimize(10, 20)\n</pre> def optimize(beta_a, beta_b):     cmds = f\"\"\" alias setbetas veto var * set lattice model=design veto dat * use dat fodo.betas[1,2] use dat fodo.stability set dat fodo.betas[1]|meas={beta_a} set dat fodo.betas[2]|meas={beta_b} use var quad run show var -bmad -good     \"\"\"     lines = tao.cmds(         cmds.split(\"\\n\"),         suppress_lattice_calc=False,         suppress_plotting=False,         raises=False,     )      # Twiss at Q1     T = tao.ele_twiss(\"Q1\")     return T   optimize(10, 20) Out[18]: <pre>{'mode_flip': False,\n 'beta_a': 19.8980601747811,\n 'alpha_a': 20.8824960367295,\n 'gamma_a': 21.9658919957424,\n 'phi_a': 0.688888454799631,\n 'eta_a': 0.0,\n 'etap_a': 0.0,\n 'beta_b': 8.56179989648892,\n 'alpha_b': -8.6886925501399,\n 'gamma_b': 8.93426372440981,\n 'phi_b': 0.0669702646497192,\n 'eta_b': 0.0,\n 'etap_b': 0.0,\n 'eta_x': 0.0,\n 'etap_x': 0.0,\n 'eta_y': 0.0,\n 'etap_y': 0.0}</pre> In\u00a0[19]: Copied! <pre># Check merit\ntao.merit()\n</pre> # Check merit tao.merit() Out[19]: <pre>7.13483668005334e-24</pre> In\u00a0[20]: Copied! <pre># Check that the optimization worked\naverage_beta_a = tao.data(\"fodo\", \"betas\", dat_index=1)[\"model_value\"]\naverage_beta_b = tao.data(\"fodo\", \"betas\", dat_index=2)[\"model_value\"]\naverage_beta_a, average_beta_b\n</pre> # Check that the optimization worked average_beta_a = tao.data(\"fodo\", \"betas\", dat_index=1)[\"model_value\"] average_beta_b = tao.data(\"fodo\", \"betas\", dat_index=2)[\"model_value\"] average_beta_a, average_beta_b Out[20]: <pre>(10.0000000000002, 20.0000000000008)</pre> In\u00a0[21]: Copied! <pre># These are the K\nkq1 = tao.ele_gen_attribs(\"Q1\")[\"K1\"]\nkq2 = tao.ele_gen_attribs(\"Q2\")[\"K1\"]\nkq1, kq2\n</pre> # These are the K kq1 = tao.ele_gen_attribs(\"Q1\")[\"K1\"] kq2 = tao.ele_gen_attribs(\"Q2\")[\"K1\"] kq1, kq2 Out[21]: <pre>(20.6297896339797, -10.5500557883925)</pre> In\u00a0[22]: Copied! <pre>tao.cmd(\n    \"alias setbetas veto var *;veto dat *;use datafodo.stability;use dat fodo.betas[1,2];set dat fodo.betas[1]|meas=[[1]];set dat fodo.betas[2]|meas=[[2]];use var quad;run;show var -bmad -good\"\n)\n# tao.cmd('call SetBetas.tao', raises=False)\n\nlines = tao.cmd(\"setbetas 40 25\", raises=False)\nlines[-3:]\ntao.merit()\n</pre> tao.cmd(     \"alias setbetas veto var *;veto dat *;use datafodo.stability;use dat fodo.betas[1,2];set dat fodo.betas[1]|meas=[[1]];set dat fodo.betas[2]|meas=[[2]];use var quad;run;show var -bmad -good\" ) # tao.cmd('call SetBetas.tao', raises=False)  lines = tao.cmd(\"setbetas 40 25\", raises=False) lines[-3:] tao.merit() Out[22]: <pre>0.0</pre> In\u00a0[23]: Copied! <pre>T = tao.ele_twiss(\"Q1\")\nT\n</pre> T = tao.ele_twiss(\"Q1\") T Out[23]: <pre>{}</pre> In\u00a0[24]: Copied! <pre>from pytao.misc.markers import make_markers\n</pre> from pytao.misc.markers import make_markers In\u00a0[25]: Copied! <pre>?make_markers\n</pre> ?make_markers In\u00a0[26]: Copied! <pre>smax = 20.0  # m\n\n# Alternatively, if the lattice were already loaded\n# smax = tao.lat_list('*', who='ele.s').max()\n\nslist = np.linspace(0, smax, 200)\n\nmake_markers(slist, filename=\"markers.bmad\")\nsmax\n</pre> smax = 20.0  # m  # Alternatively, if the lattice were already loaded # smax = tao.lat_list('*', who='ele.s').max()  slist = np.linspace(0, smax, 200)  make_markers(slist, filename=\"markers.bmad\") smax Out[26]: <pre>20.0</pre> In\u00a0[27]: Copied! <pre># Make a lattice and write to a local file\n\nlatfile = os.path.join(os.getcwd(), \"fodo10.bmad\")\n\nLAT2 = f\"\"\"\n\ncall, file = $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad\ncall, file = markers.bmad\n\nQ1[k1] = {kq1}\nQ2[k1] = {kq2}\n\nlat: line = (10*fodo1)\n\nuse, lat\n\n\"\"\"\nopen(latfile, \"w\").write(LAT2)\n</pre> # Make a lattice and write to a local file  latfile = os.path.join(os.getcwd(), \"fodo10.bmad\")  LAT2 = f\"\"\"  call, file = $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/fodo.bmad call, file = markers.bmad  Q1[k1] = {kq1} Q2[k1] = {kq2}  lat: line = (10*fodo1)  use, lat  \"\"\" open(latfile, \"w\").write(LAT2) Out[27]: <pre>181</pre> In\u00a0[28]: Copied! <pre># Run with this lattice\ntao = Tao(\n    f\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot\"\n)\n</pre> # Run with this lattice tao = Tao(     f\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot\" ) In\u00a0[29]: Copied! <pre>f\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot\"\n</pre> f\"-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat {latfile} -noplot\" Out[29]: <pre>'-init $ACC_ROOT_DIR/bmad-doc/tao_examples/fodo/tao.init -lat /home/runner/work/pytao/pytao/docs/examples/fodo10.bmad -noplot'</pre> In\u00a0[30]: Copied! <pre># Toggle the beam on and off\ntao.cmd(\"set beam_init n_particle = 1000\")\ntao.cmd('set beam track_start = beginning')\ntao.cmd('set beam track_end = end')\ntao.cmd(\"set global track_type = beam;set global track_type = single\")\n</pre> # Toggle the beam on and off tao.cmd(\"set beam_init n_particle = 1000\") tao.cmd('set beam track_start = beginning') tao.cmd('set beam track_end = end') tao.cmd(\"set global track_type = beam;set global track_type = single\") Out[30]: <pre>['',\n 'Tao: set global track_type = beam',\n '',\n 'Tao: set global track_type = single']</pre> In\u00a0[31]: Copied! <pre>import h5py\nfrom pmd_beamphysics import ParticleGroup, particle_paths\n\nwith h5py.File(\"beam_dump.h5\", \"r\") as h5:\n    pp = particle_paths(h5)\n    Plist = [ParticleGroup(h5[g]) for g in pp]\n</pre> import h5py from pmd_beamphysics import ParticleGroup, particle_paths  with h5py.File(\"beam_dump.h5\", \"r\") as h5:     pp = particle_paths(h5)     Plist = [ParticleGroup(h5[g]) for g in pp] In\u00a0[32]: Copied! <pre>skip = 1  # make larger for faster plotting\nfig, axes = plt.subplots(2, figsize=(12, 8))\n\naxes[0].plot(\n    [P.t[::skip] * 299792458 for P in Plist],\n    [P.x[::skip] * 1e6 for P in Plist],\n    alpha=0.01,\n    color=\"black\",\n)\n\naxes[1].plot(\n    [P.t[::skip] * 299792458 for P in Plist],\n    [P.y[::skip] * 1e6 for P in Plist],\n    alpha=0.01,\n    color=\"black\",\n)\n\naxes[0].set_ylabel(r\"$x$ (\u00b5m)\")\naxes[1].set_ylabel(r\"$y$ (\u00b5m)\")\n\naxes[1].set_xlabel(r\"$ct$ (m)\")\n\nfor ax in axes:\n    ax.set_ylim(-2000, 2000)\n</pre> skip = 1  # make larger for faster plotting fig, axes = plt.subplots(2, figsize=(12, 8))  axes[0].plot(     [P.t[::skip] * 299792458 for P in Plist],     [P.x[::skip] * 1e6 for P in Plist],     alpha=0.01,     color=\"black\", )  axes[1].plot(     [P.t[::skip] * 299792458 for P in Plist],     [P.y[::skip] * 1e6 for P in Plist],     alpha=0.01,     color=\"black\", )  axes[0].set_ylabel(r\"$x$ (\u00b5m)\") axes[1].set_ylabel(r\"$y$ (\u00b5m)\")  axes[1].set_xlabel(r\"$ct$ (m)\")  for ax in axes:     ax.set_ylim(-2000, 2000) In\u00a0[33]: Copied! <pre>k1 = \"sigma_x\"\nk2 = \"sigma_y\"\n\nx = np.array([P[\"mean_t\"] * 299792458 for P in Plist])\ny1 = np.array([P[k1] for P in Plist])\ny2 = np.array([P[k2] for P in Plist])\n\nfig, ax = plt.subplots(figsize=(12, 4))\nax.plot(x, y1 * 1e6, label=k1)\nax.plot(x, y2 * 1e6, label=k2)\nax.set_xlabel(\"&lt;ct&gt; (m)\")\nax.set_ylabel(f\"{k1}, {k2} (\u00b5m)\")\nplt.legend()\n</pre> k1 = \"sigma_x\" k2 = \"sigma_y\"  x = np.array([P[\"mean_t\"] * 299792458 for P in Plist]) y1 = np.array([P[k1] for P in Plist]) y2 = np.array([P[k2] for P in Plist])  fig, ax = plt.subplots(figsize=(12, 4)) ax.plot(x, y1 * 1e6, label=k1) ax.plot(x, y2 * 1e6, label=k2) ax.set_xlabel(\" (m)\") ax.set_ylabel(f\"{k1}, {k2} (\u00b5m)\") plt.legend() Out[33]: <pre>&lt;matplotlib.legend.Legend at 0x7f8d71d30c20&gt;</pre> In\u00a0[34]: Copied! <pre># Cleanup\n!rm beam_dump.h5\n!rm {latfile}\n!rm markers.bmad\n</pre> # Cleanup !rm beam_dump.h5 !rm {latfile} !rm markers.bmad"},{"location":"examples/fodo/#fodo-optics","title":"FODO optics\u00b6","text":"<p>This will demonstrate how to scan symmetrically and asymetrically the quadruople strengths in a standard FODO lattice.</p> <p>Later we will optimize for particular average beta function.</p> <p>Finally, we will track a beam and gather statistics from the particles.</p>"},{"location":"examples/fodo/#symmetric-fodo","title":"Symmetric FODO\u00b6","text":""},{"location":"examples/fodo/#asymmetric-fodo","title":"Asymmetric FODO\u00b6","text":"<p>Scan k1 for each quad</p>"},{"location":"examples/fodo/#plots","title":"Plots\u00b6","text":""},{"location":"examples/fodo/#optimize-for-some-special-beta-functions","title":"Optimize for some special beta functions\u00b6","text":""},{"location":"examples/fodo/#alternative-method-alias","title":"Alternative method: alias\u00b6","text":"<p>A 'simple' Tao alias can be useful when running on the command line.</p>"},{"location":"examples/fodo/#beam-tracking","title":"Beam tracking\u00b6","text":"<p>Here we will make a new lattice with 10 cells that calls the single fodo lattice.</p>"},{"location":"examples/fodo/#get-particles","title":"Get particles\u00b6","text":""},{"location":"examples/fodo/#pretty-plot","title":"Pretty plot\u00b6","text":"<p>Traces can be made by gathering the coordinate arrays</p>"},{"location":"examples/fodo/#get-some-statistics","title":"Get some statistics\u00b6","text":""},{"location":"examples/fodo/#cleanup","title":"Cleanup\u00b6","text":""},{"location":"examples/plot-bokeh-vars/","title":"PyTao Bokeh \"Single mode\"","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\"\n\ntao = Tao(init_file=init_file, plot=\"bokeh\")\n</pre> init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/cbeta_cell/tao.init\"  tao = Tao(init_file=init_file, plot=\"bokeh\") In\u00a0[3]: Copied! <pre>_ = tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True)\n</pre> _ = tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True) In\u00a0[4]: Copied! <pre>tao.bokeh.configure(variables_per_row=2, show_sliders=True);\n</pre> tao.bokeh.configure(variables_per_row=2, show_sliders=True); Loading BokehJS ... In\u00a0[5]: Copied! <pre>tao.plot(\"beta\", vars=True, width=800, height=200, layout_height=75)\n</pre> tao.plot(\"beta\", vars=True, width=800, height=200, layout_height=75) In\u00a0[6]: Copied! <pre>tao.var(\"q[1]\")[\"model_value\"]\n</pre> tao.var(\"q[1]\")[\"model_value\"] Out[6]: <pre>-20.931</pre>"},{"location":"examples/plot-bokeh-vars/#pytao-bokeh-single-mode","title":"PyTao Bokeh \"Single mode\"\u00b6","text":""},{"location":"examples/plot-bokeh-vars/#show-names-for-our-quadrupoles","title":"Show names for our quadrupoles\u00b6","text":""},{"location":"examples/plot-bokeh-vars/#configure-relevant-settings","title":"Configure relevant settings\u00b6","text":""},{"location":"examples/plot-bokeh-vars/#show-a-single-mode-style-plot-with-variables","title":"Show a \"single mode\"-style plot with variables\u00b6","text":"<p>Please note that these interactive widgets will not display on https://bmad-sim.github.io/pytao documentation.  These only work with a live Tao session.</p>"},{"location":"examples/plot-bokeh-vars/#query-variable-values-programmatically","title":"Query variable values programmatically\u00b6","text":""},{"location":"examples/plot-bokeh/","title":"PyTao plotting with Bokeh","text":"<p>PyTao supports plotting directly from the notebook, without a separate (X11) plot window.</p> <p>PyTao provides two backends:</p> <ul> <li>Bokeh (with interactive plotting support)</li> <li>Matplotlib</li> </ul> <p>When plotting is enabled, PyTao will automatically select the best available backend.</p> <p>The plotting backend may be specified explicitly, as we will do in this notebook in order to show off this backend's functionality.</p> In\u00a0[1]: Copied! <pre>from pytao import SubprocessTao, Tao\n</pre> from pytao import SubprocessTao, Tao In\u00a0[2]: Copied! <pre>init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/optics_matching/tao.init\"\n\ntao = Tao(init_file=init_file, plot=\"bokeh\")\n</pre> init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/optics_matching/tao.init\"  tao = Tao(init_file=init_file, plot=\"bokeh\") In\u00a0[3]: Copied! <pre>_ = tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True, floor=True)\n</pre> _ = tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True, floor=True) In\u00a0[4]: Copied! <pre>tao.plot(\"floor_plan\")\n</pre> tao.plot(\"floor_plan\") Loading BokehJS ... In\u00a0[5]: Copied! <pre>tao.bokeh.layout_template = \"lat_layout\"\n</pre> tao.bokeh.layout_template = \"lat_layout\" In\u00a0[6]: Copied! <pre>tao.plot(\"dispersion\")\n</pre> tao.plot(\"dispersion\") In\u00a0[7]: Copied! <pre>tao.cmd(\"set var quad[1]|model = -5\")\ntao.plot_field(\"Q1\")\n</pre> tao.cmd(\"set var quad[1]|model = -5\") tao.plot_field(\"Q1\") In\u00a0[8]: Copied! <pre>tao.plot([\"alpha\", \"beta\"])\n</pre> tao.plot([\"alpha\", \"beta\"]) In\u00a0[9]: Copied! <pre>tao.plot([\"alpha\", \"beta\"], include_layout=False)\n</pre> tao.plot([\"alpha\", \"beta\"], include_layout=False) In\u00a0[10]: Copied! <pre>tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2), width=350, height=100, layout_height=50)\n</pre> tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2), width=350, height=100, layout_height=50) In\u00a0[11]: Copied! <pre>tao.plot(\"beta\", save=\"beta\", include_layout=False)\n</pre> tao.plot(\"beta\", save=\"beta\", include_layout=False) In\u00a0[12]: Copied! <pre>tao.bokeh.configure(\n    width=500,\n    height=200,\n    layout_height=25,\n    palette=\"Magma256\",\n)\n</pre> tao.bokeh.configure(     width=500,     height=200,     layout_height=25,     palette=\"Magma256\", ) Out[12]: <pre>{'width': 500,\n 'height': 200,\n 'stacked_height': 200,\n 'layout_height': 25,\n 'show_bokeh_logo': False,\n 'palette': 'Magma256',\n 'tools': 'pan,wheel_zoom,box_zoom,reset,hover,crosshair',\n 'grid_toolbar_location': 'right',\n 'lattice_layout_tools': 'pan,wheel_zoom,box_zoom,reset,hover,crosshair',\n 'floor_plan_tools': 'pan,wheel_zoom,box_zoom,reset,hover,crosshair',\n 'floor_plan_annotate_elements': True,\n 'layout_font_size': '0.75em',\n 'floor_plan_font_size': '0.75em',\n 'limit_scale_factor': 1.01,\n 'max_data_points': 10000,\n 'variables_per_row': 2,\n 'show_sliders': True}</pre> In\u00a0[13]: Copied! <pre>tao.plot(\"beta\")\n</pre> tao.plot(\"beta\") In\u00a0[14]: Copied! <pre>graphs, app = tao.last_plot\n</pre> graphs, app = tao.last_plot In\u00a0[15]: Copied! <pre>graphs[0].curves[0].line.xs[:10]\n</pre> graphs[0].curves[0].line.xs[:10] Out[15]: <pre>[0.0,\n 0.00645161290322581,\n 0.0129032258064516,\n 0.0193548387096774,\n 0.0258064516129032,\n 0.032258064516129,\n 0.0387096774193548,\n 0.0451612903225806,\n 0.0516129032258065,\n 0.0580645161290323]</pre> In\u00a0[16]: Copied! <pre>from pytao.plotting import TaoGraphSettings, TaoAxisSettings\n\n# Let's use SubprocessTao to make an independent Tao instance in a subprocess.\n# Now we can use `tao` from above (`optics_matching`) and `erl` here simultaneously.\nerl = SubprocessTao(\n    init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/erl/tao.init\", \n    plot=\"bokeh\", \n    # The ERL example startup file customizes plots in a way incompatible with pytao's external plotting.\n    # Set \"nostartup=True\" to avoid this.\n    nostartup=True,\n)\n\nerl.cmds(\n    [\n        \"set global track_type = beam\",\n        \"set var r56[1]|model = 0.234\",\n        \"set var t566[1]|model = 0.567\",\n    ]\n)\n\nerl.plot(\n    \"alpha\",\n    settings=TaoGraphSettings(\n        title=\"My Custom Alpha Plot\",\n        component=\"model\",\n        draw_grid=False,\n        x=TaoAxisSettings(\n            label=\"Position - s [m]\",\n        ),\n    ),\n)\n</pre> from pytao.plotting import TaoGraphSettings, TaoAxisSettings  # Let's use SubprocessTao to make an independent Tao instance in a subprocess. # Now we can use `tao` from above (`optics_matching`) and `erl` here simultaneously. erl = SubprocessTao(     init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/erl/tao.init\",      plot=\"bokeh\",      # The ERL example startup file customizes plots in a way incompatible with pytao's external plotting.     # Set \"nostartup=True\" to avoid this.     nostartup=True, )  erl.cmds(     [         \"set global track_type = beam\",         \"set var r56[1]|model = 0.234\",         \"set var t566[1]|model = 0.567\",     ] )  erl.plot(     \"alpha\",     settings=TaoGraphSettings(         title=\"My Custom Alpha Plot\",         component=\"model\",         draw_grid=False,         x=TaoAxisSettings(             label=\"Position - s [m]\",         ),     ), ) In\u00a0[17]: Copied! <pre>from pytao.plotting.curves import TaoCurveSettings\n\nerl.plot(\n    [\"zphase\", \"zphase\", \"zphase\", \"zphase2\"],\n    grid=(2, 2),\n    curves=[\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\1\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\1\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\2\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\2\")},\n    ],\n    xlim=(-3, 3),\n    ylim=(-10, 10),\n    share_x=False,\n    include_layout=False,\n    width=350, # per plot\n    vars=True\n)\n</pre> from pytao.plotting.curves import TaoCurveSettings  erl.plot(     [\"zphase\", \"zphase\", \"zphase\", \"zphase2\"],     grid=(2, 2),     curves=[         {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\1\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\1\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\2\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\2\")},     ],     xlim=(-3, 3),     ylim=(-10, 10),     share_x=False,     include_layout=False,     width=350, # per plot     vars=True )"},{"location":"examples/plot-bokeh/#pytao-plotting-with-bokeh","title":"PyTao plotting with Bokeh\u00b6","text":""},{"location":"examples/plot-bokeh/#tao-setup","title":"Tao setup\u00b6","text":""},{"location":"examples/plot-bokeh/#shape-setup","title":"Shape setup\u00b6","text":"<p>Let's update Tao's plotting shapes first, so that we see label names in the layout and floor plan. Customizing this in the Bmad init files is an alternative to doing this in PyTao.</p>"},{"location":"examples/plot-bokeh/#the-floor-plan","title":"The floor plan\u00b6","text":""},{"location":"examples/plot-bokeh/#single-data-plots","title":"Single data plots\u00b6","text":""},{"location":"examples/plot-bokeh/#plot-fields","title":"Plot fields\u00b6","text":""},{"location":"examples/plot-bokeh/#stacked-plots","title":"Stacked plots\u00b6","text":""},{"location":"examples/plot-bokeh/#gridded-plots","title":"Gridded plots\u00b6","text":""},{"location":"examples/plot-bokeh/#saving-plots","title":"Saving plots\u00b6","text":"<p>The parameter <code>save</code> makes it convenient to simultaneously display and save the plot to a file.</p>"},{"location":"examples/plot-bokeh/#change-defaults","title":"Change defaults\u00b6","text":""},{"location":"examples/plot-bokeh/#accessing-plot-data","title":"Accessing plot data\u00b6","text":""},{"location":"examples/plot-bokeh/#advanced-plotting-settings","title":"Advanced plotting settings\u00b6","text":"<p><code>TaoGraphSettings</code> may be used to customize per-graph settings in single or gridded plots.</p> <p>Since each graph has its own settings, we specify a list of <code>TaoGraphSettings</code>. <code>TaoGraphSettings</code> includes customization of titles, legends, scales, per-axis settings (with <code>TaoAxisSettings</code>), and so on.</p> <p>For example, to change the title of a plot, one could use: <code>TaoGraphSettings(title=\"something\")</code> - or equivalently a custom Tao command can be sent with <code>TaoGraphSettings(commands=[\"set graph {graph} title = something\"])</code>.</p> <p>See <code>TaoGraphSettings</code> documentation for further information on what may be customized. Not all settings will be supported by PyTao's plotting backends.</p>"},{"location":"examples/plot-bokeh/#advanced-curve-settings","title":"Advanced curve settings\u00b6","text":"<p><code>TaoCurveSettings</code> may be used to customize per-curve settings in simple or gridded plots.</p> <p>The below example has 4 plots in a 2x2 grid.</p> <p>Since each plot has a set of curves, we must specify a dictionary for each plot.</p> <p>That dictionary contains a mapping of <code>curve_index</code> (starting with 1) to a <code>TaoCurveSettings</code> instance.</p> <p>See <code>TaoCurveSettings</code> for further information on what may be customized.</p>"},{"location":"examples/plot-matplotlib/","title":"PyTao plotting with Matplotlib","text":"<p>PyTao supports plotting directly from the notebook, without a separate (X11) plot window.</p> <p>PyTao provides two backends:</p> <ul> <li>Bokeh (with interactive plotting support)</li> <li>Matplotlib</li> </ul> <p>When plotting is enabled, PyTao will automatically select the best available backend.</p> <p>The plotting backend may be specified explicitly, as we will do in this notebook in order to show off this backend's functionality.</p> In\u00a0[1]: Copied! <pre>%config InlineBackend.figure_format = \"retina\"\n</pre> %config InlineBackend.figure_format = \"retina\" In\u00a0[2]: Copied! <pre>import pytao\nfrom pytao import Tao, SubprocessTao\n\nimport matplotlib.pyplot as plt\n</pre> import pytao from pytao import Tao, SubprocessTao  import matplotlib.pyplot as plt In\u00a0[3]: Copied! <pre>init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/optics_matching/tao.init\"\n\ntao = Tao(init_file=init_file, plot=\"mpl\")\n</pre> init_file = \"$ACC_ROOT_DIR/bmad-doc/tao_examples/optics_matching/tao.init\"  tao = Tao(init_file=init_file, plot=\"mpl\") In\u00a0[4]: Copied! <pre>tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True, floor=True);\n</pre> tao.update_plot_shapes(\"quadrupole\", type_label=\"name\", layout=True, floor=True); In\u00a0[5]: Copied! <pre>tao.plot(\"floor_plan\", ylim=(-2, 2), figsize=(6, 4))\n</pre> tao.plot(\"floor_plan\", ylim=(-2, 2), figsize=(6, 4)) In\u00a0[6]: Copied! <pre>tao.plot(\"dispersion\", include_layout=True)\n</pre> tao.plot(\"dispersion\", include_layout=True) In\u00a0[7]: Copied! <pre>tao.cmd(\"set var quad[1]|model = -5\")\ntao.plot_field(\"Q1\")\n</pre> tao.cmd(\"set var quad[1]|model = -5\") tao.plot_field(\"Q1\") In\u00a0[8]: Copied! <pre>tao.plot([\"alpha\", \"beta\"])\n</pre> tao.plot([\"alpha\", \"beta\"]) In\u00a0[9]: Copied! <pre>tao.plot([\"alpha\", \"beta\"], include_layout=False)\n</pre> tao.plot([\"alpha\", \"beta\"], include_layout=False) In\u00a0[10]: Copied! <pre>tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2), figsize=(8, 8))\n</pre> tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2), figsize=(8, 8)) In\u00a0[11]: Copied! <pre>tao.plot(\"beta\", save=\"beta.png\", figsize=(3, 3), include_layout=False)\n</pre> tao.plot(\"beta\", save=\"beta.png\", figsize=(3, 3), include_layout=False) In\u00a0[12]: Copied! <pre>tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2))\n\n# Access the figure by using `plt.gcf()` (\"get current figure\")\nfig = plt.gcf()\nfig.suptitle(\"Customized plot title\")\n\n# Access individual Axes objects by indexing `fig.axes`:\nfig.axes[0].set_title(\"Beta [model]\")\nfig.tight_layout()\n</pre> tao.plot([\"beta\", \"dispersion\", \"orbit\"], grid=(2, 2))  # Access the figure by using `plt.gcf()` (\"get current figure\") fig = plt.gcf() fig.suptitle(\"Customized plot title\")  # Access individual Axes objects by indexing `fig.axes`: fig.axes[0].set_title(\"Beta [model]\") fig.tight_layout() In\u00a0[13]: Copied! <pre>tao.matplotlib.configure(layout_height=0.25, figsize=(4, 4))\n</pre> tao.matplotlib.configure(layout_height=0.25, figsize=(4, 4)) Out[13]: <pre>{'layout_height': 0.25,\n 'colormap': 'PRGn_r',\n 'figsize': [4.0, 4.0],\n 'dpi': 100.0}</pre> In\u00a0[14]: Copied! <pre>tao.plot(\"beta\")\n</pre> tao.plot(\"beta\") In\u00a0[15]: Copied! <pre>graphs, beta_fig, beta_ax = tao.last_plot\n</pre> graphs, beta_fig, beta_ax = tao.last_plot In\u00a0[16]: Copied! <pre>graphs[0].curves[0].line.xs[:10]\n</pre> graphs[0].curves[0].line.xs[:10] Out[16]: <pre>[0.0,\n 0.00645161290322581,\n 0.0129032258064516,\n 0.0193548387096774,\n 0.0258064516129032,\n 0.032258064516129,\n 0.0387096774193548,\n 0.0451612903225806,\n 0.0516129032258065,\n 0.0580645161290323]</pre> In\u00a0[17]: Copied! <pre>from pytao.plotting import TaoGraphSettings, TaoAxisSettings\n\n# Let's use SubprocessTao to make an independent Tao instance in a subprocess.\n# Now we can use `tao` from above (`optics_matching`) and `erl` here simultaneously.\nerl = SubprocessTao(\n    init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/erl/tao.init\", \n    plot=\"mpl\", \n    # The ERL example startup file customizes plots in a way incompatible with pytao's external plotting.\n    # Set \"nostartup=True\" to avoid this.\n    nostartup=True,\n)\n\nerl.cmds(\n    [\n        \"set global track_type = beam\",\n        \"set var r56[1]|model = 0.234\",\n        \"set var t566[1]|model = 0.567\",\n    ]\n)\n\nerl.plot(\n    \"alpha\",\n    settings=TaoGraphSettings(\n        title=\"My Custom Alpha Plot\",\n        component=\"model\",\n        draw_grid=False,\n        x=TaoAxisSettings(\n            label=\"Position - s [m]\",\n        ),\n    ),\n)\n</pre> from pytao.plotting import TaoGraphSettings, TaoAxisSettings  # Let's use SubprocessTao to make an independent Tao instance in a subprocess. # Now we can use `tao` from above (`optics_matching`) and `erl` here simultaneously. erl = SubprocessTao(     init_file=\"$ACC_ROOT_DIR/bmad-doc/tao_examples/erl/tao.init\",      plot=\"mpl\",      # The ERL example startup file customizes plots in a way incompatible with pytao's external plotting.     # Set \"nostartup=True\" to avoid this.     nostartup=True, )  erl.cmds(     [         \"set global track_type = beam\",         \"set var r56[1]|model = 0.234\",         \"set var t566[1]|model = 0.567\",     ] )  erl.plot(     \"alpha\",     settings=TaoGraphSettings(         title=\"My Custom Alpha Plot\",         component=\"model\",         draw_grid=False,         x=TaoAxisSettings(             label=\"Position - s [m]\",         ),     ), ) In\u00a0[18]: Copied! <pre>from pytao.plotting import TaoCurveSettings\n\nerl.plot(\n    [\"zphase\", \"zphase\", \"zphase\", \"zphase2\"],\n    grid=(2, 2),\n    curves=[\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\1\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\1\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\2\")},\n        {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\2\")},\n    ],\n    xlim=(-3, 3),\n    ylim=(-10, 10),\n    share_x=False,\n    include_layout=False,\n    figsize=(6, 6),\n)\n</pre> from pytao.plotting import TaoCurveSettings  erl.plot(     [\"zphase\", \"zphase\", \"zphase\", \"zphase2\"],     grid=(2, 2),     curves=[         {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\1\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\1\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.beg\\2\")},         {1: TaoCurveSettings(ele_ref_name=r\"linac.end\\2\")},     ],     xlim=(-3, 3),     ylim=(-10, 10),     share_x=False,     include_layout=False,     figsize=(6, 6), )"},{"location":"examples/plot-matplotlib/#pytao-plotting-with-matplotlib","title":"PyTao plotting with Matplotlib\u00b6","text":""},{"location":"examples/plot-matplotlib/#tao-setup","title":"Tao setup\u00b6","text":""},{"location":"examples/plot-matplotlib/#shape-setup","title":"Shape setup\u00b6","text":"<p>Let's update Tao's plotting shapes first, so that we see label names in the layout and floor plan. Customizing this in the Bmad init files is an alternative to doing this in PyTao.</p>"},{"location":"examples/plot-matplotlib/#the-floor-plan","title":"The floor plan\u00b6","text":""},{"location":"examples/plot-matplotlib/#single-data-plots","title":"Single data plots\u00b6","text":""},{"location":"examples/plot-matplotlib/#plot-fields","title":"Plot fields\u00b6","text":""},{"location":"examples/plot-matplotlib/#stacked-plots","title":"Stacked plots\u00b6","text":""},{"location":"examples/plot-matplotlib/#gridded-plots","title":"Gridded plots\u00b6","text":""},{"location":"examples/plot-matplotlib/#saving-plots","title":"Saving plots\u00b6","text":"<p>The parameter <code>save</code> makes it convenient to simultaneously display and save the plot to a file.</p>"},{"location":"examples/plot-matplotlib/#customized-plots","title":"Customized plots\u00b6","text":""},{"location":"examples/plot-matplotlib/#change-defaults","title":"Change defaults\u00b6","text":""},{"location":"examples/plot-matplotlib/#accessing-plot-data","title":"Accessing plot data\u00b6","text":""},{"location":"examples/plot-matplotlib/#advanced-plotting-settings","title":"Advanced plotting settings\u00b6","text":"<p><code>TaoGraphSettings</code> may be used to customize per-graph settings in single or gridded plots.</p> <p>Since each graph has its own settings, we specify a list of <code>TaoGraphSettings</code>. <code>TaoGraphSettings</code> includes customization of titles, legends, scales, per-axis settings (with <code>TaoAxisSettings</code>), and so on.</p> <p>For example, to change the title of a plot, one could use: <code>TaoGraphSettings(title=\"something\")</code> - or equivalently a custom Tao command can be sent with <code>TaoGraphSettings(commands=[\"set graph {graph} title = something\"])</code>.</p> <p>See <code>TaoGraphSettings</code> documentation for further information on what may be customized. Not all settings will be supported by PyTao's plotting backends.</p>"},{"location":"examples/plot-matplotlib/#advanced-curve-settings","title":"Advanced curve settings\u00b6","text":"<p><code>TaoCurveSettings</code> may be used to customize per-curve settings in simple or gridded plots.</p> <p>The below example has 4 plots in a 2x2 grid.</p> <p>Since each plot has a set of curves, we must specify a dictionary for each plot.</p> <p>That dictionary contains a mapping of <code>curve_index</code> (starting with 1) to a <code>TaoCurveSettings</code> instance.</p> <p>See <code>TaoCurveSettings</code> for further information on what may be customized.</p>"},{"location":"examples/special_parsers/","title":"Special Parsers","text":"In\u00a0[1]: Copied! <pre>from pytao import Tao\n</pre> from pytao import Tao In\u00a0[2]: Copied! <pre>tao = Tao(\"-init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init -noplot\")\n</pre> tao = Tao(\"-init $ACC_ROOT_DIR/regression_tests/pipe_test/cesr/tao.init -noplot\") In\u00a0[3]: Copied! <pre>tao.data_d_array(\"orbit\", \"x\")[7]\n</pre> tao.data_d_array(\"orbit\", \"x\")[7] Out[3]: <pre>{'ix_d1': 7,\n 'data_type': 'orbit.x',\n 'merit_type': 'target',\n 'ele_ref_name': '',\n 'ele_start_name': '',\n 'ele_name': 'DET_07W',\n 'meas_value': 0.0,\n 'model_value': -0.00909995345022664,\n 'design_value': -0.00909995345022664,\n 'useit_opt': False,\n 'useit_plot': False,\n 'good_user': True,\n 'weight': 1000000.0,\n 'exists': True}</pre> In\u00a0[4]: Copied! <pre>tao.cmd(\"veto var *;veto dat *;\")\ntao.cmd(\"use var quad_k1[3:5]\")\ntao.cmd(\"set dat orbit.x[1:5]|meas=0\")\ntao.cmd(\"use dat orbit.x[1:5]\");\n</pre> tao.cmd(\"veto var *;veto dat *;\") tao.cmd(\"use var quad_k1[3:5]\") tao.cmd(\"set dat orbit.x[1:5]|meas=0\") tao.cmd(\"use dat orbit.x[1:5]\"); In\u00a0[5]: Copied! <pre>result = tao.derivative()\nresult\n</pre> result = tao.derivative() result Out[5]: <pre>{1: array([[-0.01758468, -0.03303895,  0.00216133],\n        [-0.01711307, -0.03578881,  0.00283783],\n        [ 0.00189157, -0.00956714,  0.002403  ],\n        [-0.00893899,  0.00192383,  0.00267012]])}</pre> <p>n_datums x n_variables</p> In\u00a0[6]: Copied! <pre>result[1].shape\n</pre> result[1].shape Out[6]: <pre>(4, 3)</pre> In\u00a0[7]: Copied! <pre>tao.ele_control_var(\"H01W\")\n</pre> tao.ele_control_var(\"H01W\") Out[7]: <pre>{'HKICK': 0.0}</pre> In\u00a0[8]: Copied! <pre>result = tao.lat_ele_list()\n\nresult[0:5]\n</pre> result = tao.lat_ele_list()  result[0:5] Out[8]: <pre>['BEGINNING', 'IP_L0', 'CLEO_SOL#3', 'DET_00W', 'CLEO_SOL#4']</pre> In\u00a0[9]: Copied! <pre>tao.matrix(\"beginning\", \"end\")\n</pre> tao.matrix(\"beginning\", \"end\") Out[9]: <pre>{'mat6': array([[-9.85453321e-01, -1.78459151e-01, -2.95064264e-02,\n         -3.72328912e-05, -1.28463592e-03,  1.69890832e-03],\n        [ 1.94136498e-01, -9.79571649e-01, -7.19934541e-03,\n          8.91976963e-04, -5.89572298e-03, -3.81443689e-02],\n        [-8.56326169e-04,  6.02559410e-05, -8.76189778e-01,\n         -8.41353610e-03,  1.67854914e-05,  2.64910033e-03],\n        [ 1.16108943e-02,  2.96794811e-02,  2.66272918e+01,\n         -8.85649653e-01,  2.27202188e-05, -4.04349279e-02],\n        [-8.86152164e-02, -6.13453961e-03,  3.48586759e-02,\n         -2.68733720e-03,  9.47817657e-01, -8.79514378e+00],\n        [ 5.30821801e-03, -2.93203403e-04,  1.07833932e-04,\n         -1.59653540e-05,  1.15997844e-02,  9.47355161e-01]]),\n 'vec0': array([ 3.92874185e-04,  4.73093997e-03,  1.86151033e-06, -9.57458176e-05,\n        -7.06702237e-05,  5.03940903e-06])}</pre> In\u00a0[10]: Copied! <pre>tao.merit()\n</pre> tao.merit() Out[10]: <pre>411.826621947713</pre> In\u00a0[11]: Copied! <pre>result = tao.plot_list(\"r\")\n\nresult[0:2]\n</pre> result = tao.plot_list(\"r\")  result[0:2] Out[11]: <pre>[{'region': 'top',\n  'ix': 1,\n  'plot_name': '',\n  'visible': False,\n  'x1': 0.0,\n  'x2': 1.0,\n  'y1': 0.48,\n  'y2': 0.95},\n {'region': 'bottom',\n  'ix': 2,\n  'plot_name': '',\n  'visible': False,\n  'x1': 0.0,\n  'x2': 1.0,\n  'y1': 0.0,\n  'y2': 0.48}]</pre> In\u00a0[12]: Copied! <pre># 't' gives a mapping of template plot to index\nresult = tao.plot_list(\"t\")\n\nresult[\"cbar\"]\n</pre> # 't' gives a mapping of template plot to index result = tao.plot_list(\"t\")  result[\"cbar\"] Out[12]: <pre>5</pre> In\u00a0[13]: Copied! <pre>tao.spin_invariant(\"l0\")\n</pre> tao.spin_invariant(\"l0\") Out[13]: <pre>array([[ 0.        ,  0.99835693,  0.05730134],\n       [ 0.        ,  0.99835693,  0.05730134],\n       [-0.05286846,  0.99704202,  0.05578657],\n       ...,\n       [-0.24326432,  0.96860132,  0.05132215],\n       [-0.29421324,  0.95443762,  0.04987387],\n       [-0.29421324,  0.95443762,  0.04987387]], shape=(870, 3))</pre> In\u00a0[14]: Copied! <pre>tt = tao.taylor_map(\"beginning\", \"end\", order=2)\ntt\n</pre> tt = tao.taylor_map(\"beginning\", \"end\", order=2) tt Out[14]: <pre>{1: {(0, 0, 0, 0, 0, 0): -1.663663316406e-05,\n  (1, 0, 0, 0, 0, 0): -0.985196712087858,\n  (0, 1, 0, 0, 0, 0): -0.179943541501003,\n  (0, 0, 1, 0, 0, 0): -0.029699393064437,\n  (2, 0, 0, 0, 0, 0): 0.446063599012769,\n  (1, 1, 0, 0, 0, 0): -1.00834538341944,\n  (0, 2, 0, 0, 0, 0): 1.02619483929171,\n  (1, 0, 1, 0, 0, 0): -0.826521269005547,\n  (0, 1, 1, 0, 0, 0): 0.667386450216235,\n  (0, 0, 2, 0, 0, 0): 44.724137543036,\n  (0, 0, 0, 1, 0, 0): -3.89707865918302e-05,\n  (1, 0, 0, 1, 0, 0): -0.00123738146249592,\n  (0, 1, 0, 1, 0, 0): -0.0371117282090048,\n  (0, 0, 1, 1, 0, 0): -4.03450589572601,\n  (0, 0, 0, 0, 1, 0): -0.00131163342312495,\n  (1, 0, 0, 0, 1, 0): -0.149523066494851,\n  (0, 1, 0, 0, 1, 0): 0.0299332795605294,\n  (0, 0, 1, 0, 1, 0): 0.105807450551705,\n  (0, 0, 0, 0, 0, 1): 0.00175860483220225,\n  (1, 0, 0, 0, 0, 1): 2.90300033390886,\n  (0, 1, 0, 0, 0, 1): 3.49578305407844,\n  (0, 0, 1, 0, 0, 1): 7.97083342527444,\n  (0, 0, 0, 2, 0, 0): -0.0184811091754973,\n  (0, 0, 0, 1, 1, 0): -0.0039276689612962,\n  (0, 0, 0, 0, 2, 0): 0.000742823439561585,\n  (0, 0, 0, 1, 0, 1): 0.0279423433713061,\n  (0, 0, 0, 0, 1, 1): -0.0134034291054877,\n  (0, 0, 0, 0, 0, 2): -2.38971579427021},\n 2: {(0, 0, 0, 0, 0, 0): 0.00239048642778425,\n  (1, 0, 0, 0, 0, 0): 0.195138002316916,\n  (0, 1, 0, 0, 0, 0): -0.97935034764361,\n  (0, 0, 1, 0, 0, 0): -0.00732021295076095,\n  (2, 0, 0, 0, 0, 0): 1.32502455664919,\n  (1, 1, 0, 0, 0, 0): -0.169130081851123,\n  (0, 2, 0, 0, 0, 0): 0.29578300501795,\n  (1, 0, 1, 0, 0, 0): -0.962180738078545,\n  (0, 1, 1, 0, 0, 0): 0.6979766780573,\n  (0, 0, 2, 0, 0, 0): 100.484273300031,\n  (0, 0, 0, 1, 0, 0): 0.000900228227251675,\n  (1, 0, 0, 1, 0, 0): 0.0452519907618304,\n  (0, 1, 0, 1, 0, 0): 0.00972377669037822,\n  (0, 0, 1, 1, 0, 0): -2.89154417503779,\n  (0, 0, 0, 0, 1, 0): -0.00589560314315062,\n  (1, 0, 0, 0, 1, 0): -0.0608689864456376,\n  (0, 1, 0, 0, 1, 0): 0.131509810182725,\n  (0, 0, 1, 0, 1, 0): 0.0812502236996698,\n  (0, 0, 0, 0, 0, 1): -0.0381872457725166,\n  (1, 0, 0, 0, 0, 1): -9.55215423608415,\n  (0, 1, 0, 0, 0, 1): -5.33582022443531,\n  (0, 0, 1, 0, 0, 1): 4.52923691381796,\n  (0, 0, 0, 2, 0, 0): 0.062907936991644,\n  (0, 0, 0, 1, 1, 0): -0.00149863581104706,\n  (0, 0, 0, 0, 2, 0): 0.000587987700869761,\n  (0, 0, 0, 1, 0, 1): -0.318535800818317,\n  (0, 0, 0, 0, 1, 1): 0.0412941876859085,\n  (0, 0, 0, 0, 0, 2): 0.766025629825056},\n 3: {(0, 0, 0, 0, 0, 0): 1.05157632155543e-06,\n  (1, 0, 0, 0, 0, 0): -0.00086419336059121,\n  (0, 1, 0, 0, 0, 0): 6.2349746005244e-05,\n  (0, 0, 1, 0, 0, 0): -0.873566454495874,\n  (2, 0, 0, 0, 0, 0): -0.0217551877257797,\n  (1, 1, 0, 0, 0, 0): 0.000631067405895134,\n  (0, 2, 0, 0, 0, 0): -0.0181605239964537,\n  (1, 0, 1, 0, 0, 0): 4.98227514923155,\n  (0, 1, 1, 0, 0, 0): -3.43330385780134,\n  (0, 0, 2, 0, 0, 0): -0.305561099877852,\n  (0, 0, 0, 1, 0, 0): -0.00856834872286405,\n  (1, 0, 0, 1, 0, 0): -0.132656652596861,\n  (0, 1, 0, 1, 0, 0): -0.022053111809217,\n  (0, 0, 1, 1, 0, 0): 0.00641085057830203,\n  (0, 0, 0, 0, 1, 0): 1.68093509080935e-05,\n  (1, 0, 0, 0, 1, 0): 0.00244665842178762,\n  (0, 1, 0, 0, 1, 0): -0.0039641281232934,\n  (0, 0, 1, 0, 1, 0): -0.29905516102828,\n  (0, 0, 0, 0, 0, 1): 0.00264467550354317,\n  (1, 0, 0, 0, 0, 1): 0.319510823863028,\n  (0, 1, 0, 0, 0, 1): 0.0141710738890926,\n  (0, 0, 1, 0, 0, 1): -8.26626634969867,\n  (0, 0, 0, 2, 0, 0): -0.000318155048247545,\n  (0, 0, 0, 1, 1, 0): 0.000633772507679784,\n  (0, 0, 0, 0, 2, 0): -2.10025904514289e-05,\n  (0, 0, 0, 1, 0, 1): 0.0846818380433977,\n  (0, 0, 0, 0, 1, 1): -0.00127341225492608,\n  (0, 0, 0, 0, 0, 2): 0.0218742024125203},\n 4: {(0, 0, 0, 0, 0, 0): 1.82087246609295e-06,\n  (1, 0, 0, 0, 0, 0): 0.0117108773344462,\n  (0, 1, 0, 0, 0, 0): 0.0298731605819075,\n  (0, 0, 1, 0, 0, 0): 26.6637945910437,\n  (2, 0, 0, 0, 0, 0): 0.086819555333796,\n  (1, 1, 0, 0, 0, 0): 0.86103912331724,\n  (0, 2, 0, 0, 0, 0): 0.190822887185162,\n  (1, 0, 1, 0, 0, 0): 92.6293359859617,\n  (0, 1, 1, 0, 0, 0): 46.0396581646198,\n  (0, 0, 2, 0, 0, 0): 0.449570875159783,\n  (0, 0, 0, 1, 0, 0): -0.88323286434393,\n  (1, 0, 0, 1, 0, 0): -0.0824329619683937,\n  (0, 1, 0, 1, 0, 0): 4.59607349093526,\n  (0, 0, 1, 1, 0, 0): 0.60897643521077,\n  (0, 0, 0, 0, 1, 0): 2.4691454609881e-05,\n  (1, 0, 0, 0, 1, 0): 0.0364417974902703,\n  (0, 1, 0, 0, 1, 0): 0.00478842772736765,\n  (0, 0, 1, 0, 1, 0): -0.706485570150806,\n  (0, 0, 0, 0, 0, 1): -0.0404817456345931,\n  (1, 0, 0, 0, 0, 1): -2.75082803688034,\n  (0, 1, 0, 0, 0, 1): -8.49871901172019,\n  (0, 0, 1, 0, 0, 1): -131.350469116771,\n  (0, 0, 0, 2, 0, 0): 0.00467518361829392,\n  (0, 0, 0, 1, 1, 0): 0.276221869147749,\n  (0, 0, 0, 0, 2, 0): -1.88224006547989e-05,\n  (0, 0, 0, 1, 0, 1): 4.50404232727724,\n  (0, 0, 0, 0, 1, 1): 0.00433744919456945,\n  (0, 0, 0, 0, 0, 2): 0.120062362029172},\n 5: {(0, 0, 0, 0, 0, 0): -0.000398882588608429,\n  (1, 0, 0, 0, 0, 0): -0.08867580687647,\n  (0, 1, 0, 0, 0, 0): -0.00609683267395613,\n  (0, 0, 1, 0, 0, 0): 0.0349098913313992,\n  (2, 0, 0, 0, 0, 0): -4.50478879696629,\n  (1, 1, 0, 0, 0, 0): -3.27486185179514,\n  (0, 2, 0, 0, 0, 0): -1.99412692154932,\n  (1, 0, 1, 0, 0, 0): 6.72503276691646,\n  (0, 1, 1, 0, 0, 0): -7.66739894066855,\n  (0, 0, 2, 0, 0, 0): -193.642556641561,\n  (0, 0, 0, 1, 0, 0): -0.00268389910960541,\n  (1, 0, 0, 1, 0, 0): -0.311166284089318,\n  (0, 1, 0, 1, 0, 0): -0.0386890811042982,\n  (0, 0, 1, 1, 0, 0): 7.80657916724468,\n  (0, 0, 0, 0, 1, 0): 0.947807430959452,\n  (1, 0, 0, 0, 1, 0): 0.0361301949734075,\n  (0, 1, 0, 0, 1, 0): 0.00997995215815586,\n  (0, 0, 1, 0, 1, 0): -0.0420451127910405,\n  (0, 0, 0, 0, 0, 1): -8.79504642581238,\n  (1, 0, 0, 0, 0, 1): 1.2123658970066,\n  (0, 1, 0, 0, 0, 1): 5.23839218279289,\n  (0, 0, 1, 0, 0, 1): 1.12110770884297,\n  (0, 0, 0, 2, 0, 0): -0.0114705870555971,\n  (0, 0, 0, 1, 1, 0): 0.00185579733151235,\n  (0, 0, 0, 0, 2, 0): -0.000314905173632959,\n  (0, 0, 0, 1, 0, 1): -0.00772446409457311,\n  (0, 0, 0, 0, 1, 1): 0.012654859999934,\n  (0, 0, 0, 0, 0, 2): 0.361205536226595},\n 6: {(0, 0, 0, 0, 0, 0): -7.15739821631324e-06,\n  (1, 0, 0, 0, 0, 0): 0.00531272370776086,\n  (0, 1, 0, 0, 0, 0): -0.000311134080901666,\n  (0, 0, 1, 0, 0, 0): 0.000106214714498229,\n  (2, 0, 0, 0, 0, 0): -0.0094900955245443,\n  (1, 1, 0, 0, 0, 0): -0.17664218605069,\n  (0, 2, 0, 0, 0, 0): -0.0274795476693785,\n  (1, 0, 1, 0, 0, 0): -0.017039906655732,\n  (0, 1, 1, 0, 0, 0): 0.0053149331370012,\n  (0, 0, 2, 0, 0, 0): 2.02217572161766,\n  (0, 0, 0, 1, 0, 0): -1.59179292788276e-05,\n  (1, 0, 0, 1, 0, 0): -0.00164366781160285,\n  (0, 1, 0, 1, 0, 0): -0.0040862814664976,\n  (0, 0, 1, 1, 0, 0): -0.155773825826708,\n  (0, 0, 0, 0, 1, 0): 0.0115997890368492,\n  (1, 0, 0, 0, 1, 0): -0.000234887357092423,\n  (0, 1, 0, 0, 1, 0): 0.00142890909589228,\n  (0, 0, 1, 0, 1, 0): 0.000135713825743176,\n  (0, 0, 0, 0, 0, 1): 0.947365021032209,\n  (1, 0, 0, 0, 0, 1): -0.0564938437334293,\n  (0, 1, 0, 0, 0, 1): 0.0133545422195716,\n  (0, 0, 1, 0, 0, 1): 0.00297167641079449,\n  (0, 0, 0, 2, 0, 0): -0.000889800667490775,\n  (0, 0, 0, 1, 1, 0): -1.10055747745639e-07,\n  (0, 0, 0, 0, 2, 0): 4.33801921671704e-06,\n  (0, 0, 0, 1, 0, 1): -0.00200398440041919,\n  (0, 0, 0, 0, 1, 1): 0.000905453593342671,\n  (0, 0, 0, 0, 0, 2): 0.00960315618922836}}</pre> In\u00a0[15]: Copied! <pre># Compare some terms with the matrix calc:\ntao.matrix(\"beginning\", \"end\")[\"mat6\"][0, 0], tt[1][(1, 0, 0, 0, 0, 0)]\n</pre> # Compare some terms with the matrix calc: tao.matrix(\"beginning\", \"end\")[\"mat6\"][0, 0], tt[1][(1, 0, 0, 0, 0, 0)] Out[15]: <pre>(np.float64(-0.98545332129357), -0.985196712087858)</pre> In\u00a0[16]: Copied! <pre>tao.matrix(\"beginning\", \"end\")[\"mat6\"][1, 0], tt[2][(1, 0, 0, 0, 0, 0)]\n</pre> tao.matrix(\"beginning\", \"end\")[\"mat6\"][1, 0], tt[2][(1, 0, 0, 0, 0, 0)] Out[16]: <pre>(np.float64(0.194136497704575), 0.195138002316916)</pre> In\u00a0[17]: Copied! <pre>result = tao.var_v_array(\"quad_k1\")\nresult[0:2]\n</pre> result = tao.var_v_array(\"quad_k1\") result[0:2] Out[17]: <pre>[{'ix_v1': 0,\n  'var_attrib_name': 'Q00W[K1]',\n  'meas_value': 0.0,\n  'model_value': -0.841784836453016,\n  'design_value': -0.841784836453016,\n  'useit_opt': False,\n  'good_user': False,\n  'weight': 100000.0},\n {'ix_v1': 3,\n  'var_attrib_name': 'Q03W[K1]',\n  'meas_value': 0.0,\n  'model_value': -0.128947,\n  'design_value': -0.128947,\n  'useit_opt': True,\n  'good_user': True,\n  'weight': 100000.0}]</pre>"},{"location":"examples/special_parsers/#special-parsers","title":"Special Parsers\u00b6","text":"<p>Some of the Tao python commands output special structures in a <code>;</code> delimited fashion. Some PyTao methods parse these into more useful structures.</p>"},{"location":"examples/special_parsers/#data_d_array","title":"data_d_array\u00b6","text":""},{"location":"examples/special_parsers/#derivative","title":"derivative\u00b6","text":""},{"location":"examples/special_parsers/#ele_control_var","title":"ele_control_var\u00b6","text":""},{"location":"examples/special_parsers/#lat_ele_list","title":"lat_ele_list\u00b6","text":""},{"location":"examples/special_parsers/#matrix","title":"matrix\u00b6","text":""},{"location":"examples/special_parsers/#merit","title":"merit\u00b6","text":""},{"location":"examples/special_parsers/#plot_list","title":"plot_list\u00b6","text":""},{"location":"examples/special_parsers/#spin_invariant","title":"spin_invariant\u00b6","text":""},{"location":"examples/special_parsers/#taylor_map","title":"taylor_map\u00b6","text":""},{"location":"examples/special_parsers/#var_v_array","title":"var_v_array\u00b6","text":""}]}